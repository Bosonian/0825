{"version":3,"file":"research-tools-8qCRDa3H.js","sources":["../../src/localization/messages.js","../../src/localization/i18n.js","../../src/research/legacy-ich-model.js","../../src/research/data-logger.js","../../src/research/comparison-ui.js","../../src/analytics/clinical-reporting.js","../../src/analytics/quality-metrics.js","../../src/analytics/audit-trail.js"],"sourcesContent":["// Localization messages for the Stroke Triage Assistant\n\nexport const messages = {\n  en: {\n    // Header\n    appTitle: 'iGFAP',\n    emergencyBadge: 'Emergency Tool',\n    helpButton: 'Help and Instructions',\n    darkModeButton: 'Toggle dark mode',\n    languageToggle: 'Language',\n\n    // Progress\n    step1: 'Initial Assessment',\n    step2: 'Data Collection',\n    step3: 'Results',\n\n    // Module titles\n    comaModuleTitle: 'Coma Module',\n    limitedDataModuleTitle: 'Limited Data Module',\n    fullStrokeModuleTitle: 'Full Stroke Module',\n\n    // Triage 1\n    triage1Title: 'Patient Assessment',\n    triage1Question: 'Is the patient comatose?',\n    triage1Help: 'Glasgow Coma Scale < 9',\n    triage1Yes: 'YES - Comatose',\n    triage1No: 'NO - Conscious',\n\n    // Triage 2\n    triage2Title: 'Examination Capability',\n    triage2Question: 'Can the patient be reliably examined?',\n    triage2Help: 'Patient is not aphasic, confused, or uncooperative',\n    triage2Yes: 'YES - Full Exam Possible',\n    triage2No: 'NO - Limited Exam Only',\n\n    // Forms\n    ageLabel: 'Age (years)',\n    ageHelp: 'Patient age in years',\n    systolicLabel: 'Systolic BP (mmHg)',\n    systolicHelp: 'Systolic blood pressure',\n    diastolicLabel: 'Diastolic BP (mmHg)',\n    diastolicHelp: 'Diastolic blood pressure',\n    gfapLabel: 'GFAP Value (pg/mL)',\n    gfapHelp: 'GFAP biomarker level',\n    fastEdLabel: 'FAST-ED Score',\n    fastEdHelp: 'FAST-ED assessment score (0-9)',\n\n    // Checkboxes\n    headacheLabel: 'Headache',\n    vigilanzLabel: 'Reduced consciousness',\n    armPareseLabel: 'Arm weakness',\n    beinPareseLabel: 'Leg weakness',\n    eyeDeviationLabel: 'Eye deviation',\n    atrialFibLabel: 'Atrial fibrillation',\n    anticoagLabel: 'Anticoagulated (NOAK)',\n    antiplateletsLabel: 'Antiplatelets',\n\n    // Buttons\n    analyzeButton: 'Analyze',\n    analyzing: 'Analyzing...',\n    printResults: 'Print Results',\n    newAssessment: 'Start New Assessment',\n    startOver: 'Start Over',\n    goBack: 'Go Back',\n    goHome: 'Go Home',\n\n    // Form sections\n    basicInformation: 'Basic Information',\n    biomarkersScores: 'Biomarkers & Scores',\n    clinicalSymptoms: 'Clinical Symptoms',\n    medicalHistory: 'Medical History',\n\n    // Form labels with units\n    ageYearsLabel: 'Age (years)',\n    systolicBpLabel: 'Systolic BP (mmHg)',\n    diastolicBpLabel: 'Diastolic BP (mmHg)',\n    gfapValueLabel: 'GFAP Value (pg/mL)',\n    fastEdScoreLabel: 'FAST-ED Score',\n\n    // Help text\n    ageYearsHelp: \"Patient's age in years\",\n    systolicBpHelp: 'Normal: 90-140 mmHg',\n    diastolicBpHelp: 'Normal: 60-90 mmHg',\n    gfapTooltip: 'Brain injury biomarker',\n    gfapTooltipLong: 'Glial Fibrillary Acidic Protein - Brain injury biomarker',\n    gfapRange: 'Range: {min} - {max} pg/mL',\n    fastEdTooltip: '0-9 scale for LVO screening',\n\n    // Module buttons\n    analyzeIchRisk: 'Analyze ICH Risk',\n    analyzeStrokeRisk: 'Analyze Stroke Risk',\n\n    // Alert messages\n    criticalPatient: 'Critical Patient',\n    comaAlert: 'Patient is comatose (GCS < 9). Rapid assessment required.',\n    vigilanceReduction: 'Vigilance Reduction (Decreased alertness)',\n\n    // Additional symptom labels\n    armParesis: 'Arm Paresis',\n    legParesis: 'Leg Paresis',\n    eyeDeviation: 'Eye Deviation',\n    atrialFibrillation: 'Atrial Fibrillation',\n    onNoacDoac: 'On NOAC/DOAC',\n    onAntiplatelets: 'On Antiplatelets',\n\n    // Results\n    resultsTitle: 'Assessment Results',\n    bleedingRiskAssessment: 'Bleeding Risk Assessment',\n    ichProbability: 'ICH Probability',\n    lvoProbability: 'LVO Probability',\n    lvoMayBePossible: 'Large vessel occlusion possible - further evaluation recommended',\n    riskFactorsTitle: 'Main Risk Factors',\n    increasingRisk: 'Increasing Risk',\n    decreasingRisk: 'Decreasing Risk',\n    noFactors: 'No factors',\n    riskLevel: 'Risk Level',\n    lowRisk: 'Low Risk',\n    mediumRisk: 'Medium Risk',\n    highRisk: 'High Risk',\n\n    // Risk levels\n    riskLow: 'Low',\n    riskMedium: 'Medium',\n    riskHigh: 'High',\n\n    // Risk Factors Analysis\n    riskFactorsAnalysis: 'Risk Factors',\n    contributingFactors: 'Contributing factors to the assessment',\n    riskFactors: 'Risk Factors',\n    increaseRisk: 'INCREASE',\n    decreaseRisk: 'DECREASE',\n    noPositiveFactors: 'No increasing factors',\n    noNegativeFactors: 'No decreasing factors',\n    ichRiskFactors: 'ICH Risk Factors',\n    lvoRiskFactors: 'LVO Risk Factors',\n    ichRisk: 'ICH Risk',\n    lvoRisk: 'LVO Risk',\n    sendToHospital: 'Send to Hospital',\n\n    // Critical Alert\n    criticalAlertTitle: 'CRITICAL RISK DETECTED',\n    criticalAlertMessage: 'High probability of intracerebral hemorrhage detected.',\n    immediateActionsRequired: 'Immediate actions required',\n    initiateStrokeProtocol: 'Initiate stroke protocol immediately',\n    urgentCtImaging: 'Urgent CT imaging required',\n    considerBpManagement: 'Consider blood pressure management',\n    prepareNeurosurgicalConsult: 'Prepare for potential neurosurgical consultation',\n\n    // Help Modal\n    helpTitle: 'Quick Reference Guide',\n    gcsTitle: 'Glasgow Coma Scale (GCS)',\n    gcsLow: 'GCS < 9: Comatose patient - use Coma Module',\n    gcsMod: 'GCS 8-12: Moderate impairment',\n    gcsHigh: 'GCS 13-15: Mild impairment',\n    fastEdTitle: 'FAST-ED Score Components',\n    fastEdFacial: 'Facial Palsy: 0-1 points',\n    fastEdArm: 'Arm Weakness: 0-2 points',\n    fastEdSpeech: 'Speech Changes: 0-2 points',\n    fastEdTime: 'Time: Critical factor',\n    fastEdEye: 'Eye Deviation: 0-2 points',\n    fastEdDenial: 'Denial/Neglect: 0-2 points',\n    criticalValuesTitle: 'Critical Values',\n    criticalBp: 'Systolic BP > 180: Increased ICH risk',\n    criticalGfap: 'GFAP > 500 pg/mL: Significant marker',\n    criticalFastEd: 'FAST-ED ≥ 4: Consider LVO',\n\n    // FAST-ED Calculator Modal\n    fastEdCalculatorTitle: 'FAST-ED Score Calculator',\n    fastEdCalculatorSubtitle: 'Click to calculate FAST-ED score components',\n    facialPalsyTitle: 'Facial Palsy',\n    facialPalsyNormal: 'Normal (0)',\n    facialPalsyMild: 'Present (1)',\n    armWeaknessTitle: 'Arm Weakness',\n    armWeaknessNormal: 'Normal (0)',\n    armWeaknessMild: 'Mild weakness or drift (1)',\n    armWeaknessSevere: 'Severe weakness or falls immediately (2)',\n    speechChangesTitle: 'Speech Abnormalities',\n    speechChangesNormal: 'Normal (0)',\n    speechChangesMild: 'Mild dysarthria or aphasia (1)',\n    speechChangesSevere: 'Severe dysarthria or aphasia (2)',\n    eyeDeviationTitle: 'Eye Deviation',\n    eyeDeviationNormal: 'Normal (0)',\n    eyeDeviationPartial: 'Partial gaze deviation (1)',\n    eyeDeviationForced: 'Forced gaze deviation (2)',\n    denialNeglectTitle: 'Denial/Neglect',\n    denialNeglectNormal: 'Normal (0)',\n    denialNeglectPartial: 'Partial neglect (1)',\n    denialNeglectComplete: 'Complete neglect (2)',\n    totalScoreTitle: 'Total FAST-ED Score',\n    riskLevel: 'Risk Level',\n    riskLevelLow: 'LOW (Score <4)',\n    riskLevelHigh: 'HIGH (Score ≥4 - Consider LVO)',\n    applyScore: 'Apply Score',\n    cancel: 'Cancel',\n\n    // Results Screen Enhancements\n    riskAnalysis: 'Risk Analysis',\n    riskAnalysisSubtitle: 'Clinical factors in this assessment',\n    contributingFactors: 'Contributing factors',\n    factorsShown: 'shown',\n    positiveFactors: 'Positive factors',\n    negativeFactors: 'Negative factors',\n    clinicalInformation: 'Clinical Information',\n    clinicalRecommendations: 'Clinical Recommendations',\n    clinicalRec1: 'Consider immediate imaging if ICH risk is high',\n    clinicalRec2: 'Activate stroke team for LVO scores ≥ 50%',\n    clinicalRec3: 'Monitor blood pressure closely',\n    clinicalRec4: 'Document all findings thoroughly',\n    noDriverData: 'No driver data available',\n    driverAnalysisUnavailable: 'Driver analysis unavailable',\n    driverInfoNotAvailable: 'Driver information not available from this prediction model',\n    driverAnalysisNotAvailable: 'Driver analysis not available for this prediction',\n    lvoNotPossible: 'LVO assessment not possible with limited data',\n    fullExamRequired: 'Full neurological examination required for LVO screening',\n    limitedAssessment: 'Limited Assessment',\n\n    // Disclaimer\n    disclaimer: 'Clinical Disclaimer',\n    disclaimerText: 'This tool is for clinical decision support only. Always use clinical judgment and follow local protocols. Not a replacement for physician assessment.',\n    importantNote: 'Important',\n    importantText: 'These results are for clinical decision support only. Always use clinical judgment and follow institutional protocols.',\n\n    // ICH Volume and Mortality\n    predictedMortality: 'Predicted 30-day mortality',\n    ichVolumeLabel: 'ICH Volume',\n    references: 'References',\n\n    // Input Summary\n    inputSummaryTitle: 'Input Summary',\n    inputSummarySubtitle: 'Values used for this analysis',\n\n    // Footer\n    privacyLink: 'Privacy Policy',\n    disclaimerLink: 'Medical Disclaimer',\n    versionLink: 'Version 2.1.0 - Research Preview',\n\n    // Privacy and disclaimers\n    privacyPolicy: 'Privacy Policy: This tool processes data locally. No patient data is stored or transmitted.',\n    medicalDisclaimer: 'Medical Disclaimer: This tool is for clinical decision support only. Always use clinical judgment and follow local protocols.',\n\n    // Error messages\n    networkError: 'Network error - please check your connection and try again',\n    requestTimeout: 'Request timeout - please try again',\n    apiError: 'Failed to get results',\n    validationError: 'Please check your input values',\n\n    // Session\n    sessionTimeout: 'Your session has been idle for 30 minutes. Would you like to continue?',\n    unsavedData: 'You have unsaved data. Are you sure you want to leave?',\n\n    // Stroke Centers\n    nearestCentersTitle: 'Nearest Stroke Centers',\n    useCurrentLocation: 'Use Current Location',\n    enterLocationPlaceholder: 'Enter city or address...',\n    enterManually: 'Enter Location Manually',\n    search: 'Search',\n    yourLocation: 'Your Location',\n    recommendedCenters: 'Recommended Centers',\n    alternativeCenters: 'Alternative Centers',\n    noCentersFound: 'No stroke centers found in this area',\n    gettingLocation: 'Getting your location',\n    searchingLocation: 'Searching location',\n    locationError: 'Unable to get your location',\n    locationPermissionDenied: 'Location access denied. Please allow location access and try again.',\n    locationUnavailable: 'Location information is unavailable',\n    locationTimeout: 'Location request timed out',\n    geolocationNotSupported: 'Geolocation is not supported by this browser',\n    geocodingNotImplemented: 'Location search not available. Please use GPS or enter coordinates manually.',\n    tryManualEntry: 'Try entering your location manually or use GPS.',\n    distanceNote: 'Distances are calculated as straight-line distances. Actual travel times may vary.',\n    travelTimeNote: 'Travel times calculated for emergency vehicles with sirens and priority routing.',\n    calculatingTravelTimes: 'Calculating travel times',\n    minutes: 'min',\n    poweredByOrs: 'Travel times powered by OpenRoute Service',\n\n    // Center Types and Services\n    comprehensiveCenter: 'Comprehensive Stroke Center',\n    primaryCenter: 'Primary Stroke Center',\n    telemetryCenter: 'Telemedicine Center',\n    thrombectomy: 'Thrombectomy',\n    neurosurgery: 'Neurosurgery',\n    icu: 'Intensive Care',\n    telemedicine: 'Telemedicine',\n    stroke_unit: 'Stroke Unit',\n\n    // Actions\n    call: 'Call',\n    directions: 'Directions',\n    emergency: 'Emergency',\n    certified: 'Certified',\n\n    // Prerequisites Modal\n    prerequisitesTitle: 'Prerequisites for Stroke Triage',\n    prerequisitesIntro: 'Please confirm that all of the following prerequisites are met:',\n    prerequisitesWarning: 'All prerequisites must be met to continue',\n    continue: 'Continue',\n    acute_deficit: 'Acute (severe) neurological deficit present',\n    symptom_onset: 'Symptom onset within 6 hours',\n    no_preexisting: 'No pre-existing severe neurological deficits',\n    no_trauma: 'No traumatic brain injury present',\n\n    // Differential Diagnoses for Stroke Modules\n    differentialDiagnoses: 'Differential Diagnoses',\n    reconfirmTimeWindow: 'Please reconfirm time window!',\n    unclearTimeWindow: 'With unclear/extended time window, early demarcated brain infarction is also possible',\n    rareDiagnoses: 'Rare diagnoses such as glioblastoma are also possible',\n\n    // Login Screen\n    researchAccessRequired: 'Research Access Required',\n    researchPreviewDescription: 'This is a research preview of the iGFAP Stroke Triage Assistant for clinical validation.',\n    importantNotice: 'Important Notice',\n    researchUseOnly: 'Research Use Only',\n    researchUseOnlyDesc: 'Not for clinical decision making',\n    noPatientDataStorage: 'No Patient Data Storage',\n    noPatientDataStorageDesc: 'All data processed locally',\n    clinicalAdvisory: 'Clinical Advisory',\n    clinicalAdvisoryDesc: 'Under supervision of Prof. Christian Förch & Dr. Lovepreet Kalra',\n    contact: 'Contact',\n    researchAccessCode: 'Research Access Code',\n    enterResearchAccessCode: 'Enter research access code',\n    accessResearchSystem: 'Access Research System',\n    regulatoryStatus: 'Regulatory Status',\n    regulatoryStatusDesc: 'Research prototype - CE certification pending',\n    dataProtection: 'Data Protection',\n    dataProtectionDesc: 'GDPR compliant - local processing only',\n    clinicalOversight: 'Clinical Oversight',\n    clinicalOversightDesc: 'RKH Klinikum Ludwigsburg, Neurologie',\n    accessDenied: 'Access Denied',\n    invalidResearchCode: 'Invalid research access code. Please try again.',\n\n  },\n\n  de: {\n    // Header\n    appTitle: 'iGFAP',\n    emergencyBadge: 'Notfall-Tool',\n    helpButton: 'Hilfe und Anweisungen',\n    darkModeButton: 'Dunklen Modus umschalten',\n    languageToggle: 'Sprache',\n\n    // Progress\n    step1: 'Erstbeurteilung',\n    step2: 'Datenerhebung',\n    step3: 'Ergebnisse',\n\n    // Module titles\n    comaModuleTitle: 'Koma-Modul',\n    limitedDataModuleTitle: 'Begrenzte Daten Modul',\n    fullStrokeModuleTitle: 'Vollständiges Schlaganfall-Modul',\n\n    // Triage 1\n    triage1Title: 'Patientenbeurteilung',\n    triage1Question: 'Ist der Patient komatös?',\n    triage1Help: 'Glasgow Coma Scale < 9',\n    triage1Yes: 'JA - Komatös',\n    triage1No: 'NEIN - Bei Bewusstsein',\n\n    // Triage 2\n    triage2Title: 'Untersuchungsfähigkeit',\n    triage2Question: 'Kann der Patient zuverlässig untersucht werden?',\n    triage2Help: 'Patient ist nicht aphasisch, verwirrt oder unkooperativ',\n    triage2Yes: 'JA - Vollständige Untersuchung möglich',\n    triage2No: 'NEIN - Nur begrenzte Untersuchung',\n\n    // Forms\n    ageLabel: 'Alter (Jahre)',\n    ageHelp: 'Patientenalter in Jahren',\n    systolicLabel: 'Systolischer RR (mmHg)',\n    systolicHelp: 'Systolischer Blutdruck',\n    diastolicLabel: 'Diastolischer RR (mmHg)',\n    diastolicHelp: 'Diastolischer Blutdruck',\n    gfapLabel: 'GFAP-Wert (pg/mL)',\n    gfapHelp: 'GFAP-Biomarker-Wert',\n    fastEdLabel: 'FAST-ED-Score',\n    fastEdHelp: 'FAST-ED-Bewertungsscore (0-9)',\n\n    // Checkboxes\n    headacheLabel: 'Kopfschmerzen',\n    vigilanzLabel: 'Bewusstseinstrübung',\n    armPareseLabel: 'Armschwäche',\n    beinPareseLabel: 'Beinschwäche',\n    eyeDeviationLabel: 'Blickdeviation',\n    atrialFibLabel: 'Vorhofflimmern',\n    anticoagLabel: 'Antikoaguliert (NOAK)',\n    antiplateletsLabel: 'Thrombozytenaggregationshemmer',\n\n    // Buttons\n    analyzeButton: 'Analysieren',\n    analyzing: 'Analysiere...',\n    printResults: 'Ergebnisse drucken',\n    newAssessment: 'Neue Bewertung starten',\n    startOver: 'Von vorn beginnen',\n    goBack: 'Zurück',\n    goHome: 'Zur Startseite',\n\n    // Form sections\n    basicInformation: 'Grundinformationen',\n    biomarkersScores: 'Biomarker & Scores',\n    clinicalSymptoms: 'Klinische Symptome',\n    medicalHistory: 'Anamnese',\n\n    // Form labels with units\n    ageYearsLabel: 'Alter (Jahre)',\n    systolicBpLabel: 'Systolischer RR (mmHg)',\n    diastolicBpLabel: 'Diastolischer RR (mmHg)',\n    gfapValueLabel: 'GFAP-Wert (pg/mL)',\n    fastEdScoreLabel: 'FAST-ED-Score',\n\n    // Help text\n    ageYearsHelp: 'Patientenalter in Jahren',\n    systolicBpHelp: 'Normal: 90-140 mmHg',\n    diastolicBpHelp: 'Normal: 60-90 mmHg',\n    gfapTooltip: 'Hirnverletzungs-Biomarker',\n    gfapTooltipLong: 'Glial Fibrillary Acidic Protein - Hirnverletzungs-Biomarker',\n    gfapRange: 'Bereich: {min} - {max} pg/mL',\n    fastEdTooltip: '0-9 Skala für LVO-Screening',\n\n    // Module buttons\n    analyzeIchRisk: 'ICB-Risiko analysieren',\n    analyzeStrokeRisk: 'Schlaganfall-Risiko analysieren',\n\n    // Alert messages\n    criticalPatient: 'Kritischer Patient',\n    comaAlert: 'Patient ist komatös (GCS < 9). Schnelle Beurteilung erforderlich.',\n    vigilanceReduction: 'Vigilanzminderung (Verminderte Wachheit)',\n\n    // Additional symptom labels\n    armParesis: 'Armparese',\n    legParesis: 'Beinparese',\n    eyeDeviation: 'Blickdeviation',\n    atrialFibrillation: 'Vorhofflimmern',\n    onNoacDoac: 'NOAK/DOAK-Therapie',\n    onAntiplatelets: 'Thrombozytenaggregationshemmer',\n\n    // Results\n    resultsTitle: 'Bewertungsergebnisse',\n    bleedingRiskAssessment: 'Blutungsrisiko-Bewertung',\n    ichProbability: 'ICB-Risiko',\n    lvoProbability: 'LVO-Risiko',\n    lvoMayBePossible: 'Großgefäßverschluss möglich - weitere Abklärung empfohlen',\n    riskFactorsTitle: 'Hauptrisikofaktoren',\n    increasingRisk: 'Risikoerhöhend',\n    decreasingRisk: 'Risikomindernd',\n    noFactors: 'Keine Faktoren',\n    riskLevel: 'Risikostufe',\n    lowRisk: 'Niedriges Risiko',\n    mediumRisk: 'Mittleres Risiko',\n    highRisk: 'Hohes Risiko',\n\n    // Risk levels\n    riskLow: 'Niedrig',\n    riskMedium: 'Mittel',\n    riskHigh: 'Hoch',\n\n    // Risk Factors Analysis\n    riskFactorsAnalysis: 'Risikofaktoren',\n    contributingFactors: 'Beitragende Faktoren zur Bewertung',\n    riskFactors: 'Risikofaktoren',\n    increaseRisk: 'ERHÖHEN',\n    decreaseRisk: 'VERRINGERN',\n    noPositiveFactors: 'Keine erhöhenden Faktoren',\n    noNegativeFactors: 'Keine verringernden Faktoren',\n    ichRiskFactors: 'ICB-Risikofaktoren',\n    lvoRiskFactors: 'LVO-Risikofaktoren',\n    ichRisk: 'ICB-Risiko',\n    lvoRisk: 'LVO-Risiko',\n    sendToHospital: 'An Krankenhaus senden',\n\n    // Critical Alert\n    criticalAlertTitle: 'KRITISCHES RISIKO ERKANNT',\n    criticalAlertMessage: 'Hohe Wahrscheinlichkeit einer intrazerebralen Blutung erkannt.',\n    immediateActionsRequired: 'Sofortige Maßnahmen erforderlich',\n    initiateStrokeProtocol: 'Schlaganfall-Protokoll sofort einleiten',\n    urgentCtImaging: 'Dringende CT-Bildgebung erforderlich',\n    considerBpManagement: 'Blutdruckmanagement erwägen',\n    prepareNeurosurgicalConsult: 'Neurochirurgische Konsultation vorbereiten',\n\n    // Help Modal\n    helpTitle: 'Kurzreferenzleitfaden',\n    gcsTitle: 'Glasgow Coma Scale (GCS)',\n    gcsLow: 'GCS < 9: Komatöser Patient - Koma-Modul verwenden',\n    gcsMod: 'GCS 8-12: Mäßige Beeinträchtigung',\n    gcsHigh: 'GCS 13-15: Leichte Beeinträchtigung',\n    fastEdTitle: 'FAST-ED-Score-Komponenten',\n    fastEdFacial: 'Faziale Parese: 0-1 Punkte',\n    fastEdArm: 'Armschwäche: 0-2 Punkte',\n    fastEdSpeech: 'Sprachveränderungen: 0-2 Punkte',\n    fastEdTime: 'Zeit: Kritischer Faktor',\n    fastEdEye: 'Blickdeviation: 0-2 Punkte',\n    fastEdDenial: 'Verneinung/Neglect: 0-2 Punkte',\n    criticalValuesTitle: 'Kritische Werte',\n    criticalBp: 'Systolischer RR > 180: Erhöhtes ICB-Risiko',\n    criticalGfap: 'GFAP > 500 pg/mL: Signifikanter Marker',\n    criticalFastEd: 'FAST-ED ≥ 4: LVO in Betracht ziehen',\n\n    // FAST-ED Calculator Modal\n    fastEdCalculatorTitle: 'FAST-ED-Score-Rechner',\n    fastEdCalculatorSubtitle: 'Klicken Sie, um FAST-ED-Score-Komponenten zu berechnen',\n    facialPalsyTitle: 'Fazialisparese',\n    facialPalsyNormal: 'Normal (0)',\n    facialPalsyMild: 'Vorhanden (1)',\n    armWeaknessTitle: 'Armschwäche',\n    armWeaknessNormal: 'Normal (0)',\n    armWeaknessMild: 'Leichte Schwäche oder Absinken (1)',\n    armWeaknessSevere: 'Schwere Schwäche oder fällt sofort ab (2)',\n    speechChangesTitle: 'Sprachstörungen',\n    speechChangesNormal: 'Normal (0)',\n    speechChangesMild: 'Leichte Dysarthrie oder Aphasie (1)',\n    speechChangesSevere: 'Schwere Dysarthrie oder Aphasie (2)',\n    eyeDeviationTitle: 'Blickdeviation',\n    eyeDeviationNormal: 'Normal (0)',\n    eyeDeviationPartial: 'Partielle Blickdeviation (1)',\n    eyeDeviationForced: 'Forcierte Blickdeviation (2)',\n    denialNeglectTitle: 'Verneinung/Neglect',\n    denialNeglectNormal: 'Normal (0)',\n    denialNeglectPartial: 'Partieller Neglect (1)',\n    denialNeglectComplete: 'Kompletter Neglect (2)',\n    totalScoreTitle: 'Gesamt-FAST-ED-Score',\n    riskLevel: 'Risikostufe',\n    riskLevelLow: 'NIEDRIG (Score <4)',\n    riskLevelHigh: 'HOCH (Score ≥4 - LVO erwägen)',\n    applyScore: 'Score Anwenden',\n    cancel: 'Abbrechen',\n\n    // Results Screen Enhancements\n    riskAnalysis: 'Risikoanalyse',\n    riskAnalysisSubtitle: 'Klinische Faktoren in dieser Bewertung',\n    contributingFactors: 'Beitragende Faktoren',\n    factorsShown: 'angezeigt',\n    positiveFactors: 'Positive Faktoren',\n    negativeFactors: 'Negative Faktoren',\n    clinicalInformation: 'Klinische Informationen',\n    clinicalRecommendations: 'Klinische Empfehlungen',\n    clinicalRec1: 'Sofortige Bildgebung erwägen bei hohem ICB-Risiko',\n    clinicalRec2: 'Stroke-Team aktivieren bei LVO-Score ≥ 50%',\n    clinicalRec3: 'Blutdruck engmaschig überwachen',\n    clinicalRec4: 'Alle Befunde gründlich dokumentieren',\n    noDriverData: 'Keine Treiberdaten verfügbar',\n    driverAnalysisUnavailable: 'Treiberanalyse nicht verfügbar',\n    driverInfoNotAvailable: 'Treiberinformationen von diesem Vorhersagemodell nicht verfügbar',\n    driverAnalysisNotAvailable: 'Treiberanalyse für diese Vorhersage nicht verfügbar',\n    lvoNotPossible: 'LVO-Bewertung mit begrenzten Daten nicht möglich',\n    fullExamRequired: 'Vollständige neurologische Untersuchung für LVO-Screening erforderlich',\n    limitedAssessment: 'Begrenzte Bewertung',\n\n    // Disclaimer\n    disclaimer: 'Klinischer Haftungsausschluss',\n    disclaimerText: 'Dieses Tool dient nur zur klinischen Entscheidungsunterstützung. Verwenden Sie immer klinisches Urteilsvermögen und befolgen Sie lokale Protokolle. Kein Ersatz für ärztliche Beurteilung.',\n    importantNote: 'Wichtig',\n    importantText: 'Diese Ergebnisse dienen nur zur klinischen Entscheidungsunterstützung. Verwenden Sie immer klinisches Urteilsvermögen und befolgen Sie institutionelle Protokolle.',\n\n    // ICH Volume and Mortality\n    predictedMortality: 'Vorhergesagte 30-Tage-Mortalität',\n    ichVolumeLabel: 'ICB-Volumen',\n    references: 'Referenzen',\n\n    // Input Summary\n    inputSummaryTitle: 'Eingabezusammenfassung',\n    inputSummarySubtitle: 'Für diese Analyse verwendete Werte',\n\n    // Footer\n    privacyLink: 'Datenschutzrichtlinie',\n    disclaimerLink: 'Medizinischer Haftungsausschluss',\n    versionLink: 'Version 2.1.0 - Research Preview',\n\n    // Privacy and disclaimers\n    privacyPolicy: 'Datenschutzrichtlinie: Dieses Tool verarbeitet Daten lokal. Keine Patientendaten werden gespeichert oder übertragen.',\n    medicalDisclaimer: 'Medizinischer Haftungsausschluss: Dieses Tool dient nur zur klinischen Entscheidungsunterstützung. Verwenden Sie immer klinisches Urteilsvermögen und befolgen Sie lokale Protokolle.',\n\n    // Error messages\n    networkError: 'Netzwerkfehler - bitte überprüfen Sie Ihre Verbindung und versuchen Sie es erneut',\n    requestTimeout: 'Anfrage-Timeout - bitte versuchen Sie es erneut',\n    apiError: 'Ergebnisse konnten nicht abgerufen werden',\n    validationError: 'Bitte überprüfen Sie Ihre Eingabewerte',\n\n    // Session\n    sessionTimeout: 'Ihre Sitzung war 30 Minuten lang inaktiv. Möchten Sie fortfahren?',\n    unsavedData: 'Sie haben ungespeicherte Daten. Sind Sie sicher, dass Sie verlassen möchten?',\n\n    // Stroke Centers\n    nearestCentersTitle: 'Nächstgelegene Schlaganfall-Zentren',\n    useCurrentLocation: 'Aktuellen Standort verwenden',\n    enterLocationPlaceholder: 'Stadt oder Adresse eingeben...',\n    enterManually: 'Standort manuell eingeben',\n    search: 'Suchen',\n    yourLocation: 'Ihr Standort',\n    recommendedCenters: 'Empfohlene Zentren',\n    alternativeCenters: 'Alternative Zentren',\n    noCentersFound: 'Keine Schlaganfall-Zentren in diesem Bereich gefunden',\n    gettingLocation: 'Standort wird ermittelt',\n    searchingLocation: 'Standort wird gesucht',\n    locationError: 'Standort konnte nicht ermittelt werden',\n    locationPermissionDenied: 'Standortzugriff verweigert. Bitte erlauben Sie Standortzugriff und versuchen Sie es erneut.',\n    locationUnavailable: 'Standortinformationen sind nicht verfügbar',\n    locationTimeout: 'Standortanfrage ist abgelaufen',\n    geolocationNotSupported: 'Geolokalisierung wird von diesem Browser nicht unterstützt',\n    geocodingNotImplemented: 'Standortsuche nicht verfügbar. Bitte verwenden Sie GPS oder geben Sie Koordinaten manuell ein.',\n    tryManualEntry: 'Versuchen Sie, Ihren Standort manuell einzugeben oder GPS zu verwenden.',\n    distanceNote: 'Entfernungen werden als Luftlinie berechnet. Tatsächliche Fahrzeiten können variieren.',\n    travelTimeNote: 'Fahrzeiten berechnet für Rettungsfahrzeuge mit Sondersignalen und Vorfahrtsberechtigung.',\n    calculatingTravelTimes: 'Fahrzeiten werden berechnet',\n    minutes: 'Min',\n    poweredByOrs: 'Fahrzeiten bereitgestellt von OpenRoute Service',\n\n    // Center Types and Services\n    comprehensiveCenter: 'Überregionales Schlaganfall-Zentrum',\n    primaryCenter: 'Regionales Schlaganfall-Zentrum',\n    telemetryCenter: 'Telemedizin-Zentrum',\n    thrombectomy: 'Thrombektomie',\n    neurosurgery: 'Neurochirurgie',\n    icu: 'Intensivstation',\n    telemedicine: 'Telemedizin',\n    stroke_unit: 'Stroke Unit',\n\n    // Actions\n    call: 'Anrufen',\n    directions: 'Wegbeschreibung',\n    emergency: 'Notfall',\n    certified: 'Zertifiziert',\n\n    // Prerequisites Modal\n    prerequisitesTitle: 'Voraussetzungen für Schlaganfall-Triage',\n    prerequisitesIntro: 'Bitte bestätigen Sie, dass alle folgenden Voraussetzungen erfüllt sind:',\n    prerequisitesWarning: 'Alle Voraussetzungen müssen erfüllt sein, um fortzufahren',\n    continue: 'Weiter',\n    acute_deficit: 'Akutes (schweres) neurologisches Defizit vorhanden',\n    symptom_onset: 'Symptombeginn innerhalb 6h',\n    no_preexisting: 'Keine vorbestehende schwere neurologische Defizite',\n    no_trauma: 'Kein Schädelhirntrauma vorhanden',\n\n    // Differential Diagnoses for Stroke Modules\n    differentialDiagnoses: 'Differentialdiagnosen',\n    reconfirmTimeWindow: 'Bitte Zeitfenster rekonfirmieren!',\n    unclearTimeWindow: 'Bei unklarem/erweitertem Zeitfenster ist auch ein beginnend demarkierter Hirninfarkt möglich',\n    rareDiagnoses: 'Seltene Diagnosen wie ein Glioblastom sind auch möglich',\n\n    // Login Screen\n    researchAccessRequired: 'Forschungszugang erforderlich',\n    researchPreviewDescription: 'Dies ist eine Forschungsvorschau des iGFAP Schlaganfall-Triage-Assistenten zur klinischen Validierung.',\n    importantNotice: 'Wichtiger Hinweis',\n    researchUseOnly: 'Nur für Forschungszwecke',\n    researchUseOnlyDesc: 'Nicht für klinische Entscheidungen',\n    noPatientDataStorage: 'Keine Patientendatenspeicherung',\n    noPatientDataStorageDesc: 'Alle Daten werden lokal verarbeitet',\n    clinicalAdvisory: 'Klinische Beratung',\n    clinicalAdvisoryDesc: 'Unter Aufsicht von Prof. Christian Förch & Dr. Lovepreet Kalra',\n    contact: 'Kontakt',\n    researchAccessCode: 'Forschungszugangscode',\n    enterResearchAccessCode: 'Forschungszugangscode eingeben',\n    accessResearchSystem: 'Zugang zum Forschungssystem',\n    regulatoryStatus: 'Regulatorischer Status',\n    regulatoryStatusDesc: 'Forschungsprototyp - CE-Zertifizierung ausstehend',\n    dataProtection: 'Datenschutz',\n    dataProtectionDesc: 'DSGVO-konform - nur lokale Verarbeitung',\n    clinicalOversight: 'Klinische Aufsicht',\n    clinicalOversightDesc: 'RKH Klinikum Ludwigsburg, Neurologie',\n    accessDenied: 'Zugriff verweigert',\n    invalidResearchCode: 'Ungültiger Forschungszugangscode. Bitte versuchen Sie es erneut.',\n\n  },\n};\n","// Internationalization utilities for the Stroke Triage Assistant\n\nimport { messages } from './messages.js';\n\nclass I18n {\n  constructor() {\n    this.supportedLanguages = ['en', 'de'];\n    this.currentLanguage = this.detectLanguage();\n  }\n\n  // Detect browser language and default to appropriate language\n  detectLanguage() {\n    // Check if language is already set in localStorage\n    const savedLanguage = localStorage.getItem('language');\n    if (savedLanguage && this.supportedLanguages.includes(savedLanguage)) {\n      return savedLanguage;\n    }\n\n    // Detect browser language\n    const browserLang = navigator.language || navigator.userLanguage;\n    const langCode = browserLang.substring(0, 2).toLowerCase();\n\n    // Default to German if browser language is German, otherwise English\n    return langCode === 'de' ? 'de' : 'en';\n  }\n\n  // Get current language\n  getCurrentLanguage() {\n    return this.currentLanguage;\n  }\n\n  // Set language and save to localStorage\n  setLanguage(language) {\n    if (this.supportedLanguages.includes(language)) {\n      this.currentLanguage = language;\n      localStorage.setItem('language', language);\n\n      // Dispatch custom event for language change\n      window.dispatchEvent(new CustomEvent('languageChanged', {\n        detail: { language },\n      }));\n\n      return true;\n    }\n    return false;\n  }\n\n  // Get supported languages\n  getSupportedLanguages() {\n    return [...this.supportedLanguages];\n  }\n\n  // Translate a message key\n  t(key) {\n    const currentMessages = messages[this.currentLanguage] || messages.en;\n    return currentMessages[key] || key;\n  }\n\n  // Toggle between English and German\n  toggleLanguage() {\n    const newLanguage = this.currentLanguage === 'en' ? 'de' : 'en';\n    return this.setLanguage(newLanguage);\n  }\n\n  // Get language display name\n  getLanguageDisplayName(lang = null) {\n    const language = lang || this.currentLanguage;\n    const displayNames = {\n      en: 'English',\n      de: 'Deutsch',\n    };\n    return displayNames[language] || language;\n  }\n\n  // Format date/time according to current locale\n  formatDateTime(date) {\n    const locale = this.currentLanguage === 'de' ? 'de-DE' : 'en-US';\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }).format(date);\n  }\n\n  // Format time only according to current locale\n  formatTime(date) {\n    const locale = this.currentLanguage === 'de' ? 'de-DE' : 'en-US';\n    return new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }).format(date);\n  }\n}\n\n// Create singleton instance\nconst i18n = new I18n();\n\n// Export both the instance and the class\nexport { i18n, I18n };\n\n// Export convenience function for translation\nexport const t = (key) => i18n.t(key);\n","/**\n * Legacy ICH Model - Simple Logistic Regression (Age + GFAP Only)\n *\n * This is a baseline model for research comparison purposes.\n * Uses only age and GFAP values with logistic regression.\n *\n * Performance Metrics:\n * - ROC-AUC: 0.789\n * - Recall: 40%\n * - Precision: 86%\n * - F1-Score: 55%\n *\n * FOR RESEARCH COMPARISON ONLY - NOT FOR CLINICAL USE\n */\n\nexport class LegacyICHModel {\n  // Training data parameters from original study\n  static PARAMS = {\n    age: {\n      mean: 74.59,\n      std: 12.75,\n    },\n    gfap: {\n      mean: 665.23,\n      std: 2203.77,\n    },\n    coefficients: {\n      intercept: 0.3248,\n      age: -0.2108, // Negative: older age slightly decreases odds in this simple model\n      gfap: 3.1631, // Positive: higher GFAP significantly increases odds\n    },\n  };\n\n  /**\n   * Calculate ICH probability using legacy logistic regression model\n   * @param {number} age - Patient age in years\n   * @param {number} gfapValue - GFAP value in pg/ml\n   * @returns {object} - Probability and diagnostic information\n   */\n  static calculateProbability(age, gfapValue) {\n    // Input validation\n    if (!age || !gfapValue || age <= 0 || gfapValue <= 0) {\n      return {\n        probability: 0,\n        confidence: 0,\n        isValid: false,\n        reason: 'Invalid inputs: age and GFAP required',\n      };\n    }\n\n    // Validate ranges\n    if (age < 18 || age > 120) {\n      return {\n        probability: 0,\n        confidence: 0,\n        isValid: false,\n        reason: `Age ${age} outside valid range (18-120 years)`,\n      };\n    }\n\n    if (gfapValue < 10 || gfapValue > 20000) {\n      // (`GFAP ${gfapValue} outside typical range (10-20000 pg/ml)`);\n    }\n\n    try {\n      // Step 1: Scale inputs using training data statistics\n      const scaledAge = (age - this.PARAMS.age.mean) / this.PARAMS.age.std;\n      const scaledGfap = (gfapValue - this.PARAMS.gfap.mean) / this.PARAMS.gfap.std;\n\n      // Step 2: Calculate log-odds (logit)\n      const logit = this.PARAMS.coefficients.intercept\n                    + (this.PARAMS.coefficients.age * scaledAge)\n                    + (this.PARAMS.coefficients.gfap * scaledGfap);\n\n      // Step 3: Convert to probability using sigmoid function\n      const rawProbability = 1 / (1 + Math.exp(-logit));\n      const probability = rawProbability * 100; // Convert to percentage\n\n      // Step 4: Calculate confidence based on distance from decision boundary\n      // Confidence is higher when probability is closer to 0% or 100%\n      const confidence = Math.abs(rawProbability - 0.5) * 2; // 0 to 1 scale\n\n      // Step 5: Determine risk category\n      const riskCategory = this.getRiskCategory(probability);\n\n      return {\n        probability: Math.round(probability * 10) / 10, // Round to 1 decimal\n        confidence: Math.round(confidence * 100) / 100, // Round to 2 decimals\n        logit: Math.round(logit * 1000) / 1000, // Round to 3 decimals\n        riskCategory,\n        scaledInputs: {\n          age: Math.round(scaledAge * 1000) / 1000,\n          gfap: Math.round(scaledGfap * 1000) / 1000,\n        },\n        rawInputs: { age, gfap: gfapValue },\n        isValid: true,\n        calculationMethod: 'logistic_regression_age_gfap',\n      };\n    } catch (error) {\n      // ('Legacy model calculation error:', error);\n      return {\n        probability: 0,\n        confidence: 0,\n        isValid: false,\n        reason: 'Calculation error',\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Get risk category and color based on probability\n   * @param {number} probability - Probability percentage (0-100)\n   * @returns {object} - Risk level information\n   */\n  static getRiskCategory(probability) {\n    if (probability < 10) {\n      return {\n        level: 'very_low',\n        color: '#10b981',\n        label: 'Very Low Risk',\n        description: 'Minimal ICH likelihood',\n      };\n    }\n    if (probability < 25) {\n      return {\n        level: 'low',\n        color: '#84cc16',\n        label: 'Low Risk',\n        description: 'Below typical threshold',\n      };\n    }\n    if (probability < 50) {\n      return {\n        level: 'moderate',\n        color: '#f59e0b',\n        label: 'Moderate Risk',\n        description: 'Elevated concern',\n      };\n    }\n    if (probability < 75) {\n      return {\n        level: 'high',\n        color: '#f97316',\n        label: 'High Risk',\n        description: 'Significant likelihood',\n      };\n    }\n    return {\n      level: 'very_high',\n      color: '#dc2626',\n      label: 'Very High Risk',\n      description: 'Critical ICH probability',\n    };\n  }\n\n  /**\n   * Compare legacy model with main model results\n   * @param {object} mainResults - Results from complex ML model\n   * @param {object} legacyResults - Results from legacy model\n   * @returns {object} - Comparison analysis\n   */\n  static compareModels(mainResults, legacyResults) {\n    if (!mainResults || !legacyResults || !legacyResults.isValid) {\n      return {\n        isValid: false,\n        reason: 'Invalid model results for comparison',\n      };\n    }\n\n    // Normalize probabilities to percentage scale (0-100)\n    let mainProb = mainResults.probability || 0;\n    if (mainProb <= 1) {\n      mainProb *= 100; // Convert 0.65 to 65%\n    }\n\n    const legacyProb = legacyResults.probability || 0; // Already in percentage\n\n    const absoluteDifference = mainProb - legacyProb;\n    const relativeDifference = legacyProb > 0 ? (absoluteDifference / legacyProb) * 100 : 0;\n\n    // Determine which model suggests higher risk\n    const higherRiskModel = mainProb > legacyProb ? 'main'\n      : legacyProb > mainProb ? 'legacy' : 'equal';\n\n    // Assess agreement level\n    let agreement;\n    const absDiff = Math.abs(absoluteDifference);\n    if (absDiff < 5) {\n      agreement = 'strong';\n    } else if (absDiff < 15) {\n      agreement = 'moderate';\n    } else if (absDiff < 30) {\n      agreement = 'weak';\n    } else {\n      agreement = 'poor';\n    }\n\n    return {\n      isValid: true,\n      probabilities: {\n        main: Math.round(mainProb * 10) / 10,\n        legacy: Math.round(legacyProb * 10) / 10,\n      },\n      differences: {\n        absolute: Math.round(absoluteDifference * 10) / 10,\n        relative: Math.round(relativeDifference * 10) / 10,\n      },\n      agreement: {\n        level: agreement,\n        higherRiskModel,\n      },\n      interpretation: this.getComparisonInterpretation(absoluteDifference, agreement),\n    };\n  }\n\n  /**\n   * Get interpretation of model comparison\n   * @param {number} difference - Absolute difference between models\n   * @param {string} agreement - Agreement level\n   * @returns {object} - Interpretation for researchers\n   */\n  static getComparisonInterpretation(difference, agreement) {\n    const absDiff = Math.abs(difference);\n\n    if (agreement === 'strong') {\n      return {\n        type: 'concordant',\n        message: 'Models show strong agreement',\n        implication: 'Age and GFAP are primary risk factors',\n      };\n    }\n\n    if (absDiff > 20) {\n      return {\n        type: 'divergent',\n        message: 'Significant model disagreement',\n        implication: 'Complex model captures additional risk factors not in age/GFAP',\n      };\n    }\n\n    return {\n      type: 'moderate_difference',\n      message: 'Models show moderate difference',\n      implication: 'Additional factors provide incremental predictive value',\n    };\n  }\n\n  /**\n   * Test the legacy model with known cases\n   * @returns {object} - Test results for validation\n   */\n  static runValidationTests() {\n    const testCases = [\n      {\n        age: 65, gfap: 100, expected: 'low', description: 'Younger patient, low GFAP',\n      },\n      {\n        age: 75, gfap: 500, expected: 'moderate', description: 'Average age, moderate GFAP',\n      },\n      {\n        age: 85, gfap: 1000, expected: 'high', description: 'Older patient, high GFAP',\n      },\n      {\n        age: 70, gfap: 2000, expected: 'very_high', description: 'High GFAP dominates',\n      },\n      {\n        age: 90, gfap: 50, expected: 'very_low', description: 'Low GFAP despite age',\n      },\n    ];\n\n    const results = testCases.map((testCase) => {\n      const result = this.calculateProbability(testCase.age, testCase.gfap);\n      return {\n        ...testCase,\n        result,\n        passed: result.isValid && result.riskCategory.level === testCase.expected,\n      };\n    });\n\n    const passedTests = results.filter((r) => r.passed).length;\n    const totalTests = results.length;\n\n    return {\n      summary: {\n        passed: passedTests,\n        total: totalTests,\n        passRate: Math.round((passedTests / totalTests) * 100),\n      },\n      details: results,\n    };\n  }\n\n  /**\n   * Get model metadata for research documentation\n   * @returns {object} - Model information\n   */\n  static getModelMetadata() {\n    return {\n      name: 'Legacy ICH Model',\n      type: 'Logistic Regression',\n      version: '1.0.0',\n      features: ['age', 'gfap'],\n      performance: {\n        rocAuc: 0.789,\n        recall: 0.40,\n        precision: 0.86,\n        f1Score: 0.55,\n        specificity: 0.94,\n      },\n      trainingData: {\n        samples: 'Historical cohort',\n        dateRange: 'Research study period',\n        validation: 'Cross-validation',\n      },\n      limitations: [\n        'Only uses age and GFAP - ignores clinical symptoms',\n        'Lower recall (40%) - misses some ICH cases',\n        'No time-to-onset consideration',\n        'No blood pressure or medication factors',\n        'Simplified feature set for baseline comparison',\n      ],\n      purpose: 'Research baseline for evaluating complex model improvements',\n    };\n  }\n}\n\n/**\n * Utility function to safely calculate legacy model in existing app flow\n * @param {object} patientData - Existing patient data structure\n * @returns {object|null} - Legacy model results or null if not applicable\n */\nexport function calculateLegacyICH(patientData) {\n  try {\n    // Extract age and GFAP from various possible data structures\n    const age = patientData?.age_years || patientData?.age || null;\n    const gfap = patientData?.gfap_value || patientData?.gfap || null;\n\n    if (!age || !gfap) {\n      return null; // Silently fail if required data not available\n    }\n\n    return LegacyICHModel.calculateProbability(age, gfap);\n  } catch (error) {\n    // ('Legacy ICH calculation failed (non-critical):', error);\n    return null;\n  }\n}\n\n/**\n * Export test function for validation\n */\nexport function testLegacyModel() {\n  // ('🧪 Legacy ICH Model Validation Tests');\n  const testResults = LegacyICHModel.runValidationTests();\n\n  // (`✅ Passed: ${testResults.summary.passed}/${testResults.summary.total} tests`);\n  // (`📊 Pass Rate: ${testResults.summary.passRate}%`);\n\n  testResults.details.forEach((test) => {\n    const icon = test.passed ? '✅' : '❌';\n    // (`${icon} ${test.description}: ${test.result.probability.toFixed(1)}% (${test.result.riskCategory.level})`);\n  });\n\n  return testResults;\n}\n","/**\n * Research Data Logger\n * Safely stores model comparison data for research analysis\n * All data stays local - no external transmission\n */\n\nimport { LegacyICHModel } from './legacy-ich-model.js';\n\nexport class ResearchDataLogger {\n  static STORAGE_KEY = 'igfap_research_data';\n\n  static MAX_ENTRIES = 1000; // Prevent unlimited storage growth\n\n  /**\n   * Log comparison between main and legacy models\n   * @param {object} comparisonData - Data from both models\n   */\n  static logComparison(comparisonData) {\n    try {\n      const entry = {\n        id: this.generateEntryId(),\n        timestamp: new Date().toISOString(),\n        sessionId: this.getSessionId(),\n        ...comparisonData,\n      };\n\n      const stored = this.getStoredData();\n      stored.entries.push(entry);\n\n      // Limit storage size\n      if (stored.entries.length > this.MAX_ENTRIES) {\n        stored.entries = stored.entries.slice(-this.MAX_ENTRIES);\n      }\n\n      stored.lastUpdated = new Date().toISOString();\n      stored.totalComparisons = stored.entries.length;\n\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(stored));\n\n      // (`📊 Research data logged (${stored.totalComparisons} comparisons)`);\n      return true;\n    } catch (error) {\n      // ('Research data logging failed (non-critical):', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all stored research data\n   * @returns {object} - Complete research dataset\n   */\n  static getStoredData() {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) {\n        return this.createEmptyDataset();\n      }\n\n      const data = JSON.parse(stored);\n\n      // Validate structure\n      if (!data.entries || !Array.isArray(data.entries)) {\n        // ('Invalid research data structure, resetting');\n        return this.createEmptyDataset();\n      }\n\n      return data;\n    } catch (error) {\n      // ('Failed to load research data, creating new:', error);\n      return this.createEmptyDataset();\n    }\n  }\n\n  /**\n   * Create empty dataset structure\n   * @returns {object} - Empty research dataset\n   */\n  static createEmptyDataset() {\n    return {\n      version: '1.0.0',\n      created: new Date().toISOString(),\n      lastUpdated: null,\n      totalComparisons: 0,\n      entries: [],\n      metadata: {\n        app: 'iGFAP Stroke Triage',\n        purpose: 'Model comparison research',\n        dataRetention: 'Local storage only',\n      },\n    };\n  }\n\n  /**\n   * Export research data as CSV for analysis\n   * @returns {string} - CSV formatted data\n   */\n  static exportAsCSV() {\n    const data = this.getStoredData();\n\n    if (!data.entries || data.entries.length === 0) {\n      return 'No research data available for export';\n    }\n\n    // CSV headers\n    const headers = [\n      'timestamp',\n      'session_id',\n      'age',\n      'gfap_value',\n      'main_model_probability',\n      'main_model_module',\n      'legacy_model_probability',\n      'legacy_model_confidence',\n      'absolute_difference',\n      'relative_difference',\n      'agreement_level',\n      'higher_risk_model',\n    ];\n\n    // Convert entries to CSV rows\n    const rows = data.entries.map((entry) => [\n      entry.timestamp,\n      entry.sessionId,\n      entry.inputs?.age || '',\n      entry.inputs?.gfap || '',\n      entry.main?.probability || '',\n      entry.main?.module || '',\n      entry.legacy?.probability || '',\n      entry.legacy?.confidence || '',\n      entry.comparison?.differences?.absolute || '',\n      entry.comparison?.differences?.relative || '',\n      entry.comparison?.agreement?.level || '',\n      entry.comparison?.agreement?.higherRiskModel || '',\n    ].join(','));\n\n    // Combine headers and rows\n    const csv = [headers.join(','), ...rows].join('\\n');\n    return csv;\n  }\n\n  /**\n   * Export research data as JSON for detailed analysis\n   * @returns {string} - JSON formatted data\n   */\n  static exportAsJSON() {\n    const data = this.getStoredData();\n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Download research data as file\n   * @param {string} format - 'csv' or 'json'\n   */\n  static downloadData(format = 'csv') {\n    try {\n      const data = format === 'csv' ? this.exportAsCSV() : this.exportAsJSON();\n      const filename = `igfap-research-${Date.now()}.${format}`;\n\n      const blob = new Blob([data], {\n        type: format === 'csv' ? 'text/csv' : 'application/json',\n      });\n\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      // (`📥 Downloaded research data: ${filename}`);\n      return true;\n    } catch (error) {\n      // ('Failed to download research data:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all stored research data\n   */\n  static clearData() {\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n      // ('🗑️ Research data cleared');\n      return true;\n    } catch (error) {\n      // ('Failed to clear research data:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get summary statistics of stored data\n   * @returns {object} - Summary statistics\n   */\n  static getDataSummary() {\n    const data = this.getStoredData();\n\n    if (!data.entries || data.entries.length === 0) {\n      return {\n        totalEntries: 0,\n        dateRange: null,\n        avgDifference: null,\n      };\n    }\n\n    const { entries } = data;\n    const differences = entries\n      .map((e) => e.comparison?.differences?.absolute)\n      .filter((d) => d !== undefined && d !== null);\n\n    const avgDifference = differences.length > 0\n      ? differences.reduce((sum, d) => sum + Math.abs(d), 0) / differences.length : 0;\n\n    return {\n      totalEntries: entries.length,\n      dateRange: {\n        first: entries[0]?.timestamp,\n        last: entries[entries.length - 1]?.timestamp,\n      },\n      avgAbsoluteDifference: Math.round(avgDifference * 10) / 10,\n      storageSize: JSON.stringify(data).length,\n    };\n  }\n\n  // Utility functions\n  static generateEntryId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  static getSessionId() {\n    let sessionId = sessionStorage.getItem('research_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now().toString(36)}`;\n      sessionStorage.setItem('research_session_id', sessionId);\n    }\n    return sessionId;\n  }\n}\n\n/**\n * Safe wrapper for logging research data in production\n * @param {object} mainResults - Main model results\n * @param {object} legacyResults - Legacy model results\n * @param {object} inputs - Patient input data\n */\nexport function safeLogResearchData(mainResults, legacyResults, inputs) {\n  try {\n    // Only log if research mode is enabled\n    if (!isResearchModeEnabled()) {\n      return;\n    }\n\n    const comparisonData = {\n      inputs: {\n        age: inputs.age_years || inputs.age,\n        gfap: inputs.gfap_value || inputs.gfap,\n        module: mainResults.module || 'unknown',\n      },\n      main: {\n        probability: mainResults.probability,\n        module: mainResults.module,\n        confidence: mainResults.confidence,\n      },\n      legacy: legacyResults,\n      comparison: legacyResults\n        ? LegacyICHModel.compareModels(mainResults, legacyResults) : null,\n    };\n\n    ResearchDataLogger.logComparison(comparisonData);\n  } catch (error) {\n    // Silently fail - never break main app functionality\n    // ('Research logging failed (non-critical):', error);\n  }\n}\n\n/**\n * Check if research mode is enabled for current module\n * @param {string} module - Current module (coma/limited/full)\n * @returns {boolean} - True if research features should be active\n */\nexport function isResearchModeEnabled(module = null) {\n  // Never enable research mode for coma module\n  if (module === 'coma') {\n    return false;\n  }\n\n  // Always enable for stroke modules (limited/full)\n  if (module === 'limited' || module === 'full') {\n    return true;\n  }\n\n  // Fallback: check if any stroke module data exists\n  if (typeof window !== 'undefined') {\n    try {\n      const store = window.store || require('../state/store.js')?.store;\n      if (store) {\n        const { formData } = store.getState();\n        const hasStrokeData = formData.limited || formData.full;\n        return hasStrokeData; // Enable if stroke module data exists\n      }\n    } catch (error) {\n      // Silently fail - research mode just won't work\n    }\n  }\n\n  return false;\n}\n\n/**\n * Enable/disable research mode\n * @param {boolean} enabled - Enable or disable research mode\n */\nexport function setResearchMode(enabled) {\n  try {\n    if (enabled) {\n      localStorage.setItem('research_mode', 'true');\n      // ('🔬 Research mode enabled');\n    } else {\n      localStorage.removeItem('research_mode');\n      // ('🔬 Research mode disabled');\n    }\n\n    // Trigger page refresh to apply changes\n    if (window.location.search.includes('research=')) {\n      // Remove research param from URL if disabling\n      if (!enabled) {\n        const url = new URL(window.location);\n        url.searchParams.delete('research');\n        window.history.replaceState({}, '', url);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    // ('Failed to toggle research mode:', error);\n    return false;\n  }\n}\n","/**\n * Research Comparison UI Components\n * Hidden by default, activated only for research purposes\n */\n\nimport { t } from '../localization/i18n.js';\n\nimport { LegacyICHModel } from './legacy-ich-model.js';\nimport { ResearchDataLogger, isResearchModeEnabled } from './data-logger.js';\n\n/**\n * Render research toggle button (no longer used - header button handles this)\n * @returns {string} - Empty string (header button replaces this)\n */\nexport function renderResearchToggle() {\n  return ''; // Header button now handles research panel toggling\n}\n\n/**\n * Render model comparison panel\n * @param {object} mainResults - Main model results\n * @param {object} legacyResults - Legacy model results\n * @param {object} inputs - Patient input data\n * @returns {string} - HTML for comparison panel\n */\nexport function renderModelComparison(mainResults, legacyResults, inputs) {\n  // Show debug info if legacy results are invalid\n  if (!legacyResults?.isValid) {\n    // ('🔬 Legacy model results invalid:', legacyResults);\n    return `\n      <div class=\"research-panel\" id=\"researchPanel\" style=\"display: none;\">\n        <div class=\"research-header\">\n          <h4>🔬 Model Comparison (Research)</h4>\n          <button class=\"close-research\" id=\"closeResearch\">×</button>\n        </div>\n        <div class=\"research-error\">\n          <p>⚠️ Legacy model calculation failed</p>\n          <small>Debug: ${legacyResults?.reason || 'Unknown error'}</small>\n        </div>\n      </div>\n    `;\n  }\n\n  const comparison = LegacyICHModel.compareModels(mainResults, legacyResults);\n\n  return `\n    <div class=\"research-panel\" id=\"researchPanel\" style=\"display: none;\">\n      <div class=\"research-header\">\n        <h4>🔬 Model Comparison (Research)</h4>\n        <button class=\"close-research\" id=\"closeResearch\">×</button>\n      </div>\n      \n      <div class=\"model-comparison\">\n        ${renderProbabilityBars(mainResults, legacyResults)}\n        ${renderDifferenceAnalysis(comparison)}\n        ${renderCalculationDetails(legacyResults, inputs)}\n        ${renderModelMetrics()}\n      </div>\n      \n      <div class=\"research-actions\">\n        <button id=\"exportResearchData\" class=\"research-btn\">📥 Export Data</button>\n        <button id=\"toggleCalculationDetails\" class=\"research-btn\">🧮 Details</button>\n        <button id=\"clearResearchData\" class=\"research-btn danger\">🗑️ Clear</button>\n      </div>\n      \n      <div class=\"research-disclaimer\">\n        <small>\n          ⚠️ <strong>Research Mode Active</strong><br>\n          Legacy model: Age + GFAP only (ROC-AUC: 0.789, Recall: 40%)<br>\n          For baseline comparison. Main model includes additional clinical factors.\n        </small>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render probability comparison bars\n * @param {object} mainResults - Main model results\n * @param {object} legacyResults - Legacy model results\n * @returns {string} - HTML for probability bars\n */\nfunction renderProbabilityBars(mainResults, legacyResults) {\n  // Convert main model probability to percentage if it's in decimal form (0-1)\n  let mainProb = mainResults.probability || 0;\n  if (mainProb <= 1) {\n    mainProb *= 100; // Convert 0.65 to 65%\n  }\n\n  // Legacy model already returns percentage (0-100)\n  const legacyProb = legacyResults.probability || 0;\n\n  return `\n    <div class=\"probability-comparison\">\n      <div class=\"bar-group\">\n        <label class=\"bar-label\">Main Model (Complex) - ${mainResults.module || 'Unknown'}</label>\n        <div class=\"probability-bar\">\n          <div class=\"bar-fill main-model\" style=\"width: ${Math.max(10, Math.min(mainProb, 100))}%\">\n            <span class=\"bar-value\">${mainProb.toFixed(1)}%</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bar-group\">\n        <label class=\"bar-label\">Legacy Model (Age + GFAP Only)</label>\n        <div class=\"probability-bar\">\n          <div class=\"bar-fill legacy-model\" style=\"width: ${Math.max(10, Math.min(legacyProb, 100))}%\">\n            <span class=\"bar-value\">${legacyProb.toFixed(1)}%</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render difference analysis\n * @param {object} comparison - Model comparison results\n * @returns {string} - HTML for difference analysis\n */\nfunction renderDifferenceAnalysis(comparison) {\n  if (!comparison.isValid) {\n    return '<div class=\"comparison-error\">Unable to compare models</div>';\n  }\n\n  const { differences, agreement } = comparison;\n  const isMainHigher = differences.absolute > 0;\n\n  return `\n    <div class=\"difference-analysis\">\n      <div class=\"difference-metric\">\n        <span class=\"metric-label\">Difference:</span>\n        <span class=\"metric-value ${isMainHigher ? 'higher' : 'lower'}\">\n          ${differences.absolute > 0 ? '+' : ''}${differences.absolute}%\n        </span>\n      </div>\n      \n      <div class=\"agreement-level\">\n        <span class=\"metric-label\">Agreement:</span>\n        <span class=\"agreement-badge ${agreement.level}\">\n          ${agreement.level.charAt(0).toUpperCase() + agreement.level.slice(1)}\n        </span>\n      </div>\n      \n      <div class=\"interpretation\">\n        <p class=\"interpretation-text\">${comparison.interpretation.message}</p>\n        <small class=\"interpretation-detail\">${comparison.interpretation.implication}</small>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render calculation details (expandable)\n * @param {object} legacyResults - Legacy model results\n * @param {object} inputs - Patient input data\n * @returns {string} - HTML for calculation details\n */\nfunction renderCalculationDetails(legacyResults, inputs) {\n  return `\n    <div class=\"calculation-details\" id=\"calculationDetails\" style=\"display: none;\">\n      <h5>Legacy Model Calculation</h5>\n      <div class=\"calculation-steps\">\n        <div class=\"step\">\n          <strong>Inputs:</strong> Age ${inputs.age}, GFAP ${inputs.gfap} pg/ml\n        </div>\n        <div class=\"step\">\n          <strong>Scaling:</strong> Age → ${legacyResults.scaledInputs.age}, GFAP → ${legacyResults.scaledInputs.gfap}\n        </div>\n        <div class=\"step\">\n          <strong>Logit:</strong> ${legacyResults.logit}\n        </div>\n        <div class=\"step\">\n          <strong>Probability:</strong> ${legacyResults.probability}% (Confidence: ${(legacyResults.confidence * 100).toFixed(0)}%)\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render model performance metrics\n * @returns {string} - HTML for model metrics\n */\nfunction renderModelMetrics() {\n  const metadata = LegacyICHModel.getModelMetadata();\n\n  return `\n    <div class=\"model-metrics\">\n      <h5>Performance Comparison</h5>\n      <div class=\"metrics-grid\">\n        <div class=\"metric-item\">\n          <span class=\"metric-name\">ROC-AUC</span>\n          <span class=\"metric-value\">Legacy: ${metadata.performance.rocAuc}</span>\n        </div>\n        <div class=\"metric-item\">\n          <span class=\"metric-name\">Recall</span>\n          <span class=\"metric-value\">Legacy: ${(metadata.performance.recall * 100).toFixed(0)}%</span>\n        </div>\n        <div class=\"metric-item\">\n          <span class=\"metric-name\">Precision</span>\n          <span class=\"metric-value\">Legacy: ${(metadata.performance.precision * 100).toFixed(0)}%</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Initialize research mode event handlers\n */\nexport function initializeResearchMode() {\n  // Always initialize if research panel exists\n  const researchPanel = document.getElementById('researchPanel');\n  if (!researchPanel) {\n    return;\n  }\n\n  // Close research panel\n  const closeResearch = document.getElementById('closeResearch');\n  if (closeResearch) {\n    closeResearch.addEventListener('click', () => {\n      const panel = document.getElementById('researchPanel');\n      if (panel) {\n        panel.style.display = 'none';\n      }\n    });\n  }\n\n  // Export data button\n  const exportButton = document.getElementById('exportResearchData');\n  if (exportButton) {\n    exportButton.addEventListener('click', () => {\n      ResearchDataLogger.downloadData('csv');\n    });\n  }\n\n  // Toggle calculation details\n  const detailsToggle = document.getElementById('toggleCalculationDetails');\n  if (detailsToggle) {\n    detailsToggle.addEventListener('click', () => {\n      const details = document.getElementById('calculationDetails');\n      if (details) {\n        details.style.display = details.style.display === 'none' ? 'block' : 'none';\n        detailsToggle.textContent = details.style.display === 'none' ? '🧮 Details' : '🧮 Hide';\n      }\n    });\n  }\n\n  // Clear data button\n  const clearButton = document.getElementById('clearResearchData');\n  if (clearButton) {\n    clearButton.addEventListener('click', () => {\n      if (confirm('Clear all research data? This cannot be undone.')) {\n        ResearchDataLogger.clearData();\n\n        // Update display\n        const summary = ResearchDataLogger.getDataSummary();\n        // (`Data cleared. Total entries: ${summary.totalEntries}`);\n      }\n    });\n  }\n\n  // ('🔬 Research mode initialized');\n}\n","/**\n * Automated Clinical Reporting System\n * iGFAP Stroke Triage Assistant - Phase 4 Medical Intelligence\n *\n * Generates comprehensive clinical reports with AI insights and analytics\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\nimport { medicalPerformanceMonitor, PerformanceMetricType } from '../performance/medical-performance-monitor.js';\n\n/**\n * Report types and templates\n */\nexport const ReportTypes = {\n  CLINICAL_SUMMARY: 'clinical_summary',\n  OUTCOME_PREDICTION: 'outcome_prediction',\n  RISK_ASSESSMENT: 'risk_assessment',\n  DECISION_SUPPORT: 'decision_support',\n  QUALITY_METRICS: 'quality_metrics',\n  RESEARCH_ANALYTICS: 'research_analytics',\n  COMPREHENSIVE: 'comprehensive',\n};\n\n/**\n * Report formats\n */\nexport const ReportFormats = {\n  PDF: 'pdf',\n  HTML: 'html',\n  JSON: 'json',\n  CSV: 'csv',\n  DICOM_SR: 'dicom_sr',\n};\n\n/**\n * Report delivery methods\n */\nexport const DeliveryMethods = {\n  DOWNLOAD: 'download',\n  EMAIL: 'email',\n  EHR_INTEGRATION: 'ehr_integration',\n  PACS: 'pacs',\n  API: 'api',\n};\n\n/**\n * Clinical Report Generator\n */\nclass ClinicalReportGenerator {\n  constructor() {\n    this.templates = new Map();\n    this.reportHistory = [];\n    this.scheduledReports = new Map();\n    this.isInitialized = false;\n\n    this.initializeTemplates();\n  }\n\n  /**\n   * Initialize report templates\n   */\n  initializeTemplates() {\n    // Clinical Summary Template\n    this.templates.set(ReportTypes.CLINICAL_SUMMARY, {\n      name: 'Clinical Summary Report',\n      sections: [\n        'patient_demographics',\n        'clinical_presentation',\n        'assessment_findings',\n        'risk_stratification',\n        'treatment_recommendations',\n        'disposition',\n      ],\n      requiredData: ['patientData', 'predictions'],\n      format: 'structured',\n    });\n\n    // Outcome Prediction Template\n    this.templates.set(ReportTypes.OUTCOME_PREDICTION, {\n      name: 'Outcome Prediction Report',\n      sections: [\n        'prediction_overview',\n        'mortality_risk',\n        'functional_outcome',\n        'complications_risk',\n        'model_performance',\n        'confidence_metrics',\n      ],\n      requiredData: ['predictions', 'mlResults'],\n      format: 'analytical',\n    });\n\n    // Risk Assessment Template\n    this.templates.set(ReportTypes.RISK_ASSESSMENT, {\n      name: 'Risk Assessment Report',\n      sections: [\n        'risk_profile',\n        'hemorrhagic_risk',\n        'procedural_risks',\n        'contraindications',\n        'monitoring_requirements',\n        'escalation_criteria',\n      ],\n      requiredData: ['patientData', 'predictions', 'alerts'],\n      format: 'clinical',\n    });\n\n    // Decision Support Template\n    this.templates.set(ReportTypes.DECISION_SUPPORT, {\n      name: 'Clinical Decision Support Report',\n      sections: [\n        'treatment_options',\n        'evidence_summary',\n        'guideline_recommendations',\n        'clinical_alerts',\n        'action_plan',\n        'follow_up',\n      ],\n      requiredData: ['patientData', 'predictions', 'recommendations'],\n      format: 'actionable',\n    });\n\n    // Quality Metrics Template\n    this.templates.set(ReportTypes.QUALITY_METRICS, {\n      name: 'Quality Metrics Report',\n      sections: [\n        'performance_indicators',\n        'process_metrics',\n        'outcome_measures',\n        'benchmarking',\n        'improvement_opportunities',\n        'action_items',\n      ],\n      requiredData: ['qualityMetrics', 'benchmarks'],\n      format: 'dashboard',\n    });\n\n    // Comprehensive Template\n    this.templates.set(ReportTypes.COMPREHENSIVE, {\n      name: 'Comprehensive Clinical Report',\n      sections: [\n        'executive_summary',\n        'clinical_summary',\n        'risk_assessment',\n        'outcome_predictions',\n        'decision_support',\n        'quality_metrics',\n        'research_insights',\n        'appendices',\n      ],\n      requiredData: ['all'],\n      format: 'comprehensive',\n    });\n  }\n\n  /**\n   * Generate clinical report\n   */\n  async generateReport(reportType, data, options = {}) {\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.REPORT_GENERATION,\n      `generate_${reportType}_report`,\n    );\n\n    try {\n      const template = this.templates.get(reportType);\n      if (!template) {\n        throw new Error(`Unknown report type: ${reportType}`);\n      }\n\n      // Validate required data\n      this.validateReportData(template, data);\n\n      // Generate report content\n      const reportContent = await this.buildReportContent(template, data, options);\n\n      // Apply formatting\n      const formattedReport = await this.formatReport(reportContent, options.format || ReportFormats.HTML);\n\n      // Create report metadata\n      const reportMetadata = {\n        id: `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        type: reportType,\n        format: options.format || ReportFormats.HTML,\n        generated: new Date().toISOString(),\n        generator: 'ClinicalReportGenerator',\n        version: '1.0',\n        patient: data.patientData?.id || 'unknown',\n        size: formattedReport.length,\n      };\n\n      // Add to history\n      this.reportHistory.push({\n        ...reportMetadata,\n        dataSnapshot: this.createDataSnapshot(data),\n      });\n\n      medicalPerformanceMonitor.endMeasurement(metricId, { success: true });\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'clinical_report_generated',\n        reportType,\n        reportId: reportMetadata.id,\n        patient: reportMetadata.patient,\n      });\n\n      return {\n        metadata: reportMetadata,\n        content: formattedReport,\n        sections: reportContent.sections,\n        dataQuality: reportContent.dataQuality,\n      };\n    } catch (error) {\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: false,\n        error: error.message,\n      });\n\n      // (`Report generation failed for ${reportType}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate report data\n   */\n  validateReportData(template, data) {\n    const missingData = [];\n\n    for (const requirement of template.requiredData) {\n      if (requirement === 'all') {\n        continue;\n      } // Special case for comprehensive reports\n\n      if (!data[requirement]) {\n        missingData.push(requirement);\n      }\n    }\n\n    if (missingData.length > 0) {\n      throw new Error(`Missing required data: ${missingData.join(', ')}`);\n    }\n  }\n\n  /**\n   * Build report content\n   */\n  async buildReportContent(template, data, options) {\n    const sections = {};\n    const dataQuality = { score: 100, issues: [] };\n\n    for (const sectionName of template.sections) {\n      try {\n        const section = await this.generateSection(sectionName, data, options);\n        sections[sectionName] = section;\n\n        // Update data quality based on section completeness\n        if (section.quality && section.quality.score < dataQuality.score) {\n          dataQuality.score = section.quality.score;\n          dataQuality.issues = dataQuality.issues.concat(section.quality.issues || []);\n        }\n      } catch (error) {\n        // (`Failed to generate section ${sectionName}:`, error);\n        sections[sectionName] = {\n          title: this.getSectionTitle(sectionName),\n          content: `Error generating section: ${error.message}`,\n          error: true,\n        };\n        dataQuality.issues.push(`Section ${sectionName} generation failed`);\n      }\n    }\n\n    return {\n      template: template.name,\n      sections,\n      dataQuality,\n      generated: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Generate individual report section\n   */\n  async generateSection(sectionName, data, options) {\n    switch (sectionName) {\n      case 'patient_demographics':\n        return this.generatePatientDemographics(data.patientData);\n\n      case 'clinical_presentation':\n        return this.generateClinicalPresentation(data.patientData);\n\n      case 'assessment_findings':\n        return this.generateAssessmentFindings(data.patientData, data.predictions);\n\n      case 'risk_stratification':\n        return this.generateRiskStratification(data.predictions);\n\n      case 'treatment_recommendations':\n        return this.generateTreatmentRecommendations(data.recommendations || data.predictions?.recommendations);\n\n      case 'disposition':\n        return this.generateDisposition(data.predictions);\n\n      case 'prediction_overview':\n        return this.generatePredictionOverview(data.predictions);\n\n      case 'mortality_risk':\n        return this.generateMortalityRisk(data.predictions?.mortality);\n\n      case 'functional_outcome':\n        return this.generateFunctionalOutcome(data.predictions?.functionalOutcome);\n\n      case 'complications_risk':\n        return this.generateComplicationsRisk(data.predictions?.complications);\n\n      case 'model_performance':\n        return this.generateModelPerformance(data.mlResults);\n\n      case 'confidence_metrics':\n        return this.generateConfidenceMetrics(data.predictions);\n\n      case 'risk_profile':\n        return this.generateRiskProfile(data.patientData, data.predictions);\n\n      case 'hemorrhagic_risk':\n        return this.generateHemorrhagicRisk(data.predictions?.hemorrhagicRisk);\n\n      case 'procedural_risks':\n        return this.generateProceduralRisks(data.patientData);\n\n      case 'contraindications':\n        return this.generateContraindications(data.patientData);\n\n      case 'monitoring_requirements':\n        return this.generateMonitoringRequirements(data.predictions);\n\n      case 'escalation_criteria':\n        return this.generateEscalationCriteria(data.predictions);\n\n      case 'treatment_options':\n        return this.generateTreatmentOptions(data.patientData, data.predictions);\n\n      case 'evidence_summary':\n        return this.generateEvidenceSummary(data.patientData);\n\n      case 'guideline_recommendations':\n        return this.generateGuidelineRecommendations(data.patientData);\n\n      case 'clinical_alerts':\n        return this.generateClinicalAlerts(data.alerts);\n\n      case 'action_plan':\n        return this.generateActionPlan(data.recommendations);\n\n      case 'follow_up':\n        return this.generateFollowUp(data.predictions);\n\n      case 'executive_summary':\n        return this.generateExecutiveSummary(data);\n\n      case 'research_insights':\n        return this.generateResearchInsights(data);\n\n      case 'appendices':\n        return this.generateAppendices(data);\n\n      default:\n        throw new Error(`Unknown section: ${sectionName}`);\n    }\n  }\n\n  /**\n   * Generate patient demographics section\n   */\n  generatePatientDemographics(patientData) {\n    const demographics = [];\n\n    if (patientData.age) {\n      demographics.push(`Age: ${patientData.age} years`);\n    }\n\n    if (patientData.gender) {\n      demographics.push(`Gender: ${patientData.gender}`);\n    }\n\n    if (patientData.weight) {\n      demographics.push(`Weight: ${patientData.weight} kg`);\n    }\n\n    if (patientData.medical_history) {\n      demographics.push(`Medical History: ${patientData.medical_history}`);\n    }\n\n    return {\n      title: 'Patient Demographics',\n      content: demographics.join('; '),\n      quality: this.assessDataQuality(['age', 'gender'], patientData),\n    };\n  }\n\n  /**\n   * Generate clinical presentation section\n   */\n  generateClinicalPresentation(patientData) {\n    const presentation = [];\n\n    if (patientData.symptom_onset) {\n      presentation.push(`Symptom onset: ${patientData.symptom_onset} hours ago`);\n    }\n\n    if (patientData.gcs_score) {\n      presentation.push(`Glasgow Coma Scale: ${patientData.gcs_score}/15`);\n    }\n\n    if (patientData.systolic_bp && patientData.diastolic_bp) {\n      presentation.push(`Blood Pressure: ${patientData.systolic_bp}/${patientData.diastolic_bp} mmHg`);\n    }\n\n    if (patientData.fast_ed_score) {\n      presentation.push(`FAST-ED Score: ${patientData.fast_ed_score}/10`);\n    }\n\n    return {\n      title: 'Clinical Presentation',\n      content: presentation.join('<br>'),\n      quality: this.assessDataQuality(['symptom_onset', 'gcs_score', 'systolic_bp'], patientData),\n    };\n  }\n\n  /**\n   * Generate assessment findings section\n   */\n  generateAssessmentFindings(patientData, predictions) {\n    const findings = [];\n\n    if (patientData.gfap_value) {\n      const gfap = parseFloat(patientData.gfap_value);\n      findings.push(`GFAP Biomarker: ${gfap.toLocaleString()} pg/mL${gfap > 5000 ? ' (Elevated)' : ''}`);\n    }\n\n    if (patientData.ich_volume) {\n      findings.push(`ICH Volume: ${patientData.ich_volume} mL`);\n    }\n\n    if (predictions?.lvoDetection) {\n      findings.push(`LVO Detection: ${predictions.lvoDetection.probability}% probability`);\n    }\n\n    return {\n      title: 'Assessment Findings',\n      content: findings.join('<br>'),\n      quality: this.assessDataQuality(['gfap_value'], patientData),\n    };\n  }\n\n  /**\n   * Generate risk stratification section\n   */\n  generateRiskStratification(predictions) {\n    const risks = [];\n\n    if (predictions?.mortality) {\n      const { risk } = predictions.mortality;\n      const level = predictions.mortality.riskLevel?.level || 'unknown';\n      risks.push(`<strong>Mortality Risk:</strong> ${risk}% (${level})`);\n    }\n\n    if (predictions?.hemorrhagicRisk) {\n      const { risk } = predictions.hemorrhagicRisk;\n      const level = predictions.hemorrhagicRisk.riskLevel?.level || 'unknown';\n      risks.push(`<strong>Hemorrhagic Risk:</strong> ${risk}% (${level})`);\n    }\n\n    if (predictions?.compositeRisk) {\n      const { score } = predictions.compositeRisk;\n      const level = predictions.compositeRisk.riskLevel?.level || 'unknown';\n      risks.push(`<strong>Composite Risk:</strong> ${score}% (${level})`);\n    }\n\n    return {\n      title: 'Risk Stratification',\n      content: risks.join('<br>'),\n      quality: { score: predictions ? 95 : 0, issues: predictions ? [] : ['No predictions available'] },\n    };\n  }\n\n  /**\n   * Generate treatment recommendations section\n   */\n  generateTreatmentRecommendations(recommendations) {\n    if (!recommendations) {\n      return {\n        title: 'Treatment Recommendations',\n        content: 'No recommendations available',\n        quality: { score: 0, issues: ['No recommendations data'] },\n      };\n    }\n\n    const recs = [];\n\n    if (recommendations.priority && recommendations.priority.length > 0) {\n      recs.push('<strong>Priority Actions:</strong>');\n      recommendations.priority.forEach((rec) => {\n        recs.push(`• ${rec.action} (${rec.rationale})`);\n      });\n    }\n\n    if (recommendations.standard && recommendations.standard.length > 0) {\n      recs.push('<br><strong>Standard Care:</strong>');\n      recommendations.standard.forEach((rec) => {\n        recs.push(`• ${rec.action} (${rec.rationale})`);\n      });\n    }\n\n    return {\n      title: 'Treatment Recommendations',\n      content: recs.join('<br>'),\n      quality: { score: 90, issues: [] },\n    };\n  }\n\n  /**\n   * Generate disposition section\n   */\n  generateDisposition(predictions) {\n    let disposition = 'Standard stroke unit care';\n\n    if (predictions?.mortality?.risk > 50) {\n      disposition = 'ICU admission recommended due to high mortality risk';\n    } else if (predictions?.hemorrhagicRisk?.risk > 40) {\n      disposition = 'Enhanced monitoring unit due to hemorrhagic transformation risk';\n    } else if (predictions?.compositeRisk?.score > 60) {\n      disposition = 'Stroke unit with close monitoring';\n    }\n\n    return {\n      title: 'Disposition',\n      content: disposition,\n      quality: { score: predictions ? 85 : 0, issues: predictions ? [] : ['No predictions for disposition'] },\n    };\n  }\n\n  /**\n   * Generate prediction overview section\n   */\n  generatePredictionOverview(predictions) {\n    if (!predictions) {\n      return {\n        title: 'Prediction Overview',\n        content: 'No predictions available',\n        quality: { score: 0, issues: ['No predictions data'] },\n      };\n    }\n\n    const overview = [\n      '<table class=\"prediction-table\">',\n      '<tr><th>Outcome</th><th>Prediction</th><th>Confidence</th></tr>',\n    ];\n\n    if (predictions.mortality) {\n      overview.push(`<tr><td>30-Day Mortality</td><td>${predictions.mortality.risk}%</td><td>${predictions.mortality.confidence?.level || 'N/A'}</td></tr>`);\n    }\n\n    if (predictions.functionalOutcome) {\n      overview.push(`<tr><td>Good Functional Outcome</td><td>${predictions.functionalOutcome.probability}%</td><td>${predictions.functionalOutcome.confidence?.level || 'N/A'}</td></tr>`);\n    }\n\n    if (predictions.hemorrhagicRisk) {\n      overview.push(`<tr><td>Hemorrhagic Transformation</td><td>${predictions.hemorrhagicRisk.risk}%</td><td>High</td></tr>`);\n    }\n\n    overview.push('</table>');\n\n    return {\n      title: 'Prediction Overview',\n      content: overview.join(''),\n      quality: { score: 95, issues: [] },\n    };\n  }\n\n  /**\n   * Generate mortality risk section\n   */\n  generateMortalityRisk(mortalityData) {\n    if (!mortalityData) {\n      return {\n        title: 'Mortality Risk',\n        content: 'Mortality risk assessment not available',\n        quality: { score: 0, issues: ['No mortality data'] },\n      };\n    }\n\n    const content = [\n      `<p><strong>30-Day Mortality Risk:</strong> ${mortalityData.risk}%</p>`,\n      `<p><strong>Risk Level:</strong> ${mortalityData.riskLevel?.label || 'Unknown'}</p>`,\n      `<p><strong>Confidence:</strong> ${mortalityData.confidence?.level || 'Unknown'} (${mortalityData.confidence?.percent || 0}%)</p>`,\n    ];\n\n    if (mortalityData.explanation) {\n      content.push(`<p><strong>Explanation:</strong> ${mortalityData.explanation}</p>`);\n    }\n\n    if (mortalityData.factors && mortalityData.factors.length > 0) {\n      content.push('<p><strong>Contributing Factors:</strong></p>');\n      content.push('<ul>');\n      mortalityData.factors.forEach((factor) => {\n        content.push(`<li>${factor.name}: ${factor.impact} impact (weight: ${Math.round((factor.weight || 0) * 100)}%)</li>`);\n      });\n      content.push('</ul>');\n    }\n\n    return {\n      title: 'Mortality Risk Analysis',\n      content: content.join(''),\n      quality: { score: 95, issues: [] },\n    };\n  }\n\n  /**\n   * Generate functional outcome section\n   */\n  generateFunctionalOutcome(functionalData) {\n    if (!functionalData) {\n      return {\n        title: 'Functional Outcome',\n        content: 'Functional outcome prediction not available',\n        quality: { score: 0, issues: ['No functional outcome data'] },\n      };\n    }\n\n    const content = [\n      `<p><strong>Probability of Good Outcome (mRS 0-2):</strong> ${functionalData.probability}%</p>`,\n      `<p><strong>Predicted Outcome:</strong> ${functionalData.outcome}</p>`,\n      `<p><strong>Confidence:</strong> ${functionalData.confidence?.level || 'Unknown'}</p>`,\n    ];\n\n    if (functionalData.factors && functionalData.factors.length > 0) {\n      content.push('<p><strong>Influencing Factors:</strong></p>');\n      content.push('<ul>');\n      functionalData.factors.forEach((factor) => {\n        content.push(`<li>${factor.name}: ${factor.impact} impact - ${factor.description}</li>`);\n      });\n      content.push('</ul>');\n    }\n\n    return {\n      title: 'Functional Outcome Prediction',\n      content: content.join(''),\n      quality: { score: 90, issues: [] },\n    };\n  }\n\n  /**\n   * Generate executive summary\n   */\n  generateExecutiveSummary(data) {\n    const summary = [];\n\n    // Patient overview\n    if (data.patientData?.age) {\n      summary.push(`${data.patientData.age}-year-old patient presenting with stroke symptoms.`);\n    }\n\n    // Key findings\n    if (data.patientData?.gfap_value) {\n      const gfap = parseFloat(data.patientData.gfap_value);\n      summary.push(`GFAP level: ${gfap.toLocaleString()} pg/mL${gfap > 5000 ? ' (significantly elevated)' : ''}.`);\n    }\n\n    // Risk assessment\n    if (data.predictions?.compositeRisk) {\n      const risk = data.predictions.compositeRisk.score;\n      const level = data.predictions.compositeRisk.riskLevel?.level || 'unknown';\n      summary.push(`Overall risk assessment: ${risk}% (${level} risk).`);\n    }\n\n    // Recommendations\n    if (data.predictions?.recommendations?.summary) {\n      summary.push(data.predictions.recommendations.summary);\n    }\n\n    return {\n      title: 'Executive Summary',\n      content: summary.join(' '),\n      quality: { score: 85, issues: [] },\n    };\n  }\n\n  /**\n   * Assess data quality for a section\n   */\n  assessDataQuality(requiredFields, data) {\n    const availableFields = requiredFields.filter((field) => data[field] !== undefined && data[field] !== null && data[field] !== '');\n\n    const score = (availableFields.length / requiredFields.length) * 100;\n    const missingFields = requiredFields.filter((field) => !availableFields.includes(field));\n\n    return {\n      score: Math.round(score),\n      issues: missingFields.length > 0 ? [`Missing data: ${missingFields.join(', ')}`] : [],\n    };\n  }\n\n  /**\n   * Get section title\n   */\n  getSectionTitle(sectionName) {\n    const titles = {\n      patient_demographics: 'Patient Demographics',\n      clinical_presentation: 'Clinical Presentation',\n      assessment_findings: 'Assessment Findings',\n      risk_stratification: 'Risk Stratification',\n      treatment_recommendations: 'Treatment Recommendations',\n      disposition: 'Disposition',\n      prediction_overview: 'Prediction Overview',\n      mortality_risk: 'Mortality Risk',\n      functional_outcome: 'Functional Outcome',\n      complications_risk: 'Complications Risk',\n      model_performance: 'Model Performance',\n      confidence_metrics: 'Confidence Metrics',\n      executive_summary: 'Executive Summary',\n    };\n\n    return titles[sectionName] || sectionName.replace(/_/g, ' ').replace(/\\b\\w/g, (l) => l.toUpperCase());\n  }\n\n  /**\n   * Format report content\n   */\n  async formatReport(reportContent, format) {\n    switch (format) {\n      case ReportFormats.HTML:\n        return this.formatAsHTML(reportContent);\n\n      case ReportFormats.PDF:\n        return this.formatAsPDF(reportContent);\n\n      case ReportFormats.JSON:\n        return JSON.stringify(reportContent, null, 2);\n\n      case ReportFormats.CSV:\n        return this.formatAsCSV(reportContent);\n\n      default:\n        return this.formatAsHTML(reportContent);\n    }\n  }\n\n  /**\n   * Format report as HTML\n   */\n  formatAsHTML(reportContent) {\n    const html = [\n      '<!DOCTYPE html>',\n      '<html lang=\"en\">',\n      '<head>',\n      '<meta charset=\"UTF-8\">',\n      '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">',\n      `<title>${reportContent.template}</title>`,\n      '<style>',\n      this.getReportCSS(),\n      '</style>',\n      '</head>',\n      '<body>',\n      '<div class=\"report-container\">',\n      '<header class=\"report-header\">',\n      `<h1>${reportContent.template}</h1>`,\n      `<div class=\"report-meta\">Generated: ${reportContent.generated}</div>`,\n      `<div class=\"data-quality\">Data Quality: ${reportContent.dataQuality.score}%</div>`,\n      '</header>',\n      '<main class=\"report-content\">',\n    ];\n\n    // Add sections\n    Object.entries(reportContent.sections).forEach(([sectionName, section]) => {\n      html.push(`<section class=\"report-section\" id=\"${sectionName}\">`);\n      html.push(`<h2>${section.title}</h2>`);\n      html.push(`<div class=\"section-content\">${section.content}</div>`);\n      if (section.quality && section.quality.score < 100) {\n        html.push(`<div class=\"quality-indicator\">Quality: ${section.quality.score}%</div>`);\n      }\n      html.push('</section>');\n    });\n\n    html.push('</main>');\n    html.push('</div>');\n    html.push('</body>');\n    html.push('</html>');\n\n    return html.join('\\n');\n  }\n\n  /**\n   * Get report CSS styles\n   */\n  getReportCSS() {\n    return `\n      body {\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        line-height: 1.6;\n        margin: 0;\n        padding: 20px;\n        background: #f5f5f5;\n      }\n\n      .report-container {\n        max-width: 1200px;\n        margin: 0 auto;\n        background: white;\n        box-shadow: 0 0 10px rgba(0,0,0,0.1);\n        border-radius: 8px;\n        overflow: hidden;\n      }\n\n      .report-header {\n        background: #2196F3;\n        color: white;\n        padding: 30px;\n        text-align: center;\n      }\n\n      .report-header h1 {\n        margin: 0 0 10px 0;\n        font-size: 2.5em;\n      }\n\n      .report-meta {\n        font-size: 0.9em;\n        opacity: 0.9;\n      }\n\n      .data-quality {\n        margin-top: 10px;\n        padding: 5px 15px;\n        background: rgba(255,255,255,0.2);\n        border-radius: 20px;\n        display: inline-block;\n      }\n\n      .report-content {\n        padding: 40px;\n      }\n\n      .report-section {\n        margin-bottom: 40px;\n        border-bottom: 1px solid #e0e0e0;\n        padding-bottom: 30px;\n      }\n\n      .report-section:last-child {\n        border-bottom: none;\n      }\n\n      .report-section h2 {\n        color: #2196F3;\n        margin: 0 0 20px 0;\n        font-size: 1.8em;\n        border-left: 4px solid #2196F3;\n        padding-left: 15px;\n      }\n\n      .section-content {\n        font-size: 1.1em;\n        line-height: 1.8;\n      }\n\n      .quality-indicator {\n        margin-top: 10px;\n        font-size: 0.8em;\n        color: #666;\n        text-align: right;\n      }\n\n      .prediction-table {\n        width: 100%;\n        border-collapse: collapse;\n        margin: 20px 0;\n      }\n\n      .prediction-table th,\n      .prediction-table td {\n        border: 1px solid #ddd;\n        padding: 12px;\n        text-align: left;\n      }\n\n      .prediction-table th {\n        background: #f5f5f5;\n        font-weight: bold;\n      }\n\n      .prediction-table tr:nth-child(even) {\n        background: #f9f9f9;\n      }\n\n      ul {\n        margin: 15px 0;\n      }\n\n      li {\n        margin: 5px 0;\n      }\n\n      p {\n        margin: 15px 0;\n      }\n\n      strong {\n        color: #333;\n      }\n\n      @media print {\n        body {\n          background: white;\n          padding: 0;\n        }\n\n        .report-container {\n          box-shadow: none;\n          border-radius: 0;\n        }\n\n        .report-section {\n          page-break-inside: avoid;\n        }\n      }\n    `;\n  }\n\n  /**\n   * Create data snapshot for history\n   */\n  createDataSnapshot(data) {\n    return {\n      hasPatientData: !!data.patientData,\n      hasPredictions: !!data.predictions,\n      hasMLResults: !!data.mlResults,\n      hasRecommendations: !!data.recommendations,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Generate additional sections (simplified implementations)\n   */\n  generateClinicalAlerts(alerts) {\n    if (!alerts || alerts.length === 0) {\n      return {\n        title: 'Clinical Alerts',\n        content: 'No active alerts',\n        quality: { score: 100, issues: [] },\n      };\n    }\n\n    const alertsHtml = alerts.map((alert) => `<div class=\"alert ${alert.severity?.level}\">\n        <strong>${alert.title}</strong><br>\n        ${alert.message}<br>\n        <em>Recommendation: ${alert.recommendation}</em>\n      </div>`).join('');\n\n    return {\n      title: 'Clinical Alerts',\n      content: alertsHtml,\n      quality: { score: 95, issues: [] },\n    };\n  }\n\n  generateHemorrhagicRisk(hemorrhagicData) {\n    if (!hemorrhagicData) {\n      return {\n        title: 'Hemorrhagic Risk',\n        content: 'Hemorrhagic risk assessment not available',\n        quality: { score: 0, issues: ['No hemorrhagic risk data'] },\n      };\n    }\n\n    const content = [\n      `<p><strong>Hemorrhagic Transformation Risk:</strong> ${hemorrhagicData.risk}%</p>`,\n      `<p><strong>Risk Level:</strong> ${hemorrhagicData.riskLevel?.label || 'Unknown'}</p>`,\n      `<p><strong>Recommendation:</strong> ${hemorrhagicData.recommendation}</p>`,\n    ];\n\n    if (hemorrhagicData.activeFactors && hemorrhagicData.activeFactors.length > 0) {\n      content.push('<p><strong>Active Risk Factors:</strong></p>');\n      content.push('<ul>');\n      hemorrhagicData.activeFactors.forEach((factor) => {\n        content.push(`<li>${factor.factor}: ${factor.contribution}% contribution</li>`);\n      });\n      content.push('</ul>');\n    }\n\n    return {\n      title: 'Hemorrhagic Transformation Risk',\n      content: content.join(''),\n      quality: { score: 90, issues: [] },\n    };\n  }\n\n  generateResearchInsights(data) {\n    return {\n      title: 'Research Insights',\n      content: 'Research analytics and population-based insights would be generated here based on anonymized data comparisons.',\n      quality: { score: 70, issues: ['Research module not fully implemented'] },\n    };\n  }\n\n  generateAppendices(data) {\n    return {\n      title: 'Appendices',\n      content: 'Technical details, model specifications, and additional data would be included in appendices.',\n      quality: { score: 80, issues: [] },\n    };\n  }\n\n  // Additional simplified generators for remaining sections\n  generateModelPerformance(mlResults) {\n    return {\n      title: 'Model Performance',\n      content: mlResults ? 'Model performance metrics and validation results.' : 'No ML results available.',\n      quality: { score: mlResults ? 85 : 0, issues: mlResults ? [] : ['No ML results'] },\n    };\n  }\n\n  generateConfidenceMetrics(predictions) {\n    return {\n      title: 'Confidence Metrics',\n      content: predictions ? 'Prediction confidence analysis and reliability metrics.' : 'No predictions available.',\n      quality: { score: predictions ? 90 : 0, issues: predictions ? [] : ['No predictions'] },\n    };\n  }\n\n  generateRiskProfile(patientData, predictions) {\n    return {\n      title: 'Risk Profile',\n      content: 'Comprehensive risk profile based on clinical and predictive factors.',\n      quality: { score: 85, issues: [] },\n    };\n  }\n\n  generateProceduralRisks(patientData) {\n    return {\n      title: 'Procedural Risks',\n      content: 'Assessment of risks associated with potential interventions.',\n      quality: { score: 80, issues: [] },\n    };\n  }\n\n  generateContraindications(patientData) {\n    return {\n      title: 'Contraindications',\n      content: 'Analysis of contraindications for various treatment options.',\n      quality: { score: 85, issues: [] },\n    };\n  }\n\n  generateMonitoringRequirements(predictions) {\n    return {\n      title: 'Monitoring Requirements',\n      content: 'Recommended monitoring protocols based on risk assessment.',\n      quality: { score: 90, issues: [] },\n    };\n  }\n\n  generateEscalationCriteria(predictions) {\n    return {\n      title: 'Escalation Criteria',\n      content: 'Criteria for escalating care based on clinical deterioration.',\n      quality: { score: 85, issues: [] },\n    };\n  }\n\n  generateTreatmentOptions(patientData, predictions) {\n    return {\n      title: 'Treatment Options',\n      content: 'Available treatment options with risk-benefit analysis.',\n      quality: { score: 88, issues: [] },\n    };\n  }\n\n  generateEvidenceSummary(patientData) {\n    return {\n      title: 'Evidence Summary',\n      content: 'Summary of relevant clinical evidence and guidelines.',\n      quality: { score: 75, issues: [] },\n    };\n  }\n\n  generateGuidelineRecommendations(patientData) {\n    return {\n      title: 'Guideline Recommendations',\n      content: 'Relevant clinical guideline recommendations.',\n      quality: { score: 85, issues: [] },\n    };\n  }\n\n  generateActionPlan(recommendations) {\n    return {\n      title: 'Action Plan',\n      content: recommendations ? 'Structured action plan based on recommendations.' : 'No recommendations available.',\n      quality: { score: recommendations ? 90 : 0, issues: recommendations ? [] : ['No recommendations'] },\n    };\n  }\n\n  generateFollowUp(predictions) {\n    return {\n      title: 'Follow-up',\n      content: 'Recommended follow-up schedule and monitoring plan.',\n      quality: { score: 85, issues: [] },\n    };\n  }\n\n  generateComplicationsRisk(complicationsData) {\n    if (!complicationsData) {\n      return {\n        title: 'Complications Risk',\n        content: 'Complications risk assessment not available',\n        quality: { score: 0, issues: ['No complications data'] },\n      };\n    }\n\n    const content = [`<p><strong>Overall Complications Risk:</strong> ${complicationsData.totalRisk}%</p>`];\n\n    if (complicationsData.complications && complicationsData.complications.length > 0) {\n      content.push('<p><strong>Specific Complications:</strong></p>');\n      content.push('<ul>');\n      complicationsData.complications.forEach((comp) => {\n        content.push(`<li>${comp.type}: ${comp.risk}% risk</li>`);\n      });\n      content.push('</ul>');\n    }\n\n    return {\n      title: 'Complications Risk Assessment',\n      content: content.join(''),\n      quality: { score: 90, issues: [] },\n    };\n  }\n}\n\n/**\n * Automated Clinical Reporting System\n */\nexport class ClinicalReportingSystem {\n  constructor() {\n    this.reportGenerator = new ClinicalReportGenerator();\n    this.scheduledReports = new Map();\n    this.deliveryQueue = [];\n    this.isActive = false;\n  }\n\n  /**\n   * Start the reporting system\n   */\n  start() {\n    this.isActive = true;\n    this.processDeliveryQueue();\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'clinical_reporting_system_started',\n    });\n  }\n\n  /**\n   * Generate comprehensive report\n   */\n  async generateComprehensiveReport(data, options = {}) {\n    return await this.reportGenerator.generateReport(ReportTypes.COMPREHENSIVE, data, options);\n  }\n\n  /**\n   * Generate specific report type\n   */\n  async generateReport(reportType, data, options = {}) {\n    return await this.reportGenerator.generateReport(reportType, data, options);\n  }\n\n  /**\n   * Schedule automated report generation\n   */\n  scheduleReport(schedule) {\n    const scheduleId = `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    this.scheduledReports.set(scheduleId, {\n      ...schedule,\n      id: scheduleId,\n      created: new Date().toISOString(),\n      lastGenerated: null,\n      nextGeneration: this.calculateNextGeneration(schedule.frequency),\n    });\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'report_scheduled',\n      scheduleId,\n      reportType: schedule.reportType,\n    });\n\n    return scheduleId;\n  }\n\n  /**\n   * Queue report for delivery\n   */\n  queueReportForDelivery(report, deliveryMethod, deliveryOptions = {}) {\n    this.deliveryQueue.push({\n      report,\n      deliveryMethod,\n      deliveryOptions,\n      queued: new Date().toISOString(),\n      attempts: 0,\n      maxAttempts: 3,\n    });\n\n    if (this.isActive) {\n      this.processDeliveryQueue();\n    }\n  }\n\n  /**\n   * Process delivery queue\n   */\n  async processDeliveryQueue() {\n    while (this.deliveryQueue.length > 0 && this.isActive) {\n      const deliveryItem = this.deliveryQueue.shift();\n\n      try {\n        await this.deliverReport(deliveryItem);\n      } catch (error) {\n        deliveryItem.attempts++;\n        if (deliveryItem.attempts < deliveryItem.maxAttempts) {\n          // Retry later\n          setTimeout(() => {\n            this.deliveryQueue.push(deliveryItem);\n          }, 60000 * deliveryItem.attempts); // Exponential backoff\n        } else {\n          // ('Failed to deliver report after max attempts:', error);\n        }\n      }\n    }\n\n    // Process again in 30 seconds\n    if (this.isActive) {\n      setTimeout(() => this.processDeliveryQueue(), 30000);\n    }\n  }\n\n  /**\n   * Deliver report using specified method\n   */\n  async deliverReport(deliveryItem) {\n    const { report, deliveryMethod, deliveryOptions } = deliveryItem;\n\n    switch (deliveryMethod) {\n      case DeliveryMethods.DOWNLOAD:\n        this.triggerDownload(report);\n        break;\n\n      case DeliveryMethods.EMAIL:\n        await this.emailReport(report, deliveryOptions);\n        break;\n\n      case DeliveryMethods.EHR_INTEGRATION:\n        await this.integrateWithEHR(report, deliveryOptions);\n        break;\n\n      case DeliveryMethods.API:\n        await this.sendToAPI(report, deliveryOptions);\n        break;\n\n      default:\n        throw new Error(`Unknown delivery method: ${deliveryMethod}`);\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'report_delivered',\n      reportId: report.metadata.id,\n      deliveryMethod,\n    });\n  }\n\n  /**\n   * Trigger report download\n   */\n  triggerDownload(report) {\n    const blob = new Blob([report.content], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `clinical-report-${report.metadata.id}.html`;\n    link.click();\n\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Email report (simulated)\n   */\n  async emailReport(report, options) {\n    // In real implementation, this would integrate with email service\n    // (`Email report ${report.metadata.id} to ${options.recipient}`);\n  }\n\n  /**\n   * Integrate with EHR (simulated)\n   */\n  async integrateWithEHR(report, options) {\n    // In real implementation, this would integrate with EHR system\n    // (`Integrate report ${report.metadata.id} with EHR system`);\n  }\n\n  /**\n   * Send to API (simulated)\n   */\n  async sendToAPI(report, options) {\n    // In real implementation, this would send to external API\n    // (`Send report ${report.metadata.id} to API endpoint`);\n  }\n\n  /**\n   * Calculate next generation time\n   */\n  calculateNextGeneration(frequency) {\n    const now = new Date();\n    switch (frequency) {\n      case 'daily':\n        return new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString();\n      case 'weekly':\n        return new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString();\n      case 'monthly':\n        return new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString();\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Get report history\n   */\n  getReportHistory(filters = {}) {\n    return this.reportGenerator.reportHistory.filter((report) => {\n      if (filters.reportType && report.type !== filters.reportType) {\n        return false;\n      }\n      if (filters.startDate && new Date(report.generated) < new Date(filters.startDate)) {\n        return false;\n      }\n      if (filters.endDate && new Date(report.generated) > new Date(filters.endDate)) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Export reporting statistics\n   */\n  getReportingStatistics() {\n    const history = this.reportGenerator.reportHistory;\n\n    return {\n      totalReports: history.length,\n      reportsByType: this.groupBy(history, 'type'),\n      averageDataQuality: this.calculateAverageDataQuality(history),\n      reportingTrends: this.calculateReportingTrends(history),\n      scheduledReports: this.scheduledReports.size,\n      queuedDeliveries: this.deliveryQueue.length,\n    };\n  }\n\n  /**\n   * Helper methods\n   */\n  groupBy(array, key) {\n    return array.reduce((result, item) => {\n      const group = item[key] || 'unknown';\n      result[group] = (result[group] || 0) + 1;\n      return result;\n    }, {});\n  }\n\n  calculateAverageDataQuality(history) {\n    if (history.length === 0) {\n      return 0;\n    }\n\n    const totalQuality = history.reduce(\n      (sum, report) => sum + (report.dataSnapshot?.quality || 85), // Default quality\n      0,\n    );\n\n    return Math.round(totalQuality / history.length);\n  }\n\n  calculateReportingTrends(history) {\n    // Simplified trend calculation\n    const last30Days = history.filter((report) => new Date(report.generated) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));\n\n    return {\n      reportsLast30Days: last30Days.length,\n      averageReportsPerDay: Math.round(last30Days.length / 30 * 10) / 10,\n    };\n  }\n\n  /**\n   * Stop the reporting system\n   */\n  stop() {\n    this.isActive = false;\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'clinical_reporting_system_stopped',\n    });\n  }\n}\n\n// Export reporting system instance\nexport const clinicalReportingSystem = new ClinicalReportingSystem();\n","/**\n * Quality Metrics Tracking System\n * iGFAP Stroke Triage Assistant - Phase 4 Medical Intelligence\n *\n * Comprehensive quality metrics and performance tracking for clinical outcomes\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\nimport { medicalPerformanceMonitor, PerformanceMetricType } from '../performance/medical-performance-monitor.js';\nimport { predictionCache } from '../performance/medical-cache.js';\n\n/**\n * Quality metric categories\n */\nexport const QualityCategories = {\n  PROCESS: 'process',\n  OUTCOME: 'outcome',\n  STRUCTURE: 'structure',\n  SAFETY: 'safety',\n  EFFICIENCY: 'efficiency',\n  PATIENT_EXPERIENCE: 'patient_experience',\n};\n\n/**\n * Clinical quality indicators\n */\nexport const ClinicalIndicators = {\n  DOOR_TO_NEEDLE_TIME: 'door_to_needle_time',\n  DOOR_TO_IMAGING_TIME: 'door_to_imaging_time',\n  IMAGING_TO_DECISION_TIME: 'imaging_to_decision_time',\n  MORTALITY_RATE_30D: 'mortality_rate_30d',\n  FUNCTIONAL_INDEPENDENCE_90D: 'functional_independence_90d',\n  HEMORRHAGIC_TRANSFORMATION_RATE: 'hemorrhagic_transformation_rate',\n  THROMBOLYSIS_RATE: 'thrombolysis_rate',\n  MECHANICAL_THROMBECTOMY_RATE: 'mechanical_thrombectomy_rate',\n  PREDICTION_ACCURACY: 'prediction_accuracy',\n  MODEL_CALIBRATION: 'model_calibration',\n  ALERT_APPROPRIATENESS: 'alert_appropriateness',\n  GUIDELINE_ADHERENCE: 'guideline_adherence',\n};\n\n/**\n * Benchmarking standards\n */\nexport const QualityBenchmarks = {\n  [ClinicalIndicators.DOOR_TO_NEEDLE_TIME]: {\n    target: 60, // minutes\n    excellent: 45,\n    good: 60,\n    acceptable: 90,\n    unit: 'minutes',\n  },\n  [ClinicalIndicators.DOOR_TO_IMAGING_TIME]: {\n    target: 25, // minutes\n    excellent: 20,\n    good: 25,\n    acceptable: 45,\n    unit: 'minutes',\n  },\n  [ClinicalIndicators.MORTALITY_RATE_30D]: {\n    target: 15, // percentage\n    excellent: 10,\n    good: 15,\n    acceptable: 20,\n    unit: 'percentage',\n  },\n  [ClinicalIndicators.FUNCTIONAL_INDEPENDENCE_90D]: {\n    target: 50, // percentage\n    excellent: 60,\n    good: 50,\n    acceptable: 40,\n    unit: 'percentage',\n  },\n  [ClinicalIndicators.THROMBOLYSIS_RATE]: {\n    target: 15, // percentage of eligible patients\n    excellent: 20,\n    good: 15,\n    acceptable: 10,\n    unit: 'percentage',\n  },\n  [ClinicalIndicators.PREDICTION_ACCURACY]: {\n    target: 85, // percentage\n    excellent: 90,\n    good: 85,\n    acceptable: 80,\n    unit: 'percentage',\n  },\n};\n\n/**\n * Quality metric data structure\n */\nclass QualityMetric {\n  constructor(indicator, category, value, timestamp, metadata = {}) {\n    this.indicator = indicator;\n    this.category = category;\n    this.value = value;\n    this.timestamp = timestamp;\n    this.metadata = metadata;\n    this.benchmark = QualityBenchmarks[indicator];\n    this.performance = this.calculatePerformance();\n  }\n\n  /**\n   * Calculate performance against benchmark\n   */\n  calculatePerformance() {\n    if (!this.benchmark) {\n      return { level: 'unknown', score: null };\n    }\n\n    const { excellent, good, acceptable } = this.benchmark;\n\n    // For metrics where lower is better (e.g., time metrics)\n    const isLowerBetter = this.indicator.includes('time') || this.indicator.includes('mortality');\n\n    let level; let\n      score;\n\n    if (isLowerBetter) {\n      if (this.value <= excellent) {\n        level = 'excellent';\n        score = 100;\n      } else if (this.value <= good) {\n        level = 'good';\n        score = 85;\n      } else if (this.value <= acceptable) {\n        level = 'acceptable';\n        score = 70;\n      } else {\n        level = 'needs_improvement';\n        score = Math.max(0, 50 - ((this.value - acceptable) / acceptable) * 25);\n      }\n    } else {\n      // For metrics where higher is better (e.g., rates, accuracy)\n      if (this.value >= excellent) {\n        level = 'excellent';\n        score = 100;\n      } else if (this.value >= good) {\n        level = 'good';\n        score = 85;\n      } else if (this.value >= acceptable) {\n        level = 'acceptable';\n        score = 70;\n      } else {\n        level = 'needs_improvement';\n        score = Math.max(0, (this.value / acceptable) * 70);\n      }\n    }\n\n    return { level, score: Math.round(score) };\n  }\n\n  /**\n   * Get performance status\n   */\n  getStatus() {\n    return {\n      indicator: this.indicator,\n      value: this.value,\n      benchmark: this.benchmark,\n      performance: this.performance,\n      timestamp: this.timestamp,\n    };\n  }\n}\n\n/**\n * Quality metrics aggregator\n */\nclass QualityAggregator {\n  constructor() {\n    this.metrics = [];\n    this.aggregations = new Map();\n    this.trends = new Map();\n  }\n\n  /**\n   * Add metric to aggregation\n   */\n  addMetric(metric) {\n    this.metrics.push(metric);\n    this.updateAggregations(metric);\n    this.updateTrends(metric);\n  }\n\n  /**\n   * Update aggregations for metric\n   */\n  updateAggregations(metric) {\n    const key = metric.indicator;\n\n    if (!this.aggregations.has(key)) {\n      this.aggregations.set(key, {\n        count: 0,\n        sum: 0,\n        min: Infinity,\n        max: -Infinity,\n        values: [],\n      });\n    }\n\n    const agg = this.aggregations.get(key);\n    agg.count++;\n    agg.sum += metric.value;\n    agg.min = Math.min(agg.min, metric.value);\n    agg.max = Math.max(agg.max, metric.value);\n    agg.values.push({ value: metric.value, timestamp: metric.timestamp });\n\n    // Keep only last 100 values for performance\n    if (agg.values.length > 100) {\n      agg.values.shift();\n    }\n  }\n\n  /**\n   * Update trends for metric\n   */\n  updateTrends(metric) {\n    const key = metric.indicator;\n    const now = new Date();\n    const timeKey = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;\n\n    if (!this.trends.has(key)) {\n      this.trends.set(key, new Map());\n    }\n\n    const metricTrends = this.trends.get(key);\n\n    if (!metricTrends.has(timeKey)) {\n      metricTrends.set(timeKey, {\n        date: timeKey,\n        values: [],\n        average: 0,\n        count: 0,\n      });\n    }\n\n    const dayTrend = metricTrends.get(timeKey);\n    dayTrend.values.push(metric.value);\n    dayTrend.count++;\n    dayTrend.average = dayTrend.values.reduce((sum, val) => sum + val, 0) / dayTrend.count;\n  }\n\n  /**\n   * Get aggregated statistics\n   */\n  getAggregatedStats(indicator) {\n    const agg = this.aggregations.get(indicator);\n    if (!agg) {\n      return null;\n    }\n\n    return {\n      indicator,\n      count: agg.count,\n      average: agg.sum / agg.count,\n      min: agg.min,\n      max: agg.max,\n      median: this.calculateMedian(agg.values.map((v) => v.value)),\n      standardDeviation: this.calculateStandardDeviation(agg.values.map((v) => v.value)),\n    };\n  }\n\n  /**\n   * Get trend data\n   */\n  getTrendData(indicator, days = 30) {\n    const metricTrends = this.trends.get(indicator);\n    if (!metricTrends) {\n      return null;\n    }\n\n    const now = new Date();\n    const trends = [];\n\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      const timeKey = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n\n      if (metricTrends.has(timeKey)) {\n        trends.push(metricTrends.get(timeKey));\n      } else {\n        trends.push({\n          date: timeKey,\n          values: [],\n          average: null,\n          count: 0,\n        });\n      }\n    }\n\n    return trends;\n  }\n\n  /**\n   * Calculate median\n   */\n  calculateMedian(values) {\n    const sorted = [...values].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n\n    return sorted.length % 2 !== 0\n      ? sorted[mid]\n      : (sorted[mid - 1] + sorted[mid]) / 2;\n  }\n\n  /**\n   * Calculate standard deviation\n   */\n  calculateStandardDeviation(values) {\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const squaredDiffs = values.map((val) => (val - mean) ** 2);\n    const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n\n    return Math.sqrt(avgSquaredDiff);\n  }\n}\n\n/**\n * Quality dashboard generator\n */\nclass QualityDashboard {\n  constructor(aggregator) {\n    this.aggregator = aggregator;\n  }\n\n  /**\n   * Generate dashboard data\n   */\n  generateDashboard() {\n    const indicators = Object.values(ClinicalIndicators);\n    const dashboard = {\n      overview: this.generateOverview(),\n      indicators: [],\n      trends: [],\n      alerts: [],\n    };\n\n    // Generate indicator summaries\n    indicators.forEach((indicator) => {\n      const stats = this.aggregator.getAggregatedStats(indicator);\n      const trends = this.aggregator.getTrendData(indicator, 7); // Last 7 days\n\n      if (stats) {\n        const indicatorData = {\n          indicator,\n          name: this.getIndicatorName(indicator),\n          category: this.getIndicatorCategory(indicator),\n          current: stats.average,\n          benchmark: QualityBenchmarks[indicator],\n          performance: this.calculateIndicatorPerformance(stats.average, indicator),\n          trend: this.calculateTrendDirection(trends),\n          stats,\n        };\n\n        dashboard.indicators.push(indicatorData);\n\n        // Check for quality alerts\n        const alert = this.checkQualityAlert(indicatorData);\n        if (alert) {\n          dashboard.alerts.push(alert);\n        }\n      }\n    });\n\n    // Generate trend summaries\n    dashboard.trends = this.generateTrendSummaries();\n\n    return dashboard;\n  }\n\n  /**\n   * Generate overview metrics\n   */\n  generateOverview() {\n    const allMetrics = this.aggregator.metrics;\n    const last24Hours = allMetrics.filter((m) => new Date(m.timestamp) > new Date(Date.now() - 24 * 60 * 60 * 1000));\n\n    const performanceScores = allMetrics\n      .filter((m) => m.performance.score !== null)\n      .map((m) => m.performance.score);\n\n    const avgPerformance = performanceScores.length > 0\n      ? performanceScores.reduce((sum, score) => sum + score, 0) / performanceScores.length\n      : 0;\n\n    return {\n      totalMetrics: allMetrics.length,\n      metricsLast24h: last24Hours.length,\n      averagePerformance: Math.round(avgPerformance),\n      qualityLevel: this.getQualityLevel(avgPerformance),\n      lastUpdated: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Get indicator name\n   */\n  getIndicatorName(indicator) {\n    const names = {\n      [ClinicalIndicators.DOOR_TO_NEEDLE_TIME]: 'Door-to-Needle Time',\n      [ClinicalIndicators.DOOR_TO_IMAGING_TIME]: 'Door-to-Imaging Time',\n      [ClinicalIndicators.IMAGING_TO_DECISION_TIME]: 'Imaging-to-Decision Time',\n      [ClinicalIndicators.MORTALITY_RATE_30D]: '30-Day Mortality Rate',\n      [ClinicalIndicators.FUNCTIONAL_INDEPENDENCE_90D]: '90-Day Functional Independence',\n      [ClinicalIndicators.HEMORRHAGIC_TRANSFORMATION_RATE]: 'Hemorrhagic Transformation Rate',\n      [ClinicalIndicators.THROMBOLYSIS_RATE]: 'Thrombolysis Rate',\n      [ClinicalIndicators.MECHANICAL_THROMBECTOMY_RATE]: 'Mechanical Thrombectomy Rate',\n      [ClinicalIndicators.PREDICTION_ACCURACY]: 'Prediction Accuracy',\n      [ClinicalIndicators.MODEL_CALIBRATION]: 'Model Calibration',\n      [ClinicalIndicators.ALERT_APPROPRIATENESS]: 'Alert Appropriateness',\n      [ClinicalIndicators.GUIDELINE_ADHERENCE]: 'Guideline Adherence',\n    };\n\n    return names[indicator] || indicator.replace(/_/g, ' ').replace(/\\b\\w/g, (l) => l.toUpperCase());\n  }\n\n  /**\n   * Get indicator category\n   */\n  getIndicatorCategory(indicator) {\n    const categories = {\n      [ClinicalIndicators.DOOR_TO_NEEDLE_TIME]: QualityCategories.PROCESS,\n      [ClinicalIndicators.DOOR_TO_IMAGING_TIME]: QualityCategories.PROCESS,\n      [ClinicalIndicators.IMAGING_TO_DECISION_TIME]: QualityCategories.EFFICIENCY,\n      [ClinicalIndicators.MORTALITY_RATE_30D]: QualityCategories.OUTCOME,\n      [ClinicalIndicators.FUNCTIONAL_INDEPENDENCE_90D]: QualityCategories.OUTCOME,\n      [ClinicalIndicators.HEMORRHAGIC_TRANSFORMATION_RATE]: QualityCategories.SAFETY,\n      [ClinicalIndicators.THROMBOLYSIS_RATE]: QualityCategories.PROCESS,\n      [ClinicalIndicators.MECHANICAL_THROMBECTOMY_RATE]: QualityCategories.PROCESS,\n      [ClinicalIndicators.PREDICTION_ACCURACY]: QualityCategories.EFFICIENCY,\n      [ClinicalIndicators.MODEL_CALIBRATION]: QualityCategories.EFFICIENCY,\n      [ClinicalIndicators.ALERT_APPROPRIATENESS]: QualityCategories.EFFICIENCY,\n      [ClinicalIndicators.GUIDELINE_ADHERENCE]: QualityCategories.PROCESS,\n    };\n\n    return categories[indicator] || QualityCategories.PROCESS;\n  }\n\n  /**\n   * Calculate indicator performance\n   */\n  calculateIndicatorPerformance(value, indicator) {\n    const metric = new QualityMetric(indicator, null, value, new Date().toISOString());\n    return metric.performance;\n  }\n\n  /**\n   * Calculate trend direction\n   */\n  calculateTrendDirection(trends) {\n    if (!trends || trends.length < 2) {\n      return { direction: 'stable', change: 0 };\n    }\n\n    const validTrends = trends.filter((t) => t.average !== null);\n    if (validTrends.length < 2) {\n      return { direction: 'stable', change: 0 };\n    }\n\n    const recent = validTrends[validTrends.length - 1].average;\n    const previous = validTrends[validTrends.length - 2].average;\n    const change = ((recent - previous) / previous) * 100;\n\n    let direction;\n    if (Math.abs(change) < 5) {\n      direction = 'stable';\n    } else if (change > 0) {\n      direction = 'improving';\n    } else {\n      direction = 'declining';\n    }\n\n    return { direction, change: Math.round(change * 10) / 10 };\n  }\n\n  /**\n   * Check for quality alerts\n   */\n  checkQualityAlert(indicatorData) {\n    const { performance, trend, indicator } = indicatorData;\n\n    // Performance-based alerts\n    if (performance.level === 'needs_improvement') {\n      return {\n        type: 'performance',\n        severity: 'high',\n        indicator,\n        message: `${indicatorData.name} performance is below acceptable threshold`,\n        recommendation: 'Review processes and implement improvement measures',\n      };\n    }\n\n    // Trend-based alerts\n    if (trend.direction === 'declining' && Math.abs(trend.change) > 15) {\n      return {\n        type: 'trend',\n        severity: 'medium',\n        indicator,\n        message: `${indicatorData.name} showing declining trend (${trend.change}%)`,\n        recommendation: 'Monitor closely and identify contributing factors',\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Generate trend summaries\n   */\n  generateTrendSummaries() {\n    const summaries = [];\n    const indicators = Object.values(ClinicalIndicators);\n\n    indicators.forEach((indicator) => {\n      const trends = this.aggregator.getTrendData(indicator, 30);\n      if (trends) {\n        const summary = this.analyzeTrend(indicator, trends);\n        if (summary) {\n          summaries.push(summary);\n        }\n      }\n    });\n\n    return summaries.sort((a, b) => b.significance - a.significance);\n  }\n\n  /**\n   * Analyze trend for significance\n   */\n  analyzeTrend(indicator, trends) {\n    const validTrends = trends.filter((t) => t.average !== null);\n    if (validTrends.length < 7) {\n      return null;\n    }\n\n    // Calculate linear regression for trend analysis\n    const points = validTrends.map((t, i) => ({ x: i, y: t.average }));\n    const regression = this.calculateLinearRegression(points);\n\n    const significance = Math.abs(regression.slope) * validTrends.length;\n\n    return {\n      indicator,\n      name: this.getIndicatorName(indicator),\n      slope: regression.slope,\n      correlation: regression.correlation,\n      significance,\n      trend: regression.slope > 0 ? 'improving' : regression.slope < 0 ? 'declining' : 'stable',\n      dataPoints: validTrends.length,\n    };\n  }\n\n  /**\n   * Calculate linear regression\n   */\n  calculateLinearRegression(points) {\n    const n = points.length;\n    const sumX = points.reduce((sum, p) => sum + p.x, 0);\n    const sumY = points.reduce((sum, p) => sum + p.y, 0);\n    const sumXY = points.reduce((sum, p) => sum + p.x * p.y, 0);\n    const sumXX = points.reduce((sum, p) => sum + p.x * p.x, 0);\n    const sumYY = points.reduce((sum, p) => sum + p.y * p.y, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n\n    // Calculate correlation coefficient\n    const numerator = n * sumXY - sumX * sumY;\n    const denominator = Math.sqrt((n * sumXX - sumX * sumX) * (n * sumYY - sumY * sumY));\n    const correlation = denominator !== 0 ? numerator / denominator : 0;\n\n    return { slope, intercept, correlation };\n  }\n\n  /**\n   * Get quality level\n   */\n  getQualityLevel(score) {\n    if (score >= 90) {\n      return 'excellent';\n    }\n    if (score >= 85) {\n      return 'good';\n    }\n    if (score >= 70) {\n      return 'acceptable';\n    }\n    return 'needs_improvement';\n  }\n}\n\n/**\n * Quality Metrics Tracking System\n */\nexport class QualityMetricsTracker {\n  constructor() {\n    this.aggregator = new QualityAggregator();\n    this.dashboard = new QualityDashboard(this.aggregator);\n    this.collectors = new Map();\n    this.isActive = false;\n    this.updateInterval = null;\n  }\n\n  /**\n   * Initialize quality metrics tracking\n   */\n  async initialize() {\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.SYSTEM_STARTUP,\n      'quality_metrics_init',\n    );\n\n    try {\n      // Register metric collectors\n      this.registerMetricCollectors();\n\n      // Setup event listeners\n      this.setupEventListeners();\n\n      // Start periodic collection\n      this.startPeriodicCollection();\n\n      this.isActive = true;\n\n      medicalPerformanceMonitor.endMeasurement(metricId, { success: true });\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'quality_metrics_tracker_initialized',\n        collectors: Array.from(this.collectors.keys()),\n      });\n    } catch (error) {\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: false,\n        error: error.message,\n      });\n\n      // ('Quality metrics tracker initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register metric collectors\n   */\n  registerMetricCollectors() {\n    // Process time collectors\n    this.collectors.set('door_to_needle_collector', {\n      indicator: ClinicalIndicators.DOOR_TO_NEEDLE_TIME,\n      category: QualityCategories.PROCESS,\n      collect: this.collectDoorToNeedleTime.bind(this),\n    });\n\n    this.collectors.set('door_to_imaging_collector', {\n      indicator: ClinicalIndicators.DOOR_TO_IMAGING_TIME,\n      category: QualityCategories.PROCESS,\n      collect: this.collectDoorToImagingTime.bind(this),\n    });\n\n    // Outcome collectors\n    this.collectors.set('prediction_accuracy_collector', {\n      indicator: ClinicalIndicators.PREDICTION_ACCURACY,\n      category: QualityCategories.EFFICIENCY,\n      collect: this.collectPredictionAccuracy.bind(this),\n    });\n\n    this.collectors.set('alert_appropriateness_collector', {\n      indicator: ClinicalIndicators.ALERT_APPROPRIATENESS,\n      category: QualityCategories.EFFICIENCY,\n      collect: this.collectAlertAppropriateness.bind(this),\n    });\n\n    // Treatment rate collectors\n    this.collectors.set('thrombolysis_rate_collector', {\n      indicator: ClinicalIndicators.THROMBOLYSIS_RATE,\n      category: QualityCategories.PROCESS,\n      collect: this.collectThrombolysisRate.bind(this),\n    });\n  }\n\n  /**\n   * Setup event listeners for real-time collection\n   */\n  setupEventListeners() {\n    // Listen for clinical events\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.CLINICAL_ALERT, (data) => {\n      this.handleClinicalAlert(data);\n    });\n\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.PREDICTION_GENERATED, (data) => {\n      this.handlePredictionGenerated(data);\n    });\n\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.TREATMENT_DELIVERED, (data) => {\n      this.handleTreatmentDelivered(data);\n    });\n\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.PATIENT_OUTCOME, (data) => {\n      this.handlePatientOutcome(data);\n    });\n  }\n\n  /**\n   * Start periodic metric collection\n   */\n  startPeriodicCollection() {\n    // Collect metrics every 15 minutes\n    this.updateInterval = setInterval(() => {\n      this.collectAllMetrics();\n    }, 15 * 60 * 1000);\n\n    // Initial collection\n    this.collectAllMetrics();\n  }\n\n  /**\n   * Collect all metrics from registered collectors\n   */\n  async collectAllMetrics() {\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.DATA_PROCESSING,\n      'collect_all_metrics',\n    );\n\n    try {\n      const collectionPromises = Array.from(this.collectors.values()).map(async (collector) => {\n        try {\n          const value = await collector.collect();\n          if (value !== null && value !== undefined) {\n            const metric = new QualityMetric(\n              collector.indicator,\n              collector.category,\n              value,\n              new Date().toISOString(),\n            );\n            this.aggregator.addMetric(metric);\n            return { indicator: collector.indicator, value, success: true };\n          }\n        } catch (error) {\n          // (`Failed to collect metric ${collector.indicator}:`, error);\n          return { indicator: collector.indicator, error: error.message, success: false };\n        }\n        return null;\n      });\n\n      const results = await Promise.allSettled(collectionPromises);\n      const successful = results.filter((r) => r.status === 'fulfilled' && r.value?.success);\n\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: true,\n        metricsCollected: successful.length,\n      });\n    } catch (error) {\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: false,\n        error: error.message,\n      });\n\n      // ('Metric collection failed:', error);\n    }\n  }\n\n  /**\n   * Record custom metric\n   */\n  recordMetric(indicator, category, value, metadata = {}) {\n    const metric = new QualityMetric(\n      indicator,\n      category,\n      value,\n      new Date().toISOString(),\n      metadata,\n    );\n\n    this.aggregator.addMetric(metric);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'quality_metric_recorded',\n      indicator,\n      value,\n      performance: metric.performance,\n    });\n\n    return metric;\n  }\n\n  /**\n   * Get quality dashboard\n   */\n  getQualityDashboard() {\n    return this.dashboard.generateDashboard();\n  }\n\n  /**\n   * Get metric statistics\n   */\n  getMetricStatistics(indicator) {\n    return this.aggregator.getAggregatedStats(indicator);\n  }\n\n  /**\n   * Get trend data\n   */\n  getTrendData(indicator, days = 30) {\n    return this.aggregator.getTrendData(indicator, days);\n  }\n\n  /**\n   * Export quality report\n   */\n  exportQualityReport(format = 'json') {\n    const dashboard = this.getQualityDashboard();\n    const report = {\n      timestamp: new Date().toISOString(),\n      version: '1.0',\n      dashboard,\n      detailedMetrics: this.getDetailedMetrics(),\n    };\n\n    switch (format) {\n      case 'json':\n        return JSON.stringify(report, null, 2);\n      case 'csv':\n        return this.convertToCSV(report);\n      default:\n        return report;\n    }\n  }\n\n  /**\n   * Get detailed metrics\n   */\n  getDetailedMetrics() {\n    const indicators = Object.values(ClinicalIndicators);\n    const detailed = {};\n\n    indicators.forEach((indicator) => {\n      const stats = this.aggregator.getAggregatedStats(indicator);\n      const trends = this.aggregator.getTrendData(indicator, 30);\n\n      if (stats) {\n        detailed[indicator] = {\n          statistics: stats,\n          trends,\n          benchmark: QualityBenchmarks[indicator],\n        };\n      }\n    });\n\n    return detailed;\n  }\n\n  /**\n   * Specific metric collectors\n   */\n  async collectDoorToNeedleTime() {\n    // Simulate collecting door-to-needle times from system\n    // In real implementation, this would query database or system logs\n    return Math.random() * 40 + 30; // 30-70 minutes\n  }\n\n  async collectDoorToImagingTime() {\n    // Simulate collecting door-to-imaging times\n    return Math.random() * 20 + 15; // 15-35 minutes\n  }\n\n  async collectPredictionAccuracy() {\n    // Simulate prediction accuracy from model validation\n    return Math.random() * 20 + 80; // 80-100%\n  }\n\n  async collectAlertAppropriateness() {\n    // Simulate alert appropriateness metric\n    return Math.random() * 30 + 70; // 70-100%\n  }\n\n  async collectThrombolysisRate() {\n    // Simulate thrombolysis rate\n    return Math.random() * 15 + 10; // 10-25%\n  }\n\n  /**\n   * Event handlers for real-time metrics\n   */\n  handleClinicalAlert(data) {\n    // Increment alert count for appropriateness tracking\n    const isAppropriate = this.assessAlertAppropriateness(data.alert);\n\n    this.recordMetric(\n      ClinicalIndicators.ALERT_APPROPRIATENESS,\n      QualityCategories.EFFICIENCY,\n      isAppropriate ? 100 : 0,\n      { alertId: data.alert.id, alertType: data.alert.ruleId },\n    );\n  }\n\n  handlePredictionGenerated(data) {\n    // Track prediction generation for quality monitoring\n    const confidence = data.predictions?.mortality?.confidence?.percent || 0;\n\n    this.recordMetric(\n      'prediction_confidence',\n      QualityCategories.EFFICIENCY,\n      confidence,\n      { patientId: data.patientId },\n    );\n  }\n\n  handleTreatmentDelivered(data) {\n    // Track treatment delivery times and rates\n    if (data.treatment === 'thrombolysis') {\n      const { doorToNeedleTime } = data;\n      if (doorToNeedleTime) {\n        this.recordMetric(\n          ClinicalIndicators.DOOR_TO_NEEDLE_TIME,\n          QualityCategories.PROCESS,\n          doorToNeedleTime,\n          { patientId: data.patientId },\n        );\n      }\n    }\n  }\n\n  handlePatientOutcome(data) {\n    // Track patient outcomes for quality assessment\n    if (data.outcome === 'mortality_30d') {\n      this.recordMetric(\n        ClinicalIndicators.MORTALITY_RATE_30D,\n        QualityCategories.OUTCOME,\n        data.value ? 100 : 0, // Convert boolean to percentage point\n        { patientId: data.patientId },\n      );\n    }\n\n    if (data.outcome === 'functional_independence_90d') {\n      this.recordMetric(\n        ClinicalIndicators.FUNCTIONAL_INDEPENDENCE_90D,\n        QualityCategories.OUTCOME,\n        data.value ? 100 : 0,\n        { patientId: data.patientId },\n      );\n    }\n  }\n\n  /**\n   * Assess alert appropriateness\n   */\n  assessAlertAppropriateness(alert) {\n    // Simplified appropriateness assessment\n    // In real implementation, this would be more sophisticated\n\n    if (alert.severity?.level === 'critical') {\n      return Math.random() > 0.1; // 90% appropriate for critical alerts\n    } if (alert.severity?.level === 'high') {\n      return Math.random() > 0.2; // 80% appropriate for high alerts\n    }\n    return Math.random() > 0.3; // 70% appropriate for other alerts\n  }\n\n  /**\n   * Convert report to CSV format\n   */\n  convertToCSV(report) {\n    const rows = [\n      ['Indicator', 'Category', 'Current Value', 'Benchmark Target', 'Performance Level', 'Trend Direction'],\n    ];\n\n    report.dashboard.indicators.forEach((indicator) => {\n      rows.push([\n        indicator.name,\n        indicator.category,\n        indicator.current?.toFixed(2) || 'N/A',\n        indicator.benchmark?.target || 'N/A',\n        indicator.performance?.level || 'N/A',\n        indicator.trend?.direction || 'N/A',\n      ]);\n    });\n\n    return rows.map((row) => row.join(',')).join('\\n');\n  }\n\n  /**\n   * Get quality trends summary\n   */\n  getQualityTrendsSummary(days = 30) {\n    const summary = {\n      period: `${days} days`,\n      overallTrend: 'stable',\n      improvingIndicators: [],\n      decliningIndicators: [],\n      stableIndicators: [],\n    };\n\n    const indicators = Object.values(ClinicalIndicators);\n\n    indicators.forEach((indicator) => {\n      const trends = this.aggregator.getTrendData(indicator, days);\n      if (trends) {\n        const trendDirection = this.dashboard.calculateTrendDirection(trends);\n\n        const indicatorSummary = {\n          indicator,\n          name: this.dashboard.getIndicatorName(indicator),\n          direction: trendDirection.direction,\n          change: trendDirection.change,\n        };\n\n        if (trendDirection.direction === 'improving') {\n          summary.improvingIndicators.push(indicatorSummary);\n        } else if (trendDirection.direction === 'declining') {\n          summary.decliningIndicators.push(indicatorSummary);\n        } else {\n          summary.stableIndicators.push(indicatorSummary);\n        }\n      }\n    });\n\n    // Determine overall trend\n    if (summary.improvingIndicators.length > summary.decliningIndicators.length) {\n      summary.overallTrend = 'improving';\n    } else if (summary.decliningIndicators.length > summary.improvingIndicators.length) {\n      summary.overallTrend = 'declining';\n    }\n\n    return summary;\n  }\n\n  /**\n   * Stop quality metrics tracking\n   */\n  stop() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n\n    this.isActive = false;\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'quality_metrics_tracker_stopped',\n    });\n  }\n\n  /**\n   * Dispose quality metrics tracker\n   */\n  dispose() {\n    this.stop();\n    this.collectors.clear();\n    this.aggregator.metrics.length = 0;\n    this.aggregator.aggregations.clear();\n    this.aggregator.trends.clear();\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'quality_metrics_tracker_disposed',\n    });\n  }\n}\n\n// Export quality metrics tracker instance\nexport const qualityMetricsTracker = new QualityMetricsTracker();\n","/**\n * Clinical Audit Trail System\n * iGFAP Stroke Triage Assistant - Phase 4 Medical Intelligence\n *\n * Comprehensive audit logging and compliance tracking for clinical decisions\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\nimport { medicalPerformanceMonitor, PerformanceMetricType } from '../performance/medical-performance-monitor.js';\nimport { predictionCache } from '../performance/medical-cache.js';\n\n/**\n * Audit event types\n */\nexport const AuditEventTypes = {\n  USER_LOGIN: 'user_login',\n  USER_LOGOUT: 'user_logout',\n  PATIENT_ACCESS: 'patient_access',\n  DATA_ENTRY: 'data_entry',\n  DATA_MODIFICATION: 'data_modification',\n  PREDICTION_GENERATED: 'prediction_generated',\n  ALERT_TRIGGERED: 'alert_triggered',\n  ALERT_ACKNOWLEDGED: 'alert_acknowledged',\n  TREATMENT_RECOMMENDED: 'treatment_recommended',\n  REPORT_GENERATED: 'report_generated',\n  DATA_EXPORT: 'data_export',\n  SYSTEM_ERROR: 'system_error',\n  CONFIGURATION_CHANGE: 'configuration_change',\n  MODEL_PREDICTION: 'model_prediction',\n  QUALITY_METRIC: 'quality_metric',\n  CLINICAL_DECISION: 'clinical_decision',\n};\n\n/**\n * Audit severity levels\n */\nexport const AuditSeverity = {\n  INFO: 'info',\n  WARNING: 'warning',\n  ERROR: 'error',\n  CRITICAL: 'critical',\n};\n\n/**\n * Compliance frameworks\n */\nexport const ComplianceFrameworks = {\n  HIPAA: 'hipaa',\n  GDPR: 'gdpr',\n  FDA_21CFR11: 'fda_21cfr11',\n  IEC_62304: 'iec_62304',\n  ISO_27001: 'iso_27001',\n};\n\n/**\n * Audit event data structure\n */\nclass AuditEvent {\n  constructor(eventType, data = {}) {\n    this.id = `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    this.timestamp = new Date().toISOString();\n    this.eventType = eventType;\n    this.severity = data.severity || AuditSeverity.INFO;\n    this.userId = data.userId || 'system';\n    this.sessionId = data.sessionId || null;\n    this.patientId = data.patientId || null;\n    this.ipAddress = data.ipAddress || this.getClientIP();\n    this.userAgent = data.userAgent || navigator.userAgent;\n    this.module = data.module || null;\n    this.action = data.action || null;\n    this.resource = data.resource || null;\n    this.oldValue = data.oldValue || null;\n    this.newValue = data.newValue || null;\n    this.outcome = data.outcome || 'success';\n    this.errorMessage = data.errorMessage || null;\n    this.metadata = data.metadata || {};\n    this.compliance = this.determineComplianceRequirements(eventType);\n    this.hash = this.calculateHash();\n  }\n\n  /**\n   * Get client IP address (simplified)\n   */\n  getClientIP() {\n    // In real implementation, this would get actual client IP\n    return '127.0.0.1';\n  }\n\n  /**\n   * Determine compliance requirements for event type\n   */\n  determineComplianceRequirements(eventType) {\n    const requirements = [];\n\n    // HIPAA requirements for PHI access and modifications\n    if ([\n      AuditEventTypes.PATIENT_ACCESS,\n      AuditEventTypes.DATA_ENTRY,\n      AuditEventTypes.DATA_MODIFICATION,\n      AuditEventTypes.DATA_EXPORT,\n      AuditEventTypes.REPORT_GENERATED,\n    ].includes(eventType)) {\n      requirements.push(ComplianceFrameworks.HIPAA);\n    }\n\n    // FDA 21 CFR Part 11 for electronic records\n    if ([\n      AuditEventTypes.DATA_ENTRY,\n      AuditEventTypes.DATA_MODIFICATION,\n      AuditEventTypes.REPORT_GENERATED,\n      AuditEventTypes.CLINICAL_DECISION,\n    ].includes(eventType)) {\n      requirements.push(ComplianceFrameworks.FDA_21CFR11);\n    }\n\n    // IEC 62304 for medical device software\n    if ([\n      AuditEventTypes.PREDICTION_GENERATED,\n      AuditEventTypes.MODEL_PREDICTION,\n      AuditEventTypes.SYSTEM_ERROR,\n      AuditEventTypes.CONFIGURATION_CHANGE,\n    ].includes(eventType)) {\n      requirements.push(ComplianceFrameworks.IEC_62304);\n    }\n\n    return requirements;\n  }\n\n  /**\n   * Calculate event hash for integrity verification\n   */\n  calculateHash() {\n    const dataString = JSON.stringify({\n      timestamp: this.timestamp,\n      eventType: this.eventType,\n      userId: this.userId,\n      action: this.action,\n      resource: this.resource,\n      outcome: this.outcome,\n    });\n\n    // Simplified hash calculation - in real implementation use crypto.subtle\n    let hash = 0;\n    for (let i = 0; i < dataString.length; i++) {\n      const char = dataString.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash &= hash; // Convert to 32-bit integer\n    }\n\n    return Math.abs(hash).toString(16);\n  }\n\n  /**\n   * Sanitize event for storage (remove sensitive data)\n   */\n  sanitize() {\n    const sanitized = { ...this };\n\n    // Remove or hash sensitive information\n    if (sanitized.patientId) {\n      sanitized.patientId = this.hashSensitiveData(sanitized.patientId);\n    }\n\n    if (sanitized.oldValue && typeof sanitized.oldValue === 'object') {\n      sanitized.oldValue = this.sanitizeObject(sanitized.oldValue);\n    }\n\n    if (sanitized.newValue && typeof sanitized.newValue === 'object') {\n      sanitized.newValue = this.sanitizeObject(sanitized.newValue);\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Hash sensitive data\n   */\n  hashSensitiveData(data) {\n    // In real implementation, use proper cryptographic hashing\n    return `hash_${data.toString().length}_${Date.now().toString(36)}`;\n  }\n\n  /**\n   * Sanitize object by removing PII\n   */\n  sanitizeObject(obj) {\n    const sanitized = { ...obj };\n    const sensitiveFields = ['name', 'ssn', 'address', 'phone', 'email'];\n\n    sensitiveFields.forEach((field) => {\n      if (sanitized[field]) {\n        sanitized[field] = '[REDACTED]';\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Export event in compliance format\n   */\n  exportForCompliance(framework) {\n    const baseExport = {\n      eventId: this.id,\n      timestamp: this.timestamp,\n      eventType: this.eventType,\n      userId: this.userId,\n      outcome: this.outcome,\n      hash: this.hash,\n    };\n\n    switch (framework) {\n      case ComplianceFrameworks.HIPAA:\n        return {\n          ...baseExport,\n          patientId: this.patientId ? '[PROTECTED]' : null,\n          accessType: this.action,\n          reasonForAccess: this.metadata.reason || 'Clinical care',\n          minimalNecessary: true,\n        };\n\n      case ComplianceFrameworks.FDA_21CFR11:\n        return {\n          ...baseExport,\n          electronicSignature: this.metadata.signature || null,\n          recordIntegrity: this.hash,\n          auditTrailComplete: true,\n          dataModification: {\n            old: this.oldValue ? '[RECORDED]' : null,\n            new: this.newValue ? '[RECORDED]' : null,\n          },\n        };\n\n      case ComplianceFrameworks.IEC_62304:\n        return {\n          ...baseExport,\n          softwareVersion: this.metadata.version || '1.0',\n          riskClass: this.metadata.riskClass || 'B',\n          safetyRequirement: this.metadata.safetyRequirement || null,\n          traceabilityId: this.metadata.traceabilityId || null,\n        };\n\n      default:\n        return baseExport;\n    }\n  }\n}\n\n/**\n * Audit trail storage and management\n */\nclass AuditStorage {\n  constructor() {\n    this.events = [];\n    this.indices = new Map();\n    this.maxEvents = 10000; // Maximum events to keep in memory\n    this.retentionPeriod = 7 * 365 * 24 * 60 * 60 * 1000; // 7 years in milliseconds\n  }\n\n  /**\n   * Store audit event\n   */\n  store(event) {\n    // Add to events array\n    this.events.push(event);\n\n    // Update indices for fast searching\n    this.updateIndices(event);\n\n    // Maintain size limits\n    this.maintainStorageSize();\n\n    // Trigger persistence\n    this.persistEvent(event);\n  }\n\n  /**\n   * Update search indices\n   */\n  updateIndices(event) {\n    // Index by event type\n    if (!this.indices.has('eventType')) {\n      this.indices.set('eventType', new Map());\n    }\n    const eventTypeIndex = this.indices.get('eventType');\n    if (!eventTypeIndex.has(event.eventType)) {\n      eventTypeIndex.set(event.eventType, []);\n    }\n    eventTypeIndex.get(event.eventType).push(event.id);\n\n    // Index by user ID\n    if (!this.indices.has('userId')) {\n      this.indices.set('userId', new Map());\n    }\n    const userIndex = this.indices.get('userId');\n    if (!userIndex.has(event.userId)) {\n      userIndex.set(event.userId, []);\n    }\n    userIndex.get(event.userId).push(event.id);\n\n    // Index by patient ID\n    if (event.patientId) {\n      if (!this.indices.has('patientId')) {\n        this.indices.set('patientId', new Map());\n      }\n      const patientIndex = this.indices.get('patientId');\n      if (!patientIndex.has(event.patientId)) {\n        patientIndex.set(event.patientId, []);\n      }\n      patientIndex.get(event.patientId).push(event.id);\n    }\n\n    // Index by date (day granularity)\n    const dateKey = event.timestamp.split('T')[0];\n    if (!this.indices.has('date')) {\n      this.indices.set('date', new Map());\n    }\n    const dateIndex = this.indices.get('date');\n    if (!dateIndex.has(dateKey)) {\n      dateIndex.set(dateKey, []);\n    }\n    dateIndex.get(dateKey).push(event.id);\n  }\n\n  /**\n   * Maintain storage size limits\n   */\n  maintainStorageSize() {\n    if (this.events.length > this.maxEvents) {\n      const eventsToRemove = this.events.length - this.maxEvents;\n      const removedEvents = this.events.splice(0, eventsToRemove);\n\n      // Update indices to remove old events\n      removedEvents.forEach((event) => {\n        this.removeFromIndices(event);\n      });\n    }\n\n    // Remove events older than retention period\n    const cutoffTime = new Date(Date.now() - this.retentionPeriod);\n    this.events = this.events.filter((event) => {\n      const eventTime = new Date(event.timestamp);\n      const shouldKeep = eventTime > cutoffTime;\n\n      if (!shouldKeep) {\n        this.removeFromIndices(event);\n      }\n\n      return shouldKeep;\n    });\n  }\n\n  /**\n   * Remove event from indices\n   */\n  removeFromIndices(event) {\n    // Remove from event type index\n    const eventTypeIndex = this.indices.get('eventType');\n    if (eventTypeIndex && eventTypeIndex.has(event.eventType)) {\n      const eventIds = eventTypeIndex.get(event.eventType);\n      const index = eventIds.indexOf(event.id);\n      if (index > -1) {\n        eventIds.splice(index, 1);\n      }\n    }\n\n    // Remove from user index\n    const userIndex = this.indices.get('userId');\n    if (userIndex && userIndex.has(event.userId)) {\n      const eventIds = userIndex.get(event.userId);\n      const index = eventIds.indexOf(event.id);\n      if (index > -1) {\n        eventIds.splice(index, 1);\n      }\n    }\n\n    // Remove from patient index\n    if (event.patientId) {\n      const patientIndex = this.indices.get('patientId');\n      if (patientIndex && patientIndex.has(event.patientId)) {\n        const eventIds = patientIndex.get(event.patientId);\n        const index = eventIds.indexOf(event.id);\n        if (index > -1) {\n          eventIds.splice(index, 1);\n        }\n      }\n    }\n\n    // Remove from date index\n    const dateKey = event.timestamp.split('T')[0];\n    const dateIndex = this.indices.get('date');\n    if (dateIndex && dateIndex.has(dateKey)) {\n      const eventIds = dateIndex.get(dateKey);\n      const index = eventIds.indexOf(event.id);\n      if (index > -1) {\n        eventIds.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Persist event to secure storage\n   */\n  async persistEvent(event) {\n    try {\n      // In real implementation, this would persist to secure database\n      const sanitizedEvent = event.sanitize();\n      await predictionCache.set(`audit_${event.id}`, sanitizedEvent, 24 * 60 * 60 * 1000);\n    } catch (error) {\n      // ('Failed to persist audit event:', error);\n    }\n  }\n\n  /**\n   * Search events\n   */\n  search(criteria) {\n    let candidateIds = new Set();\n    let firstCriteria = true;\n\n    // Use indices to find candidate events\n    Object.entries(criteria).forEach(([key, value]) => {\n      const index = this.indices.get(key);\n      if (index && index.has(value)) {\n        const ids = new Set(index.get(value));\n\n        if (firstCriteria) {\n          candidateIds = ids;\n          firstCriteria = false;\n        } else {\n          // Intersection with previous results\n          candidateIds = new Set([...candidateIds].filter((id) => ids.has(id)));\n        }\n      } else if (firstCriteria) {\n        // If first criteria has no matches, return empty set\n        candidateIds = new Set();\n        firstCriteria = false;\n      } else {\n        // No intersection possible\n        candidateIds = new Set();\n      }\n    });\n\n    // Get actual events\n    const results = this.events.filter((event) => candidateIds.has(event.id));\n\n    // Apply additional filters\n    return this.applyAdditionalFilters(results, criteria);\n  }\n\n  /**\n   * Apply additional filters that can't use indices\n   */\n  applyAdditionalFilters(events, criteria) {\n    let filtered = events;\n\n    if (criteria.startDate) {\n      const startDate = new Date(criteria.startDate);\n      filtered = filtered.filter((event) => new Date(event.timestamp) >= startDate);\n    }\n\n    if (criteria.endDate) {\n      const endDate = new Date(criteria.endDate);\n      filtered = filtered.filter((event) => new Date(event.timestamp) <= endDate);\n    }\n\n    if (criteria.severity) {\n      filtered = filtered.filter((event) => event.severity === criteria.severity);\n    }\n\n    if (criteria.outcome) {\n      filtered = filtered.filter((event) => event.outcome === criteria.outcome);\n    }\n\n    if (criteria.textSearch) {\n      const searchTerm = criteria.textSearch.toLowerCase();\n      filtered = filtered.filter((event) => event.action?.toLowerCase().includes(searchTerm)\n        || event.resource?.toLowerCase().includes(searchTerm)\n        || event.errorMessage?.toLowerCase().includes(searchTerm));\n    }\n\n    return filtered.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  }\n\n  /**\n   * Get events count\n   */\n  getCount() {\n    return this.events.length;\n  }\n\n  /**\n   * Get storage statistics\n   */\n  getStatistics() {\n    const eventsByType = {};\n    const eventsBySeverity = {};\n    const eventsBy日 = {};\n\n    this.events.forEach((event) => {\n      // Count by type\n      eventsByType[event.eventType] = (eventsByType[event.eventType] || 0) + 1;\n\n      // Count by severity\n      eventsBySeverity[event.severity] = (eventsBySeverity[event.severity] || 0) + 1;\n\n      // Count by day\n      const day = event.timestamp.split('T')[0];\n      eventsBy日[day] = (eventsBy日[day] || 0) + 1;\n    });\n\n    return {\n      totalEvents: this.events.length,\n      eventsByType,\n      eventsBySeverity,\n      eventsByDay: eventsBy日,\n      oldestEvent: this.events.length > 0 ? this.events[0].timestamp : null,\n      newestEvent: this.events.length > 0 ? this.events[this.events.length - 1].timestamp : null,\n    };\n  }\n}\n\n/**\n * Clinical Audit Trail System\n */\nexport class ClinicalAuditTrail {\n  constructor() {\n    this.storage = new AuditStorage();\n    this.isActive = false;\n    this.currentSession = null;\n    this.automaticEvents = new Set([\n      MEDICAL_EVENTS.PREDICTION_GENERATED,\n      MEDICAL_EVENTS.CLINICAL_ALERT,\n      MEDICAL_EVENTS.FORM_UPDATED,\n      MEDICAL_EVENTS.AUDIT_EVENT,\n    ]);\n  }\n\n  /**\n   * Initialize audit trail system\n   */\n  async initialize() {\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.SYSTEM_STARTUP,\n      'audit_trail_init',\n    );\n\n    try {\n      // Setup event listeners for automatic auditing\n      this.setupEventListeners();\n\n      // Start session tracking\n      this.startSession();\n\n      this.isActive = true;\n\n      medicalPerformanceMonitor.endMeasurement(metricId, { success: true });\n\n      this.logEvent(AuditEventTypes.CONFIGURATION_CHANGE, {\n        action: 'audit_trail_initialized',\n        resource: 'audit_system',\n        metadata: {\n          version: '1.0',\n          riskClass: 'B',\n          safetyRequirement: 'Clinical decision audit logging',\n        },\n      });\n\n      // ('📋 Clinical audit trail system initialized');\n    } catch (error) {\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: false,\n        error: error.message,\n      });\n\n      // ('Audit trail initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Setup event listeners for automatic audit logging\n   */\n  setupEventListeners() {\n    // Listen for medical events\n    this.automaticEvents.forEach((eventType) => {\n      medicalEventObserver.subscribe(eventType, (data) => {\n        this.handleAutomaticEvent(eventType, data);\n      });\n    });\n\n    // Listen for form submissions\n    document.addEventListener('submit', (event) => {\n      this.handleFormSubmission(event);\n    });\n\n    // Listen for page navigation\n    window.addEventListener('beforeunload', () => {\n      this.logEvent(AuditEventTypes.USER_LOGOUT, {\n        action: 'session_ended',\n        resource: 'application',\n      });\n    });\n\n    // Listen for errors\n    window.addEventListener('error', (event) => {\n      this.logEvent(AuditEventTypes.SYSTEM_ERROR, {\n        severity: AuditSeverity.ERROR,\n        action: 'javascript_error',\n        resource: event.filename || 'unknown',\n        errorMessage: event.message,\n        metadata: {\n          line: event.lineno,\n          column: event.colno,\n          stack: event.error?.stack,\n        },\n      });\n    });\n  }\n\n  /**\n   * Start user session\n   */\n  startSession() {\n    this.currentSession = {\n      id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      startTime: new Date().toISOString(),\n      userId: 'clinical_user', // In real implementation, get from auth\n      events: [],\n    };\n\n    this.logEvent(AuditEventTypes.USER_LOGIN, {\n      action: 'session_started',\n      resource: 'application',\n      sessionId: this.currentSession.id,\n    });\n  }\n\n  /**\n   * Log audit event\n   */\n  logEvent(eventType, data = {}) {\n    if (!this.isActive) {\n      return;\n    }\n\n    try {\n      // Add session information\n      if (this.currentSession) {\n        data.sessionId = this.currentSession.id;\n        data.userId = data.userId || this.currentSession.userId;\n      }\n\n      // Create audit event\n      const event = new AuditEvent(eventType, data);\n\n      // Store event\n      this.storage.store(event);\n\n      // Add to current session\n      if (this.currentSession) {\n        this.currentSession.events.push(event.id);\n      }\n\n      // Notify for critical events\n      if (event.severity === AuditSeverity.CRITICAL || event.severity === AuditSeverity.ERROR) {\n        this.notifyCriticalEvent(event);\n      }\n\n      return event.id;\n    } catch (error) {\n      // ('Failed to log audit event:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Handle automatic events\n   */\n  handleAutomaticEvent(eventType, data) {\n    switch (eventType) {\n      case MEDICAL_EVENTS.PREDICTION_GENERATED:\n        this.logEvent(AuditEventTypes.PREDICTION_GENERATED, {\n          action: 'prediction_generated',\n          resource: 'predictive_engine',\n          patientId: data.patientId,\n          metadata: {\n            predictions: Object.keys(data.predictions || {}),\n            confidence: data.predictions?.mortality?.confidence?.level,\n          },\n        });\n        break;\n\n      case MEDICAL_EVENTS.CLINICAL_ALERT:\n        this.logEvent(AuditEventTypes.ALERT_TRIGGERED, {\n          severity: data.alert?.severity?.level === 'critical' ? AuditSeverity.CRITICAL : AuditSeverity.WARNING,\n          action: data.action === 'activated' ? 'alert_triggered' : 'alert_acknowledged',\n          resource: 'clinical_decision_support',\n          patientId: data.alert?.patientId,\n          metadata: {\n            alertId: data.alert?.id,\n            alertType: data.alert?.ruleId,\n            alertTitle: data.alert?.title,\n          },\n        });\n        break;\n\n      case MEDICAL_EVENTS.FORM_UPDATED:\n        this.logEvent(AuditEventTypes.DATA_ENTRY, {\n          action: 'form_data_updated',\n          resource: `form_${data.module}`,\n          patientId: data.patientId,\n          metadata: {\n            module: data.module,\n            fieldsUpdated: Object.keys(data.formData || {}),\n          },\n        });\n        break;\n\n      case MEDICAL_EVENTS.AUDIT_EVENT:\n        // Don't log audit events to avoid recursion\n        break;\n    }\n  }\n\n  /**\n   * Handle form submissions\n   */\n  handleFormSubmission(event) {\n    const form = event.target;\n    if (form.dataset.module) {\n      const formData = new FormData(form);\n      const patientData = Object.fromEntries(formData.entries());\n\n      this.logEvent(AuditEventTypes.CLINICAL_DECISION, {\n        action: 'clinical_assessment_submitted',\n        resource: `module_${form.dataset.module}`,\n        metadata: {\n          module: form.dataset.module,\n          fieldsSubmitted: Object.keys(patientData),\n          timestamp: new Date().toISOString(),\n        },\n      });\n    }\n  }\n\n  /**\n   * Log data modification\n   */\n  logDataModification(resource, oldValue, newValue, options = {}) {\n    return this.logEvent(AuditEventTypes.DATA_MODIFICATION, {\n      action: 'data_modified',\n      resource,\n      oldValue,\n      newValue,\n      patientId: options.patientId,\n      metadata: {\n        reason: options.reason || 'Clinical update',\n        signature: options.signature,\n      },\n    });\n  }\n\n  /**\n   * Log report generation\n   */\n  logReportGeneration(reportType, patientId, options = {}) {\n    return this.logEvent(AuditEventTypes.REPORT_GENERATED, {\n      action: 'clinical_report_generated',\n      resource: `report_${reportType}`,\n      patientId,\n      metadata: {\n        reportType,\n        format: options.format || 'html',\n        recipient: options.recipient,\n        reason: options.reason || 'Clinical documentation',\n      },\n    });\n  }\n\n  /**\n   * Log data export\n   */\n  logDataExport(dataType, format, options = {}) {\n    return this.logEvent(AuditEventTypes.DATA_EXPORT, {\n      severity: AuditSeverity.WARNING,\n      action: 'data_exported',\n      resource: `export_${dataType}`,\n      metadata: {\n        dataType,\n        format,\n        recordCount: options.recordCount,\n        recipient: options.recipient,\n        purpose: options.purpose || 'Clinical analysis',\n      },\n    });\n  }\n\n  /**\n   * Search audit events\n   */\n  searchEvents(criteria) {\n    return this.storage.search(criteria);\n  }\n\n  /**\n   * Get audit trail for patient\n   */\n  getPatientAuditTrail(patientId, options = {}) {\n    const criteria = {\n      patientId,\n      startDate: options.startDate,\n      endDate: options.endDate,\n    };\n\n    return this.storage.search(criteria);\n  }\n\n  /**\n   * Get audit trail for user\n   */\n  getUserAuditTrail(userId, options = {}) {\n    const criteria = {\n      userId,\n      startDate: options.startDate,\n      endDate: options.endDate,\n    };\n\n    return this.storage.search(criteria);\n  }\n\n  /**\n   * Generate compliance report\n   */\n  generateComplianceReport(framework, options = {}) {\n    const events = this.storage.search({\n      startDate: options.startDate,\n      endDate: options.endDate,\n    });\n\n    const complianceEvents = events.filter((event) => event.compliance.includes(framework));\n\n    const report = {\n      framework,\n      reportPeriod: {\n        start: options.startDate || 'N/A',\n        end: options.endDate || 'N/A',\n      },\n      totalEvents: complianceEvents.length,\n      events: complianceEvents.map((event) => event.exportForCompliance(framework)),\n      summary: this.generateComplianceSummary(complianceEvents, framework),\n      generatedAt: new Date().toISOString(),\n    };\n\n    // Log report generation\n    this.logEvent(AuditEventTypes.REPORT_GENERATED, {\n      action: 'compliance_report_generated',\n      resource: `compliance_${framework}`,\n      metadata: {\n        framework,\n        eventCount: complianceEvents.length,\n        period: report.reportPeriod,\n      },\n    });\n\n    return report;\n  }\n\n  /**\n   * Generate compliance summary\n   */\n  generateComplianceSummary(events, framework) {\n    const summary = {\n      totalEvents: events.length,\n      eventsByType: {},\n      eventsBySeverity: {},\n      complianceMetrics: {},\n    };\n\n    events.forEach((event) => {\n      // Count by type\n      summary.eventsByType[event.eventType] = (summary.eventsByType[event.eventType] || 0) + 1;\n\n      // Count by severity\n      summary.eventsBySeverity[event.severity] = (summary.eventsBySeverity[event.severity] || 0) + 1;\n    });\n\n    // Framework-specific metrics\n    switch (framework) {\n      case ComplianceFrameworks.HIPAA:\n        summary.complianceMetrics = {\n          patientAccesses: summary.eventsByType[AuditEventTypes.PATIENT_ACCESS] || 0,\n          dataExports: summary.eventsByType[AuditEventTypes.DATA_EXPORT] || 0,\n          unauthorizedAttempts: events.filter((e) => e.outcome === 'failure').length,\n        };\n        break;\n\n      case ComplianceFrameworks.FDA_21CFR11:\n        summary.complianceMetrics = {\n          electronicRecords: summary.eventsByType[AuditEventTypes.DATA_ENTRY] || 0,\n          recordModifications: summary.eventsByType[AuditEventTypes.DATA_MODIFICATION] || 0,\n          signedRecords: events.filter((e) => e.metadata?.signature).length,\n        };\n        break;\n\n      case ComplianceFrameworks.IEC_62304:\n        summary.complianceMetrics = {\n          softwareEvents: summary.eventsByType[AuditEventTypes.MODEL_PREDICTION] || 0,\n          systemErrors: summary.eventsByType[AuditEventTypes.SYSTEM_ERROR] || 0,\n          configurationChanges: summary.eventsByType[AuditEventTypes.CONFIGURATION_CHANGE] || 0,\n        };\n        break;\n    }\n\n    return summary;\n  }\n\n  /**\n   * Verify audit trail integrity\n   */\n  verifyIntegrity() {\n    const results = {\n      totalEvents: this.storage.getCount(),\n      verified: 0,\n      failed: 0,\n      issues: [],\n    };\n\n    this.storage.events.forEach((event) => {\n      const expectedHash = event.calculateHash();\n      if (event.hash === expectedHash) {\n        results.verified++;\n      } else {\n        results.failed++;\n        results.issues.push({\n          eventId: event.id,\n          timestamp: event.timestamp,\n          issue: 'Hash mismatch - possible tampering',\n        });\n      }\n    });\n\n    // Log integrity check\n    this.logEvent(AuditEventTypes.CONFIGURATION_CHANGE, {\n      action: 'integrity_verification',\n      resource: 'audit_trail',\n      outcome: results.failed === 0 ? 'success' : 'warning',\n      metadata: {\n        verified: results.verified,\n        failed: results.failed,\n        totalChecked: results.totalEvents,\n      },\n    });\n\n    return results;\n  }\n\n  /**\n   * Export audit trail\n   */\n  exportAuditTrail(format = 'json', options = {}) {\n    const events = this.storage.search({\n      startDate: options.startDate,\n      endDate: options.endDate,\n      eventType: options.eventType,\n      userId: options.userId,\n      patientId: options.patientId,\n    });\n\n    const exportData = {\n      metadata: {\n        exportedAt: new Date().toISOString(),\n        totalEvents: events.length,\n        period: {\n          start: options.startDate || 'beginning',\n          end: options.endDate || 'now',\n        },\n        filters: options,\n      },\n      events: events.map((event) => event.sanitize()),\n    };\n\n    // Log export\n    this.logDataExport('audit_trail', format, {\n      recordCount: events.length,\n      purpose: options.purpose || 'Compliance audit',\n    });\n\n    switch (format) {\n      case 'json':\n        return JSON.stringify(exportData, null, 2);\n\n      case 'csv':\n        return this.convertToCSV(exportData.events);\n\n      case 'xml':\n        return this.convertToXML(exportData);\n\n      default:\n        return exportData;\n    }\n  }\n\n  /**\n   * Convert events to CSV format\n   */\n  convertToCSV(events) {\n    if (events.length === 0) {\n      return '';\n    }\n\n    const headers = ['Timestamp', 'Event Type', 'User ID', 'Action', 'Resource', 'Outcome', 'Severity'];\n    const rows = [headers];\n\n    events.forEach((event) => {\n      rows.push([\n        event.timestamp,\n        event.eventType,\n        event.userId,\n        event.action || '',\n        event.resource || '',\n        event.outcome,\n        event.severity,\n      ]);\n    });\n\n    return rows.map((row) => row.map((cell) => `\"${cell}\"`).join(',')).join('\\n');\n  }\n\n  /**\n   * Convert events to XML format\n   */\n  convertToXML(exportData) {\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    xml += '<auditTrail>\\n';\n    xml += '  <metadata>\\n';\n    xml += `    <exportedAt>${exportData.metadata.exportedAt}</exportedAt>\\n`;\n    xml += `    <totalEvents>${exportData.metadata.totalEvents}</totalEvents>\\n`;\n    xml += '  </metadata>\\n';\n    xml += '  <events>\\n';\n\n    exportData.events.forEach((event) => {\n      xml += '    <event>\\n';\n      xml += `      <id>${event.id}</id>\\n`;\n      xml += `      <timestamp>${event.timestamp}</timestamp>\\n`;\n      xml += `      <eventType>${event.eventType}</eventType>\\n`;\n      xml += `      <userId>${event.userId}</userId>\\n`;\n      xml += `      <action>${event.action || ''}</action>\\n`;\n      xml += `      <resource>${event.resource || ''}</resource>\\n`;\n      xml += `      <outcome>${event.outcome}</outcome>\\n`;\n      xml += `      <severity>${event.severity}</severity>\\n`;\n      xml += '    </event>\\n';\n    });\n\n    xml += '  </events>\\n';\n    xml += '</auditTrail>';\n\n    return xml;\n  }\n\n  /**\n   * Notify critical event\n   */\n  notifyCriticalEvent(event) {\n    // (`🚨 Critical audit event: ${event.eventType} - ${event.action}`);\n\n    // In real implementation, this would trigger alerts to administrators\n    medicalEventObserver.publish(MEDICAL_EVENTS.CLINICAL_ALERT, {\n      alert: {\n        id: `audit_${event.id}`,\n        severity: { level: 'critical', icon: '🚨' },\n        title: 'Critical Audit Event',\n        message: `${event.eventType}: ${event.action}`,\n        recommendation: 'Review audit event immediately',\n      },\n      action: 'activated',\n    });\n  }\n\n  /**\n   * Get audit statistics\n   */\n  getStatistics() {\n    return this.storage.getStatistics();\n  }\n\n  /**\n   * Get current session information\n   */\n  getCurrentSession() {\n    return this.currentSession;\n  }\n\n  /**\n   * Stop audit trail system\n   */\n  stop() {\n    if (this.currentSession) {\n      this.logEvent(AuditEventTypes.USER_LOGOUT, {\n        action: 'audit_system_stopped',\n        resource: 'audit_system',\n      });\n    }\n\n    this.isActive = false;\n    // ('📋 Clinical audit trail system stopped');\n  }\n\n  /**\n   * Dispose audit trail system\n   */\n  dispose() {\n    this.stop();\n    this.storage.events.length = 0;\n    this.storage.indices.clear();\n    this.currentSession = null;\n\n    // ('📋 Clinical audit trail system disposed');\n  }\n}\n\n// Export audit trail instance\nexport const clinicalAuditTrail = new ClinicalAuditTrail();\n"],"names":["messages","I18n","savedLanguage","language","key","newLanguage","lang","date","locale","i18n","t","LegacyICHModel","age","gfapValue","scaledAge","scaledGfap","logit","rawProbability","probability","confidence","riskCategory","error","mainResults","legacyResults","mainProb","legacyProb","absoluteDifference","relativeDifference","higherRiskModel","agreement","absDiff","difference","results","testCase","result","passedTests","r","totalTests","__publicField","calculateLegacyICH","patientData","gfap","ResearchDataLogger","comparisonData","entry","stored","data","headers","rows","_a","_b","_c","_d","_e","_f","_h","_g","_j","_i","_l","_k","_n","_m","format","filename","blob","url","link","entries","differences","e","d","avgDifference","sum","sessionId","safeLogResearchData","inputs","isResearchModeEnabled","module","store","formData","renderResearchToggle","renderModelComparison","comparison","renderProbabilityBars","renderDifferenceAnalysis","renderCalculationDetails","renderModelMetrics","metadata","initializeResearchMode","closeResearch","panel","exportButton","detailsToggle","details","clearButton","ReportTypes","ReportFormats","DeliveryMethods","ClinicalReportGenerator","reportType","options","metricId","medicalPerformanceMonitor","PerformanceMetricType","template","reportContent","formattedReport","reportMetadata","medicalEventObserver","MEDICAL_EVENTS","missingData","requirement","sections","dataQuality","sectionName","section","demographics","presentation","predictions","findings","risks","risk","level","score","recommendations","recs","rec","disposition","overview","mortalityData","content","factor","functionalData","summary","requiredFields","availableFields","field","missingFields","l","html","alerts","alert","hemorrhagicData","mlResults","complicationsData","comp","ClinicalReportingSystem","schedule","scheduleId","report","deliveryMethod","deliveryOptions","deliveryItem","frequency","now","filters","history","array","item","group","totalQuality","last30Days","clinicalReportingSystem","QualityCategories","ClinicalIndicators","QualityBenchmarks","QualityMetric","indicator","category","value","timestamp","excellent","good","acceptable","isLowerBetter","QualityAggregator","metric","agg","timeKey","metricTrends","dayTrend","val","v","days","trends","i","values","sorted","a","b","mid","mean","avgSquaredDiff","QualityDashboard","aggregator","indicators","dashboard","stats","indicatorData","allMetrics","last24Hours","m","performanceScores","avgPerformance","validTrends","recent","previous","change","direction","performance","trend","summaries","points","regression","significance","n","sumX","p","sumY","sumXY","sumXX","sumYY","slope","intercept","numerator","denominator","correlation","QualityMetricsTracker","collectionPromises","collector","successful","detailed","isAppropriate","doorToNeedleTime","row","trendDirection","indicatorSummary","qualityMetricsTracker","AuditEventTypes","AuditSeverity","ComplianceFrameworks","AuditEvent","eventType","requirements","dataString","hash","char","sanitized","obj","framework","baseExport","AuditStorage","event","eventTypeIndex","userIndex","patientIndex","dateKey","dateIndex","eventsToRemove","cutoffTime","shouldKeep","eventIds","index","sanitizedEvent","predictionCache","criteria","candidateIds","firstCriteria","ids","id","events","filtered","startDate","endDate","searchTerm","eventsByType","eventsBySeverity","eventsBy日","day","ClinicalAuditTrail","form","resource","oldValue","newValue","patientId","dataType","userId","complianceEvents","expectedHash","exportData","cell","xml","clinicalAuditTrail"],"mappings":"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"}