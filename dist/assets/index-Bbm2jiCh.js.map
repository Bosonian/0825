{"version":3,"mappings":"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","names":["Store","timestamp","randomBytes","randomHex","b","listener","updates","screen","history","previousScreen","module","data","formData","errors","results","newState","eventName","store","API_URLS","CRITICAL_THRESHOLDS","GFAP_RANGES","APP_CONFIG","VALIDATION_RULES","value","diastolic","systolic","_0x4f2a","_0xc3d1","_0x8a9f","MODEL_PARAMS","k1","k2","k3","_0xTransform","x","λ","v","m","s","z","_0xe","predictLVO","gfapValue","fastEdScore","_0xg","_0xf","_0xKeys","_0x1Transform","_0xNoise1","_0x2Scaled","_0x3Scaled","_0xLogit","a","c","probability","gfapScaled","fastEdScaled","logit","riskFactors","_0xContrib","_0xThreshold","interpretLVOProbability","error","probPercent","canUseLocalModel","patientData","extractDriversFromResponse","response","predictionType","rawDrivers","_a","_b","formattedDrivers","formatDriversFromDictionary","fastEdFeature","f","drivers","positive","negative","label","weight","extractProbabilityFromResponse","extractConfidenceFromResponse","confidence","MedicalEventObserver","eventType","callback","options","observer","eventObservers","metadata","event","sensitiveFields","sanitized","field","stats","observers","MEDICAL_EVENTS","medicalEventObserver","PerformanceMetricType","MedicalPerformanceThresholds","PerformanceMetric","type","name","startTime","key","threshold","ratio","MedicalPerformanceMonitor","list","entry","metricType","metric","metricId","additionalMetadata","oldestKey","violation","currentMemory","memoryIncrease","isLeak","metrics","lastHour","recentMetrics","metricsByType","acc","report","typeMetrics","durations","grades","values","sorted","mid","grade","limit","timeframeMs","cutoff","newConfig","medicalPerformanceMonitor","CacheStorageType","CachePriority","MedicalCacheTTL","CacheEntry","ttl","priority","obj","priorityWeight","accessWeight","ageWeight","MedicalCache","storageType","cacheData","parsed","entryData","size","oldEntry","entriesCleared","lowestScore","keyToEvict","score","cleanedCount","duration","hitRate","MedicalCacheFactory","cache","__publicField","apiCache","warmUpFunctions","warmUpPromises","url","controller","timeoutId","APIError","message","status","normalizeBooleans","payload","normalized","safeParseFloat","defaultValue","createCacheKey","urlKey","payloadHash","fetchJSON","cacheable","cacheTTL","cachePriority","critical","cacheKey","cachedData","errorMessage","errorData","apiError","predictComaIch","normalizedPayload","result","predictLimitedIch","fullPayload","predictFullStroke","lvoResult","localLVO","factor","ichProbability","ichDrivers","ichConfidence","ichResult","lvoProbability","lvoDrivers","lvoConfidence","messages","I18n","savedLanguage","language","newLanguage","lang","date","locale","i18n","t","getPrerequisites","renderPrerequisitesModal","prerequisites","item","initPrerequisitesModal","modal","closeBtn","cancelBtn","confirmBtn","closeModal","navigate","e","checkboxes","allChecked","cb","warning","checkbox","showPrerequisitesModal","existingModal","modalElement","validateInput","rules","medicalWarning","validateForm","form","isValid","validationErrors","input","validationWarnings","validation","showValidationErrors","container","group","el","errorDiv","iconSpan","showValidationWarnings","warnings","warningDiv","clearValidationErrors","clearValidationWarnings","clearAllValidation","handleTriage1","isComatose","handleTriage2","isExaminable","reset","goBack","goHome","handleSubmit","firstErrorName","sr","errorCount","inputs","element","n","button","originalContent","showError","alert","h4","p","containerDiv","LegacyICHModel","age","scaledAge","scaledGfap","rawProbability","riskCategory","mainResults","legacyResults","mainProb","legacyProb","absoluteDifference","relativeDifference","higherRiskModel","agreement","absDiff","difference","testCase","passedTests","r","totalTests","calculateLegacyICH","gfap","ResearchDataLogger","comparisonData","stored","headers","rows","_c","_d","_e","_f","_h","_g","_j","_i","_l","_k","_n","_m","format","filename","blob","link","entries","differences","d","avgDifference","sum","sessionId","safeLogResearchData","isResearchModeEnabled","setResearchMode","enabled","renderResearchToggle","renderModelComparison","comparison","renderProbabilityBars","renderDifferenceAnalysis","renderCalculationDetails","renderModelMetrics","initializeResearchMode","closeResearch","panel","exportButton","detailsToggle","details","clearButton","summary","AuthenticationManager","hashedInput","validHash","hashBuffer","session","lastActivity","events","updateActivity","resolve","timeRemaining","hoursRemaining","minutesRemaining","authManager","renderProgressIndicator","currentStep","steps","html","step","index","isActive","isCompleted","renderTriage1","renderTriage2","renderComa","renderLimited","renderFull","renderCriticalAlert","FIELD_LABEL_MAP","PATTERN_REPLACEMENTS","formatDriverName","fieldName","mappedKey","translated","formatted","pattern","replacement","l","formatSummaryLabel","formatDisplayValue","renderDriversSection","ich","lvo","renderEnhancedDriversPanel","title","driversViewModel","positiveDrivers","negativeDrivers","maxWeight","totalPositiveWeight","driver","relativeImportance","barWidth","cleanLabel","totalNegativeWeight","COMPREHENSIVE_HOSPITAL_DATABASE","ROUTING_ALGORITHM","location","state","timeFromOnset","clinicalFactors","detectedState","database","destination","comprehensiveOptions","allThrombolysisCapable","strokeUnitsAndHigher","stateCenters","nearestState","minDistance","center","distance","userLocation","hospitals","hospital","point1","point2","dLat","dLng","deg","calculateDistance","lat1","lng1","lat2","lng2","toRadians","degrees","calculateTravelTime","fromLat","fromLng","toLat","toLng","profile","route","calculateEmergencyTravelTime","renderStrokeCenterMap","initializeStrokeCenterMap","useGpsButton","manualLocationButton","locationManual","locationInput","searchLocationButton","resultsContainer","requestUserLocation","geocodeLocation","showLocationError","position","latitude","longitude","showNearestCenters","locationString","coordPattern","coordMatch","lat","lng","searchLocation","supportedStates","locationName","routing","routingExplanation","getEnhancedRoutingExplanation","getStateName","allHospitals","travelInfo","alternatives","h","alt","renderEnhancedStrokeCenterCard","stateCode","ichPercent","urgencyIcon","isRecommended","capabilities","networkBadge","getRiskLevel","probabilityPercent","thresholds","VOLUME_THRESHOLDS","MORTALITY_BY_VOLUME","calculateICHVolume","cappedGfap","calculatedVolume","volumeRange","riskLevel","getVolumeRiskLevel","mortalityRate","getMortalityRate","displayVolume","volume","calculateHemorrhageSizePercent","basePercent","getVolumeColor","testVolumeCalculator","testCases","test","formatVolumeDisplay","renderBrainVisualization","dimensions","centerX","centerY","hemorrhagePercent","hemorrhageColor","maxRadius","hemorrhageRadius","hemorrhageX","hemorrhageY","referenceRadius","renderBrainOutlineWithHemorrhage","renderCompactBrainIcon","hemorrhageSize","renderCircularBrainDisplay","formattedVolume","canvasId","initializeVolumeAnimations","canvas","cssWidth","cssHeight","drawVolumeFluid","ctx","radius","animationFrame","isAnimating","isDarkMode","draw","drawFluidLayer","fillHeight","baseLevel","startX","waveOffset1","waveOffset2","y","borderColor","volumePercent","progressColor","getBrainVisualizationClasses","renderInputSummary","summaryHtml","moduleTitle","itemsHtml","displayValue","renderRiskCard","percent","isCritical","isHigh","icons","titles","level","renderICHVolumeDisplay","getCurrentGfapValue","volumeResult","renderResults","currentModule","getCurrentModuleName","calculateLegacyFromResults","getPatientInputs","isLimitedOrComa","resultsHtml","renderICHFocusedResults","renderFullModuleResults","mountIslands","__vitePreload","err","criticalAlert","ichPercentLocal","strokeCenterHtml","inputSummaryHtml","researchToggleHtml","researchComparisonHtml","alternativeDiagnosesHtml","renderComaAlternativeDiagnoses","strokeDifferentialHtml","renderStrokeDifferentialDiagnoses","renderVolumeCard","renderICHDriversOnly","renderBibliography","lvoPercent","isFullModule","hasValidLVO","showLVORiskCard","showVolumeCard","inRatioBand","showDominanceBanner","debugShowTachometer","cardCount","layoutClass","renderTachometerGauge","renderDominanceBanner","dominant","icon","dominantText","subtitle","driversData","renderCompactDriver","percentage","width","ichData","patientInputs","isDE","volumeData","diff","maxP","renderLoginScreen","initializeLoginScreen","loginForm","passwordInput","loginError","loginButton","password","showLoginError","setLoginLoading","hideLoginError","isLoading","buttonText","loadingSpinner","announceScreenChange","announcement","screenNames","setPageTitle","appName","section","focusMainHeading","heading","FastEdCalculator","total","component","applyBtn","totalElement","riskElement","currentScore","onApplyCallback","firstRadio","armWeaknessBoolean","eyeDeviationBoolean","remaining","components","assignToThis","fastEdCalculator","render","currentScreen","navigationHistory","tempContainer","backButton","restoreFormData","attachEvents","action","boolVal","printButton","fastEdInput","currentValue","armPareseField","eyeDeviationField","toggle","targetId","targetContent","arrow","MedicalServiceWorkerManager","newWorker","isOnline","registration","notification","channel","resources","OfflineInstallPrompt","swManager","banner","medicalSWManager","offlineInstallPrompt","SyncOperationType","SyncStatus","ConflictResolution","MedicalSyncOperation","entityType","entityId","MedicalSyncManager","operation","completedCount","conflictCount","operations","batchSize","i","batch","conflict","conflictResult","conflictId","resolvedData","resolutionOperation","clientData","serverData","merged","op","medicalSyncManager","LoadPriority","LoadState","LazyComponent","loader","delay","dependencyPromises","dep","LazyLoader","priorities","targetPriorities","preloadPromises","pri","componentName","pendingComponents","comp","loadPromises","scheduleNext","deadline","normalQueue","lowQueue","totalLoadTime","loadedCount","queue","MedicalComponentLoader","lazyLoader","validate","store$1","ichVolumeCalculator","lvoLocalModel","brainVisualization","strokeCenterMap","comparisonUi","dataLogger","clinicalSituation","moduleType","App","homeButton","languageToggle","darkModeToggle","researchModeToggle","helpModal","helpButton","modalClose","savedTheme","currentLang","headerTitle","emergencyBadge","modalTitle","isDark","shouldShow","researchPanel","isVisible","currentData","yearElement","criticalResources","reportType","modalContent","updateNow","updateLater","app"],"ignoreList":[],"sources":["../../src/state/store.js","../../src/config.js","../../src/logic/lvo-local-model.js","../../src/api/drivers.js","../../src/patterns/observer.js","../../src/performance/medical-performance-monitor.js","../../src/performance/medical-cache.js","../../src/api/client.js","../../src/localization/messages.js","../../src/localization/i18n.js","../../src/ui/components/prerequisites-modal.js","../../src/logic/validate.js","../../src/logic/handlers.js","../../src/research/legacy-ich-model.js","../../src/research/data-logger.js","../../src/research/comparison-ui.js","../../src/auth/authentication.js","../../src/ui/components/progress.js","../../src/ui/screens/triage1.js","../../src/ui/screens/triage2.js","../../src/ui/screens/coma.js","../../src/ui/screens/limited.js","../../src/ui/screens/full.js","../../src/ui/components/alerts.js","../../src/utils/label-formatter.js","../../src/ui/components/drivers.js","../../src/data/comprehensive-stroke-centers.js","../../src/data/stroke-centers.js","../../src/ui/components/stroke-center-map.js","../../src/logic/formatters.js","../../src/logic/ich-volume-calculator.js","../../src/ui/components/brain-visualization.js","../../src/ui/screens/results.js","../../src/ui/screens/login.js","../../src/ui/a11y.js","../../src/ui/components/fastEdModal.js","../../src/ui/render.js","../../src/workers/sw-manager.js","../../src/sync/medical-sync-manager.js","../../src/components/lazy-loader.js","../../src/main.js"],"sourcesContent":["// State management for the Stroke Triage Assistant\n\nclass Store {\n  constructor() {\n    this.state = {\n      currentScreen: 'triage1',\n      results: null,\n      sessionId: null,\n      startTime: null,\n      formData: {},\n      validationErrors: {},\n      screenHistory: [],\n    };\n\n    this.listeners = new Set();\n    this.initialize();\n  }\n\n  initialize() {\n    this.state.sessionId = this.generateSessionId();\n    this.state.startTime = Date.now();\n  }\n\n  generateSessionId() {\n    // Use cryptographically secure random values\n    const timestamp = Date.now();\n    const randomBytes = new Uint8Array(8);\n    crypto.getRandomValues(randomBytes);\n    const randomHex = Array.from(randomBytes)\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('');\n    return `session_${timestamp}_${randomHex}`;\n  }\n\n  // Subscribe to state changes\n  subscribe(listener) {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n\n  // Notify all listeners of state changes\n  notify() {\n    this.listeners.forEach((listener) => listener(this.state));\n  }\n\n  // Get current state (read-only)\n  getState() {\n    return { ...this.state };\n  }\n\n  // Update state and notify listeners\n  setState(updates) {\n    this.state = { ...this.state, ...updates };\n    this.notify();\n  }\n\n  // Navigate to a new screen\n  navigate(screen) {\n    const history = [...this.state.screenHistory];\n\n    // Add current screen to history if not already there\n    if (this.state.currentScreen !== screen && !history.includes(this.state.currentScreen)) {\n      history.push(this.state.currentScreen);\n    }\n\n    this.setState({\n      currentScreen: screen,\n      screenHistory: history,\n    });\n  }\n\n  // Navigate back to previous screen\n  goBack() {\n    const history = [...this.state.screenHistory];\n\n    if (history.length > 0) {\n      const previousScreen = history.pop();\n\n      this.setState({\n        currentScreen: previousScreen,\n        screenHistory: history,\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  // Navigate to home screen\n  goHome() {\n    this.setState({\n      currentScreen: 'triage1',\n      screenHistory: [],\n    });\n  }\n\n  // Store form data for a specific module\n  setFormData(module, data) {\n    const formData = { ...this.state.formData };\n    formData[module] = { ...data };\n    this.setState({ formData });\n  }\n\n  // Get form data for a specific module\n  getFormData(module) {\n    return this.state.formData[module] || {};\n  }\n\n  // Store validation errors\n  setValidationErrors(errors) {\n    this.setState({ validationErrors: errors });\n  }\n\n  // Clear validation errors\n  clearValidationErrors() {\n    this.setState({ validationErrors: {} });\n  }\n\n  // Store prediction results\n  setResults(results) {\n    this.setState({ results });\n  }\n\n  // Check if there's unsaved data\n  hasUnsavedData() {\n    return Object.keys(this.state.formData).length > 0 && !this.state.results;\n  }\n\n  // Reset to initial state\n  reset() {\n    const newState = {\n      currentScreen: 'triage1',\n      results: null,\n      sessionId: this.generateSessionId(),\n      startTime: Date.now(),\n      formData: {},\n      validationErrors: {},\n      screenHistory: [],\n    };\n    this.setState(newState);\n  }\n\n  // Log events for audit trail\n  logEvent(eventName, data = {}) {\n    const event = {\n      timestamp: Date.now(),\n      session: this.state.sessionId,\n      event: eventName,\n      data,\n    };\n\n    // In production, send to analytics service\n    // this.sendToAnalytics(event);\n  }\n\n  // Calculate session duration\n  getSessionDuration() {\n    return Date.now() - this.state.startTime;\n  }\n}\n\n// Create and export a singleton instance\nexport const store = new Store();\n\n// Export the Store class for testing purposes\nexport { Store };\n","// Configuration for the Stroke Triage Assistant\n\nexport const API_URLS = {\n  COMA_ICH: 'https://europe-west3-igfap-452720.cloudfunctions.net/predict_coma_ich',\n  LDM_ICH: 'https://europe-west3-igfap-452720.cloudfunctions.net/predict_limited_data_ich',\n  FULL_STROKE: 'https://europe-west3-igfap-452720.cloudfunctions.net/predict_full_stroke',\n};\n\nexport const CRITICAL_THRESHOLDS = {\n  ich: {\n    medium: 25,\n    high: 50,\n  },\n  lvo: {\n    medium: 25,\n    high: 50,\n  },\n};\n\nexport const GFAP_RANGES = {\n  min: 29,\n  max: 10001,\n  normal: 100,\n  elevated: 500,\n  critical: 1000,\n};\n\nexport const APP_CONFIG = {\n  autoSaveInterval: 180000, // 3 minutes to reduce irritating screen blinks\n  sessionTimeout: 30 * 60 * 1000, // 30 minutes\n  requestTimeout: 10000, // 10 seconds\n};\n\nexport const VALIDATION_RULES = {\n  age_years: {\n    required: true,\n    min: 0,\n    max: 120,\n    type: 'integer',\n    medicalCheck: (value) => (value < 18 ? 'Emergency stroke assessment typically for adults (≥18 years)' : null),\n  },\n  systolic_bp: {\n    required: true,\n    min: 60,\n    max: 300,\n    type: 'number',\n    medicalCheck: (value, formData) => {\n      const diastolic = formData?.diastolic_bp;\n      if (diastolic && value <= diastolic) {\n        return 'Systolic BP must be higher than diastolic BP';\n      }\n      return null;\n    },\n  },\n  diastolic_bp: {\n    required: true,\n    min: 30,\n    max: 200,\n    type: 'number',\n    medicalCheck: (value, formData) => {\n      const systolic = formData?.systolic_bp;\n      if (systolic && value >= systolic) {\n        return 'Diastolic BP must be lower than systolic BP';\n      }\n      return null;\n    },\n  },\n  gfap_value: {\n    required: true,\n    min: GFAP_RANGES.min,\n    max: GFAP_RANGES.max,\n    type: 'number',\n    medicalCheck: (value) => {\n      if (value > 8000) {\n        return 'Warning: Extremely high GFAP value - please verify lab result (still valid)';\n      }\n      return null;\n    },\n  },\n  fast_ed_score: {\n    required: true,\n    min: 0,\n    max: 9,\n    type: 'integer',\n    medicalCheck: (value) => (value >= 4 ? 'High FAST-ED score suggests LVO - consider urgent intervention' : null),\n  },\n  gcs: {\n    required: true,\n    min: 3,\n    max: 15,\n    type: 'integer',\n    medicalCheck: (value) => (value < 8 ? 'GCS < 8 indicates severe consciousness impairment - consider coma module' : null),\n  },\n};\n","/**\n * Local LVO Prediction Model\n * Proprietary algorithm for stroke assessment\n */\n\n// Obfuscated model parameters\nconst _0x4f2a = [0.4731, 0.8623, 1.8253, 3.6667, 2.3495, 1.0, 0.0];\nconst _0xc3d1 = btoa('proprietary-lvo-model-v2');\nconst _0x8a9f = (i) => _0x4f2a[i];\n\n// Encoded coefficients\nconst MODEL_PARAMS = (() => {\n  const k1 = String.fromCharCode(105, 110, 116, 101, 114, 99, 101, 112, 116);\n  const k2 = String.fromCharCode(99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115);\n  const k3 = String.fromCharCode(115, 99, 97, 108, 105, 110, 103);\n\n  return {\n    [k1]: -_0x8a9f(0),\n    [k2]: {\n      [String.fromCharCode(103, 102, 97, 112)]: -_0x8a9f(1),\n      [String.fromCharCode(102, 97, 115, 116, 69, 100)]: _0x8a9f(2),\n    },\n    [k3]: {\n      [String.fromCharCode(103, 102, 97, 112)]: {\n        [String.fromCharCode(109, 101, 97, 110)]: _0x8a9f(6),\n        [String.fromCharCode(115, 116, 100)]: _0x8a9f(5),\n      },\n      [String.fromCharCode(102, 97, 115, 116, 69, 100)]: {\n        [String.fromCharCode(109, 101, 97, 110)]: _0x8a9f(3),\n        [String.fromCharCode(115, 116, 100)]: _0x8a9f(4),\n      },\n    },\n  };\n})();\n\n// Obfuscated transformation functions\nconst _0xTransform = {\n  // YJ transform\n  _0x7b2c: (x, λ = 0) => {\n    const _0x1a = x >= 0;\n    if (_0x1a) {\n      return λ === 0 ? Math[String.fromCharCode(108, 111, 103)](x + 1)\n        : (Math[String.fromCharCode(112, 111, 119)](x + 1, λ) - 1) / λ;\n    }\n    return λ === 2 ? -Math[String.fromCharCode(108, 111, 103)](-x + 1)\n      : -(Math[String.fromCharCode(112, 111, 119)](-x + 1, 2 - λ) - 1) / (2 - λ);\n  },\n\n  // Standard scaler\n  _0x9d4e: (v, m, s) => {\n    const _0x2b = v - m;\n    return _0x2b / s;\n  },\n\n  // Sigmoid\n  _0x3f8a: (z) => {\n    const _0xe = Math[String.fromCharCode(101, 120, 112)];\n    return 1 / (1 + _0xe(-z));\n  },\n\n  // Noise function (doesn't affect result)\n  _0x5c1d: (x) => Math.sin(x * 1000) * 0 + x,\n};\n\n/**\n * Calculate LVO probability using local model\n * @param {number} gfapValue - GFAP value in pg/mL\n * @param {number} fastEdScore - FAST-ED score (0-9)\n * @returns {Object} Prediction results with probability and risk factors\n */\nexport function predictLVO(gfapValue, fastEdScore) {\n  try {\n    // Input validation\n    if (gfapValue == null || fastEdScore == null) {\n      throw new Error('Missing required inputs: GFAP and FAST-ED scores');\n    }\n\n    if (gfapValue < 0) {\n      throw new Error('GFAP value must be non-negative');\n    }\n\n    if (fastEdScore < 0 || fastEdScore > 9) {\n      throw new Error('FAST-ED score must be between 0 and 9');\n    }\n\n    // Obfuscated calculation pipeline\n    const _0xg = String.fromCharCode(103, 102, 97, 112); // 'gfap'\n    const _0xf = String.fromCharCode(102, 97, 115, 116, 69, 100); // 'fastEd'\n    const _0xKeys = {\n      i: String.fromCharCode(105, 110, 116, 101, 114, 99, 101, 112, 116),\n      c: String.fromCharCode(99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115),\n      s: String.fromCharCode(115, 99, 97, 108, 105, 110, 103),\n      m: String.fromCharCode(109, 101, 97, 110),\n      d: String.fromCharCode(115, 116, 100),\n    };\n\n    // Step 1: Obfuscated transformation\n    const _0x1Transform = _0xTransform._0x7b2c(gfapValue, 0);\n    const _0xNoise1 = _0xTransform._0x5c1d(_0x1Transform);\n\n    // Step 2: Obfuscated scaling\n    const _0x2Scaled = _0xTransform._0x9d4e(\n      _0x1Transform,\n      MODEL_PARAMS[_0xKeys.s][_0xg][_0xKeys.m],\n      MODEL_PARAMS[_0xKeys.s][_0xg][_0xKeys.d],\n    );\n\n    const _0x3Scaled = _0xTransform._0x9d4e(\n      fastEdScore,\n      MODEL_PARAMS[_0xKeys.s][_0xf][_0xKeys.m],\n      MODEL_PARAMS[_0xKeys.s][_0xf][_0xKeys.d],\n    );\n\n    // Step 3: Obfuscated logit calculation\n    const _0xLogit = (() => {\n      const a = MODEL_PARAMS[_0xKeys.i];\n      const b = MODEL_PARAMS[_0xKeys.c][_0xg] * _0x2Scaled;\n      const c = MODEL_PARAMS[_0xKeys.c][_0xf] * _0x3Scaled;\n      return a + b + c;\n    })();\n\n    // Step 4: Obfuscated probability\n    const probability = _0xTransform._0x3f8a(_0xLogit);\n\n    // Store scaled values for later use\n    const gfapScaled = _0x2Scaled;\n    const fastEdScaled = _0x3Scaled;\n    const logit = _0xLogit;\n\n    // Determine risk factors based on contributions\n    const riskFactors = [];\n\n    // Obfuscated risk factor analysis\n    const _0xContrib = {\n      f: MODEL_PARAMS[_0xKeys.c][_0xf] * fastEdScaled,\n      g: MODEL_PARAMS[_0xKeys.c][_0xg] * gfapScaled,\n    };\n\n    if (fastEdScore >= 4) {\n      riskFactors.push({\n        name: 'High FAST-ED Score',\n        value: fastEdScore,\n        impact: 'increase',\n        contribution: _0xContrib.f,\n      });\n    } else if (fastEdScore <= 2) {\n      riskFactors.push({\n        name: 'Low FAST-ED Score',\n        value: fastEdScore,\n        impact: 'decrease',\n        contribution: _0xContrib.f,\n      });\n    }\n\n    const _0xThreshold = [500, 100];\n    if (gfapValue > _0xThreshold[0]) {\n      riskFactors.push({\n        name: 'Elevated GFAP',\n        value: `${Math.round(gfapValue)} pg/mL`,\n        impact: 'decrease',\n        contribution: _0xContrib.g,\n        note: 'May indicate hemorrhagic vs ischemic event',\n      });\n    } else if (gfapValue < _0xThreshold[1]) {\n      riskFactors.push({\n        name: 'Low GFAP',\n        value: `${Math.round(gfapValue)} pg/mL`,\n        impact: 'increase',\n        contribution: Math.abs(_0xContrib.g),\n        note: 'Consistent with ischemic LVO',\n      });\n    }\n\n    // Sort risk factors by absolute contribution\n    riskFactors.sort((a, b) => Math.abs(b.contribution) - Math.abs(a.contribution));\n\n    return {\n      probability,\n      riskLevel: probability > 0.7 ? 'high' : probability > 0.4 ? 'moderate' : 'low',\n      model: atob(_0xc3d1).replace('proprietary-', '').replace('-v2', ''),\n      inputs: {\n        [_0xg]: gfapValue,\n        [_0xf]: fastEdScore,\n      },\n      scaledInputs: {\n        [_0xg]: _0x2Scaled,\n        [_0xf]: _0x3Scaled,\n      },\n      logit: _0xLogit,\n      riskFactors,\n      interpretation: interpretLVOProbability(probability, fastEdScore, gfapValue),\n    };\n  } catch (error) {\n    console.error('LVO prediction error:', error);\n    return {\n      probability: null,\n      error: error.message,\n      model: 'Local LVO Model v2',\n    };\n  }\n}\n\n/**\n * Provide clinical interpretation of LVO probability\n * @param {number} probability - LVO probability\n * @param {number} fastEdScore - FAST-ED score\n * @param {number} gfapValue - GFAP value\n * @returns {string} Clinical interpretation\n */\nfunction interpretLVOProbability(probability, fastEdScore, gfapValue) {\n  const probPercent = Math.round(probability * 100);\n\n  if (probability > 0.7) {\n    if (fastEdScore >= 6) {\n      return `High probability of LVO (${probPercent}%). FAST-ED score of ${fastEdScore} strongly suggests large vessel occlusion. Consider immediate thrombectomy evaluation.`;\n    }\n    return `High probability of LVO (${probPercent}%). Despite moderate FAST-ED score, biomarker pattern suggests large vessel occlusion.`;\n  } if (probability > 0.4) {\n    if (gfapValue > 500) {\n      return `Moderate LVO probability (${probPercent}%). Elevated GFAP (${gfapValue.toFixed(0)} pg/mL) may indicate hemorrhagic component. Further imaging recommended.`;\n    }\n    return `Moderate LVO probability (${probPercent}%). Clinical correlation and vascular imaging recommended.`;\n  }\n  if (fastEdScore <= 3) {\n    return `Low probability of LVO (${probPercent}%). FAST-ED score of ${fastEdScore} suggests small vessel disease or non-vascular etiology.`;\n  }\n  return `Low probability of LVO (${probPercent}%) despite FAST-ED score. Consider alternative diagnoses.`;\n}\n\n/**\n * Validate if local model should be used\n * @param {Object} patientData - Patient data object\n * @returns {boolean} True if local model can be used\n */\nexport function canUseLocalModel(patientData) {\n  return patientData?.gfapValue != null\n         && patientData?.fastEdScore != null\n         && patientData?.gfapValue >= 0\n         && patientData?.fastEdScore >= 0\n         && patientData?.fastEdScore <= 9;\n}\n","// Clean driver extraction - ensuring LVO drivers come from LVO API, ICH from ICH API\n\n/**\n * Extract and format drivers from new backend flat dictionary format\n */\nexport function extractDriversFromResponse(response, predictionType) {\n  console.log(`=== EXTRACTING ${predictionType.toUpperCase()} DRIVERS ===`);\n\n  let rawDrivers = null;\n\n  if (predictionType === 'ICH') {\n    rawDrivers = response.ich_prediction?.drivers || null;\n  } else if (predictionType === 'LVO') {\n    rawDrivers = response.lvo_prediction?.drivers || null;\n  }\n\n  if (!rawDrivers) {\n    console.log(`❌ No ${predictionType} drivers found`);\n    return null;\n  }\n\n  // Convert flat dictionary to structured format\n  const formattedDrivers = formatDriversFromDictionary(rawDrivers, predictionType);\n\n  // Check for FAST-ED specifically\n  const allFeatures = [...formattedDrivers.positive, ...formattedDrivers.negative];\n  const fastEdFeature = allFeatures.find((f) => f.label && (\n    f.label.toLowerCase().includes('fast')\n      || f.label.includes('fast_ed')\n  ));\n\n  if (fastEdFeature) {\n    console.log(`🎯 FAST-ED found in ${predictionType}:`, `${fastEdFeature.label}: ${fastEdFeature.weight > 0 ? '+' : ''}${fastEdFeature.weight.toFixed(4)}`);\n  } else {\n    console.log(`⚠️  FAST-ED NOT found in ${predictionType} drivers`);\n  }\n\n  return formattedDrivers;\n}\n\n/**\n * Convert backend flat dictionary to structured positive/negative arrays\n */\nfunction formatDriversFromDictionary(drivers, predictionType) {\n  const positive = [];\n  const negative = [];\n\n  Object.entries(drivers).forEach(([label, weight]) => {\n    if (typeof weight === 'number') {\n      if (weight > 0) {\n        positive.push({ label, weight });\n      } else if (weight < 0) {\n        negative.push({ label, weight: Math.abs(weight) }); // Store as positive value\n      }\n      // Skip zero weights\n    }\n  });\n\n  // Sort by weight (descending)\n  positive.sort((a, b) => b.weight - a.weight);\n  negative.sort((a, b) => b.weight - a.weight);\n\n  return {\n    kind: 'flat_dictionary',\n    units: 'logit',\n    positive,\n    negative,\n    meta: {},\n  };\n}\n\n/**\n * Clean probability extraction with source tracking\n */\nexport function extractProbabilityFromResponse(response, predictionType) {\n  console.log(`=== EXTRACTING ${predictionType.toUpperCase()} PROBABILITY ===`);\n\n  let probability = 0;\n\n  if (predictionType === 'ICH') {\n    probability = response.ich_prediction?.probability || 0;\n  } else if (predictionType === 'LVO') {\n    probability = response.lvo_prediction?.probability || 0;\n  }\n\n  return probability;\n}\n\n/**\n * Clean confidence extraction with source tracking\n */\nexport function extractConfidenceFromResponse(response, predictionType) {\n  let confidence = 0.85; // default\n\n  if (predictionType === 'ICH') {\n    confidence = response.ich_prediction?.confidence || 0.85;\n  } else if (predictionType === 'LVO') {\n    confidence = response.lvo_prediction?.confidence || 0.85;\n  }\n\n  return confidence;\n}\n","/**\n * Observer Pattern Implementation for Medical Event Management\n * iGFAP Stroke Triage Assistant - Enterprise Architecture\n *\n * Provides secure, type-safe event handling for medical applications\n */\n\nexport class MedicalEventObserver {\n  constructor() {\n    this.observers = new Map();\n    this.eventHistory = [];\n    this.maxHistorySize = 1000;\n  }\n\n  /**\n   * Subscribe to medical events with validation\n   * @param {string} eventType - Medical event type\n   * @param {Function} callback - Observer callback function\n   * @param {Object} options - Observer options\n   * @returns {Function} Unsubscribe function\n   */\n  subscribe(eventType, callback, options = {}) {\n    if (typeof callback !== 'function') {\n      throw new Error('Observer callback must be a function');\n    }\n\n    if (!this.observers.has(eventType)) {\n      this.observers.set(eventType, new Set());\n    }\n\n    const observer = {\n      callback,\n      id: `obs_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      priority: options.priority || 0,\n      once: options.once || false,\n      medicalContext: options.medicalContext || null,\n    };\n\n    this.observers.get(eventType).add(observer);\n\n    // Return unsubscribe function\n    return () => {\n      const eventObservers = this.observers.get(eventType);\n      if (eventObservers) {\n        eventObservers.delete(observer);\n        if (eventObservers.size === 0) {\n          this.observers.delete(eventType);\n        }\n      }\n    };\n  }\n\n  /**\n   * Publish medical events with safety checks\n   * @param {string} eventType - Medical event type\n   * @param {Object} data - Event data\n   * @param {Object} metadata - Event metadata\n   */\n  publish(eventType, data = {}, metadata = {}) {\n    const eventObservers = this.observers.get(eventType);\n    if (!eventObservers || eventObservers.size === 0) {\n      return;\n    }\n\n    const event = {\n      type: eventType,\n      data: this.sanitizeEventData(data),\n      metadata: {\n        timestamp: new Date().toISOString(),\n        source: 'MedicalEventObserver',\n        ...metadata,\n      },\n      id: `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    };\n\n    // Log event for medical audit trail\n    this.logEvent(event);\n\n    // Sort observers by priority (higher priority first)\n    const sortedObservers = Array.from(eventObservers).sort((a, b) => b.priority - a.priority);\n\n    // Notify observers with error handling\n    sortedObservers.forEach((observer) => {\n      try {\n        observer.callback(event);\n\n        // Remove one-time observers\n        if (observer.once) {\n          eventObservers.delete(observer);\n        }\n      } catch (error) {\n        console.error(`Medical observer error for event ${eventType}:`, error);\n        // Don't propagate observer errors to prevent cascade failures\n      }\n    });\n  }\n\n  /**\n   * Sanitize event data to prevent sensitive information leakage\n   * @param {Object} data - Raw event data\n   * @returns {Object} Sanitized data\n   */\n  sanitizeEventData(data) {\n    const sensitiveFields = ['password', 'ssn', 'medical_record_number', 'patient_id'];\n    const sanitized = { ...data };\n\n    sensitiveFields.forEach((field) => {\n      if (sanitized[field]) {\n        sanitized[field] = '[REDACTED]';\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Log event for medical audit trail\n   * @param {Object} event - Event to log\n   */\n  logEvent(event) {\n    this.eventHistory.push({\n      ...event,\n      loggedAt: new Date().toISOString(),\n    });\n\n    // Maintain history size limit\n    if (this.eventHistory.length > this.maxHistorySize) {\n      this.eventHistory.shift();\n    }\n  }\n\n  /**\n   * Get event history for audit purposes\n   * @param {string} eventType - Optional event type filter\n   * @returns {Array} Event history\n   */\n  getEventHistory(eventType = null) {\n    if (eventType) {\n      return this.eventHistory.filter((event) => event.type === eventType);\n    }\n    return [...this.eventHistory];\n  }\n\n  /**\n   * Clear all observers and history (for privacy compliance)\n   */\n  clearAll() {\n    this.observers.clear();\n    this.eventHistory = [];\n  }\n\n  /**\n   * Get observer statistics for monitoring\n   * @returns {Object} Observer statistics\n   */\n  getStats() {\n    const stats = {\n      totalEventTypes: this.observers.size,\n      totalObservers: 0,\n      eventHistory: this.eventHistory.length,\n      eventTypes: {},\n    };\n\n    this.observers.forEach((observers, eventType) => {\n      stats.totalObservers += observers.size;\n      stats.eventTypes[eventType] = observers.size;\n    });\n\n    return stats;\n  }\n}\n\n// Medical event types constants\nexport const MEDICAL_EVENTS = {\n  // Patient data events\n  PATIENT_DATA_UPDATED: 'patient_data_updated',\n  VALIDATION_ERROR: 'validation_error',\n  VALIDATION_SUCCESS: 'validation_success',\n\n  // Clinical workflow events\n  TRIAGE_COMPLETED: 'triage_completed',\n  ASSESSMENT_STARTED: 'assessment_started',\n  RESULTS_GENERATED: 'results_generated',\n\n  // System events\n  PERFORMANCE_WARNING: 'performance_warning',\n  SECURITY_EVENT: 'security_event',\n  AUDIT_EVENT: 'audit_event',\n\n  // User interaction events\n  FORM_SUBMITTED: 'form_submitted',\n  NAVIGATION_CHANGED: 'navigation_changed',\n  SESSION_TIMEOUT: 'session_timeout',\n};\n\n// Export singleton instance\nexport const medicalEventObserver = new MedicalEventObserver();","/**\n * Medical Performance Monitoring System\n * iGFAP Stroke Triage Assistant - Enterprise Performance Architecture\n *\n * Provides comprehensive performance monitoring for medical software compliance\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\n\n/**\n * Performance metric types for medical applications\n */\nexport const PerformanceMetricType = {\n  API_CALL: 'api_call',\n  VALIDATION: 'validation',\n  PREDICTION: 'prediction',\n  RENDER: 'render',\n  USER_INTERACTION: 'user_interaction',\n  MEMORY: 'memory',\n  NETWORK: 'network',\n  CACHE: 'cache',\n};\n\n/**\n * Performance thresholds for medical critical operations\n */\nexport const MedicalPerformanceThresholds = {\n  CRITICAL_API_RESPONSE: 3000, // 3 seconds max for critical medical APIs\n  VALIDATION_RESPONSE: 100, // 100ms max for form validation\n  PREDICTION_RESPONSE: 5000, // 5 seconds max for ML predictions\n  UI_RENDER: 16, // 16ms for 60fps smooth UI\n  USER_INTERACTION: 100, // 100ms max for immediate feedback\n  MEMORY_LEAK_THRESHOLD: 50 * 1024 * 1024, // 50MB memory increase\n};\n\n/**\n * Performance metric data structure\n */\nclass PerformanceMetric {\n  constructor(type, name, startTime = performance.now()) {\n    this.type = type;\n    this.name = name;\n    this.startTime = startTime;\n    this.endTime = null;\n    this.duration = null;\n    this.metadata = {};\n    this.id = `perf_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    this.timestamp = new Date().toISOString();\n  }\n\n  /**\n   * Mark the end of the performance measurement\n   */\n  end() {\n    this.endTime = performance.now();\n    this.duration = this.endTime - this.startTime;\n    return this;\n  }\n\n  /**\n   * Add metadata to the metric\n   */\n  addMetadata(key, value) {\n    this.metadata[key] = value;\n    return this;\n  }\n\n  /**\n   * Check if metric exceeds threshold\n   */\n  exceedsThreshold() {\n    const threshold = MedicalPerformanceThresholds[this.getThresholdKey()];\n    return threshold && this.duration > threshold;\n  }\n\n  /**\n   * Get the appropriate threshold key for this metric\n   */\n  getThresholdKey() {\n    switch (this.type) {\n      case PerformanceMetricType.API_CALL:\n        return this.metadata.critical ? 'CRITICAL_API_RESPONSE' : 'PREDICTION_RESPONSE';\n      case PerformanceMetricType.VALIDATION:\n        return 'VALIDATION_RESPONSE';\n      case PerformanceMetricType.PREDICTION:\n        return 'PREDICTION_RESPONSE';\n      case PerformanceMetricType.RENDER:\n        return 'UI_RENDER';\n      case PerformanceMetricType.USER_INTERACTION:\n        return 'USER_INTERACTION';\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Get performance grade based on thresholds\n   */\n  getPerformanceGrade() {\n    const threshold = MedicalPerformanceThresholds[this.getThresholdKey()];\n    if (!threshold) return 'N/A';\n\n    const ratio = this.duration / threshold;\n    if (ratio <= 0.5) return 'EXCELLENT';\n    if (ratio <= 0.75) return 'GOOD';\n    if (ratio <= 1.0) return 'ACCEPTABLE';\n    if (ratio <= 1.5) return 'WARNING';\n    return 'CRITICAL';\n  }\n}\n\n/**\n * Medical Performance Monitor for enterprise-grade monitoring\n */\nexport class MedicalPerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.activeMetrics = new Map();\n    this.memoryBaseline = null;\n    this.performanceObserver = null;\n    this.isMonitoring = false;\n    this.reportingInterval = null;\n    this.config = {\n      reportingIntervalMs: 30000, // Report every 30 seconds\n      maxMetricsRetention: 1000, // Keep last 1000 metrics\n      enableMemoryMonitoring: true,\n      enableNetworkMonitoring: true,\n      enableUserTimingAPI: true,\n    };\n  }\n\n  /**\n   * Start performance monitoring\n   */\n  start() {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n    this.memoryBaseline = this.getMemoryUsage();\n\n    // Initialize Performance Observer API if available\n    if (window.PerformanceObserver) {\n      this.initializePerformanceObserver();\n    }\n\n    // Start periodic reporting\n    this.reportingInterval = setInterval(() => {\n      this.generatePerformanceReport();\n    }, this.config.reportingIntervalMs);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'performance_monitoring_started',\n      memoryBaseline: this.memoryBaseline,\n    });\n  }\n\n  /**\n   * Stop performance monitoring\n   */\n  stop() {\n    if (!this.isMonitoring) return;\n\n    this.isMonitoring = false;\n\n    if (this.performanceObserver) {\n      this.performanceObserver.disconnect();\n      this.performanceObserver = null;\n    }\n\n    if (this.reportingInterval) {\n      clearInterval(this.reportingInterval);\n      this.reportingInterval = null;\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'performance_monitoring_stopped',\n      totalMetrics: this.metrics.size,\n    });\n  }\n\n  /**\n   * Initialize Performance Observer for automatic metric collection\n   */\n  initializePerformanceObserver() {\n    try {\n      this.performanceObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          this.recordPerformanceEntry(entry);\n        });\n      });\n\n      // Observe different types of performance entries\n      this.performanceObserver.observe({ entryTypes: ['measure', 'navigation', 'resource'] });\n    } catch (error) {\n      console.warn('Performance Observer not supported:', error.message);\n    }\n  }\n\n  /**\n   * Record performance entry from Performance Observer\n   */\n  recordPerformanceEntry(entry) {\n    let metricType = PerformanceMetricType.NETWORK;\n    let name = entry.name;\n\n    // Categorize based on entry type\n    switch (entry.entryType) {\n      case 'navigation':\n        metricType = PerformanceMetricType.RENDER;\n        name = 'page_load';\n        break;\n      case 'resource':\n        metricType = entry.name.includes('/api/') ? PerformanceMetricType.API_CALL : PerformanceMetricType.NETWORK;\n        break;\n      case 'measure':\n        metricType = this.categorizeUserMeasure(entry.name);\n        break;\n    }\n\n    const metric = new PerformanceMetric(metricType, name, entry.startTime);\n    metric.end();\n    metric.duration = entry.duration;\n    metric.addMetadata('entryType', entry.entryType);\n\n    this.storeMetric(metric);\n  }\n\n  /**\n   * Categorize user-defined measures\n   */\n  categorizeUserMeasure(name) {\n    if (name.includes('validation')) return PerformanceMetricType.VALIDATION;\n    if (name.includes('prediction')) return PerformanceMetricType.PREDICTION;\n    if (name.includes('render')) return PerformanceMetricType.RENDER;\n    if (name.includes('api')) return PerformanceMetricType.API_CALL;\n    return PerformanceMetricType.USER_INTERACTION;\n  }\n\n  /**\n   * Start measuring a performance metric\n   */\n  startMeasurement(type, name, metadata = {}) {\n    const metric = new PerformanceMetric(type, name);\n\n    // Add initial metadata\n    Object.entries(metadata).forEach(([key, value]) => {\n      metric.addMetadata(key, value);\n    });\n\n    this.activeMetrics.set(metric.id, metric);\n\n    // Also use User Timing API if enabled and available\n    if (this.config.enableUserTimingAPI && performance.mark) {\n      performance.mark(`${name}_start`);\n    }\n\n    return metric.id;\n  }\n\n  /**\n   * End measuring a performance metric\n   */\n  endMeasurement(metricId, additionalMetadata = {}) {\n    const metric = this.activeMetrics.get(metricId);\n    if (!metric) {\n      console.warn(`Performance metric ${metricId} not found`);\n      return null;\n    }\n\n    metric.end();\n\n    // Add additional metadata\n    Object.entries(additionalMetadata).forEach(([key, value]) => {\n      metric.addMetadata(key, value);\n    });\n\n    // Use User Timing API if enabled\n    if (this.config.enableUserTimingAPI && performance.mark && performance.measure) {\n      try {\n        performance.mark(`${metric.name}_end`);\n        performance.measure(metric.name, `${metric.name}_start`, `${metric.name}_end`);\n      } catch (error) {\n        console.warn('Error creating performance measure:', error.message);\n      }\n    }\n\n    this.activeMetrics.delete(metricId);\n    this.storeMetric(metric);\n\n    // Check for performance violations\n    if (metric.exceedsThreshold()) {\n      this.handlePerformanceViolation(metric);\n    }\n\n    return metric;\n  }\n\n  /**\n   * Store metric with retention limits\n   */\n  storeMetric(metric) {\n    this.metrics.set(metric.id, metric);\n\n    // Implement retention policy\n    if (this.metrics.size > this.config.maxMetricsRetention) {\n      const oldestKey = this.metrics.keys().next().value;\n      this.metrics.delete(oldestKey);\n    }\n\n    // Publish metric event\n    medicalEventObserver.publish(MEDICAL_EVENTS.PERFORMANCE_METRIC, {\n      metric: {\n        id: metric.id,\n        type: metric.type,\n        name: metric.name,\n        duration: metric.duration,\n        grade: metric.getPerformanceGrade(),\n        exceedsThreshold: metric.exceedsThreshold(),\n      },\n    });\n  }\n\n  /**\n   * Handle performance violations\n   */\n  handlePerformanceViolation(metric) {\n    const violation = {\n      metricId: metric.id,\n      type: metric.type,\n      name: metric.name,\n      duration: metric.duration,\n      threshold: MedicalPerformanceThresholds[metric.getThresholdKey()],\n      grade: metric.getPerformanceGrade(),\n      metadata: metric.metadata,\n    };\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.PERFORMANCE_VIOLATION, violation);\n\n    // Log critical violations\n    if (metric.getPerformanceGrade() === 'CRITICAL') {\n      console.error('CRITICAL PERFORMANCE VIOLATION:', violation);\n    }\n  }\n\n  /**\n   * Get current memory usage\n   */\n  getMemoryUsage() {\n    if (performance.memory) {\n      return {\n        usedJSHeapSize: performance.memory.usedJSHeapSize,\n        totalJSHeapSize: performance.memory.totalJSHeapSize,\n        jsHeapSizeLimit: performance.memory.jsHeapSizeLimit,\n        timestamp: Date.now(),\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Check for memory leaks\n   */\n  checkMemoryLeaks() {\n    if (!this.config.enableMemoryMonitoring || !this.memoryBaseline) {\n      return null;\n    }\n\n    const currentMemory = this.getMemoryUsage();\n    if (!currentMemory) return null;\n\n    const memoryIncrease = currentMemory.usedJSHeapSize - this.memoryBaseline.usedJSHeapSize;\n    const isLeak = memoryIncrease > MedicalPerformanceThresholds.MEMORY_LEAK_THRESHOLD;\n\n    if (isLeak) {\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'memory_leak_detected',\n        memoryIncrease,\n        baseline: this.memoryBaseline.usedJSHeapSize,\n        current: currentMemory.usedJSHeapSize,\n      });\n    }\n\n    return {\n      memoryIncrease,\n      isLeak,\n      baseline: this.memoryBaseline,\n      current: currentMemory,\n    };\n  }\n\n  /**\n   * Generate comprehensive performance report\n   */\n  generatePerformanceReport() {\n    const metrics = Array.from(this.metrics.values());\n    const now = Date.now();\n    const lastHour = now - (60 * 60 * 1000);\n\n    // Filter metrics from last hour\n    const recentMetrics = metrics.filter(m => new Date(m.timestamp).getTime() > lastHour);\n\n    // Group by type\n    const metricsByType = recentMetrics.reduce((acc, metric) => {\n      if (!acc[metric.type]) {\n        acc[metric.type] = [];\n      }\n      acc[metric.type].push(metric);\n      return acc;\n    }, {});\n\n    // Calculate statistics\n    const report = {\n      timestamp: new Date().toISOString(),\n      timeframe: 'last_hour',\n      totalMetrics: recentMetrics.length,\n      memoryStatus: this.checkMemoryLeaks(),\n      metricsByType: {},\n      violations: recentMetrics.filter(m => m.exceedsThreshold()).length,\n      topSlowOperations: this.getTopSlowOperations(recentMetrics),\n    };\n\n    // Calculate statistics for each type\n    Object.entries(metricsByType).forEach(([type, typeMetrics]) => {\n      const durations = typeMetrics.map(m => m.duration);\n      const grades = typeMetrics.map(m => m.getPerformanceGrade());\n\n      report.metricsByType[type] = {\n        count: typeMetrics.length,\n        averageDuration: durations.reduce((a, b) => a + b, 0) / durations.length,\n        medianDuration: this.calculateMedian(durations),\n        minDuration: Math.min(...durations),\n        maxDuration: Math.max(...durations),\n        violations: typeMetrics.filter(m => m.exceedsThreshold()).length,\n        gradeDistribution: this.calculateGradeDistribution(grades),\n      };\n    });\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.PERFORMANCE_REPORT, report);\n\n    return report;\n  }\n\n  /**\n   * Calculate median value\n   */\n  calculateMedian(values) {\n    const sorted = [...values].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 0\n      ? (sorted[mid - 1] + sorted[mid]) / 2\n      : sorted[mid];\n  }\n\n  /**\n   * Calculate grade distribution\n   */\n  calculateGradeDistribution(grades) {\n    return grades.reduce((acc, grade) => {\n      acc[grade] = (acc[grade] || 0) + 1;\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Get top slow operations\n   */\n  getTopSlowOperations(metrics, limit = 10) {\n    return metrics\n      .sort((a, b) => b.duration - a.duration)\n      .slice(0, limit)\n      .map(m => ({\n        name: m.name,\n        type: m.type,\n        duration: m.duration,\n        grade: m.getPerformanceGrade(),\n        timestamp: m.timestamp,\n      }));\n  }\n\n  /**\n   * Get performance statistics for specific type\n   */\n  getTypeStatistics(type, timeframeMs = 60 * 60 * 1000) {\n    const now = Date.now();\n    const cutoff = now - timeframeMs;\n\n    const typeMetrics = Array.from(this.metrics.values())\n      .filter(m => m.type === type && new Date(m.timestamp).getTime() > cutoff);\n\n    if (typeMetrics.length === 0) {\n      return null;\n    }\n\n    const durations = typeMetrics.map(m => m.duration);\n    return {\n      type,\n      count: typeMetrics.length,\n      averageDuration: durations.reduce((a, b) => a + b, 0) / durations.length,\n      medianDuration: this.calculateMedian(durations),\n      minDuration: Math.min(...durations),\n      maxDuration: Math.max(...durations),\n      violations: typeMetrics.filter(m => m.exceedsThreshold()).length,\n    };\n  }\n\n  /**\n   * Clear all metrics (privacy compliance)\n   */\n  clearMetrics() {\n    this.metrics.clear();\n    this.activeMetrics.clear();\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'performance_metrics_cleared',\n    });\n  }\n\n  /**\n   * Get monitor configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  /**\n   * Update monitor configuration\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n\n    // Restart reporting interval if changed\n    if (newConfig.reportingIntervalMs && this.reportingInterval) {\n      clearInterval(this.reportingInterval);\n      this.reportingInterval = setInterval(() => {\n        this.generatePerformanceReport();\n      }, this.config.reportingIntervalMs);\n    }\n  }\n}\n\n// Export singleton instance\nexport const medicalPerformanceMonitor = new MedicalPerformanceMonitor();","/**\n * Medical Data Caching System\n * iGFAP Stroke Triage Assistant - Enterprise Caching Architecture\n *\n * Provides HIPAA-compliant caching with TTL and secure data handling\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\nimport { medicalPerformanceMonitor, PerformanceMetricType } from './medical-performance-monitor.js';\n\n/**\n * Cache storage types for different data sensitivity levels\n */\nexport const CacheStorageType = {\n  MEMORY: 'memory',\n  SESSION: 'session',\n  LOCAL: 'local',\n  INDEXED_DB: 'indexed_db',\n};\n\n/**\n * Cache entry priorities for medical data\n */\nexport const CachePriority = {\n  CRITICAL: 'critical', // Emergency data, never evict\n  HIGH: 'high', // Important medical data\n  NORMAL: 'normal', // Standard application data\n  LOW: 'low', // Non-critical data, evict first\n};\n\n/**\n * Default TTL values for different types of medical data (in milliseconds)\n */\nexport const MedicalCacheTTL = {\n  PATIENT_DATA: 30 * 60 * 1000, // 30 minutes\n  PREDICTION_RESULTS: 60 * 60 * 1000, // 1 hour\n  VALIDATION_RULES: 24 * 60 * 60 * 1000, // 24 hours\n  API_RESPONSES: 15 * 60 * 1000, // 15 minutes\n  UI_STATE: 10 * 60 * 1000, // 10 minutes\n  STATIC_CONFIG: 7 * 24 * 60 * 60 * 1000, // 7 days\n};\n\n/**\n * Cache entry with metadata and security features\n */\nclass CacheEntry {\n  constructor(key, value, ttl, priority = CachePriority.NORMAL, metadata = {}) {\n    this.key = key;\n    this.value = this.sanitizeValue(value);\n    this.ttl = ttl;\n    this.priority = priority;\n    this.metadata = {\n      ...metadata,\n      createdAt: Date.now(),\n      accessCount: 0,\n      lastAccessed: Date.now(),\n    };\n    this.expiresAt = ttl > 0 ? Date.now() + ttl : null;\n    this.encrypted = false;\n  }\n\n  /**\n   * Sanitize sensitive data before caching\n   */\n  sanitizeValue(value) {\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n\n    // Deep clone to avoid reference issues\n    const sanitized = JSON.parse(JSON.stringify(value));\n\n    // Remove or mask sensitive fields\n    const sensitiveFields = ['ssn', 'mrn', 'patient_id', 'user_id', 'session_token'];\n    this.removeSensitiveFields(sanitized, sensitiveFields);\n\n    return sanitized;\n  }\n\n  /**\n   * Recursively remove sensitive fields\n   */\n  removeSensitiveFields(obj, sensitiveFields) {\n    Object.keys(obj).forEach((key) => {\n      if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\n        obj[key] = '[REDACTED]';\n      } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n        this.removeSensitiveFields(obj[key], sensitiveFields);\n      }\n    });\n  }\n\n  /**\n   * Check if cache entry has expired\n   */\n  isExpired() {\n    return this.expiresAt !== null && Date.now() > this.expiresAt;\n  }\n\n  /**\n   * Mark entry as accessed\n   */\n  markAccessed() {\n    this.metadata.accessCount += 1;\n    this.metadata.lastAccessed = Date.now();\n  }\n\n  /**\n   * Get entry age in milliseconds\n   */\n  getAge() {\n    return Date.now() - this.metadata.createdAt;\n  }\n\n  /**\n   * Get time until expiration\n   */\n  getTimeToExpiration() {\n    if (this.expiresAt === null) return Infinity;\n    return Math.max(0, this.expiresAt - Date.now());\n  }\n\n  /**\n   * Calculate entry score for eviction (lower score = evict first)\n   */\n  getEvictionScore() {\n    const priorityWeights = {\n      [CachePriority.CRITICAL]: 1000,\n      [CachePriority.HIGH]: 100,\n      [CachePriority.NORMAL]: 10,\n      [CachePriority.LOW]: 1,\n    };\n\n    const priorityWeight = priorityWeights[this.priority] || 1;\n    const accessWeight = Math.log(this.metadata.accessCount + 1);\n    const ageWeight = 1 / (this.getAge() + 1);\n\n    return priorityWeight * accessWeight * ageWeight;\n  }\n}\n\n/**\n * Medical Cache Manager with HIPAA compliance\n */\nexport class MedicalCache {\n  constructor(storageType = CacheStorageType.MEMORY, options = {}) {\n    this.storageType = storageType;\n    this.options = {\n      maxSize: 100 * 1024 * 1024, // 100MB max cache size\n      maxEntries: 1000, // Maximum number of entries\n      cleanupInterval: 5 * 60 * 1000, // Cleanup every 5 minutes\n      enableEncryption: false, // Enable for sensitive data\n      enableMetrics: true,\n      ...options,\n    };\n\n    this.cache = new Map();\n    this.cleanupTimer = null;\n    this.totalSize = 0;\n    this.hitCount = 0;\n    this.missCount = 0;\n    this.evictionCount = 0;\n\n    this.initializeStorage();\n    this.startCleanupTimer();\n  }\n\n  /**\n   * Initialize storage backend\n   */\n  initializeStorage() {\n    switch (this.storageType) {\n      case CacheStorageType.SESSION:\n        this.storage = sessionStorage;\n        this.loadFromStorage();\n        break;\n      case CacheStorageType.LOCAL:\n        this.storage = localStorage;\n        this.loadFromStorage();\n        break;\n      case CacheStorageType.INDEXED_DB:\n        this.initializeIndexedDB();\n        break;\n      default:\n        this.storage = null; // Memory only\n    }\n  }\n\n  /**\n   * Load cache from storage\n   */\n  loadFromStorage() {\n    if (!this.storage) return;\n\n    try {\n      const cacheData = this.storage.getItem('medical_cache');\n      if (cacheData) {\n        const parsed = JSON.parse(cacheData);\n        Object.entries(parsed).forEach(([key, entryData]) => {\n          const entry = new CacheEntry(\n            entryData.key,\n            entryData.value,\n            entryData.ttl,\n            entryData.priority,\n            entryData.metadata\n          );\n          entry.expiresAt = entryData.expiresAt;\n\n          if (!entry.isExpired()) {\n            this.cache.set(key, entry);\n            this.totalSize += this.calculateSize(entry.value);\n          }\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to load cache from storage:', error.message);\n    }\n  }\n\n  /**\n   * Save cache to storage\n   */\n  saveToStorage() {\n    if (!this.storage) return;\n\n    try {\n      const cacheData = {};\n      this.cache.forEach((entry, key) => {\n        cacheData[key] = {\n          key: entry.key,\n          value: entry.value,\n          ttl: entry.ttl,\n          priority: entry.priority,\n          metadata: entry.metadata,\n          expiresAt: entry.expiresAt,\n        };\n      });\n\n      this.storage.setItem('medical_cache', JSON.stringify(cacheData));\n    } catch (error) {\n      console.warn('Failed to save cache to storage:', error.message);\n    }\n  }\n\n  /**\n   * Initialize IndexedDB for large data caching\n   */\n  async initializeIndexedDB() {\n    // IndexedDB implementation for future enhancement\n    console.log('IndexedDB cache initialization planned for future implementation');\n  }\n\n  /**\n   * Set cache entry\n   */\n  set(key, value, ttl = MedicalCacheTTL.API_RESPONSES, priority = CachePriority.NORMAL, metadata = {}) {\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.CACHE,\n      'cache_set',\n      { key, priority }\n    );\n\n    try {\n      // Check if we need to make space\n      this.ensureCapacity();\n\n      const entry = new CacheEntry(key, value, ttl, priority, metadata);\n      const size = this.calculateSize(value);\n\n      // Remove existing entry if present\n      if (this.cache.has(key)) {\n        const oldEntry = this.cache.get(key);\n        this.totalSize -= this.calculateSize(oldEntry.value);\n      }\n\n      this.cache.set(key, entry);\n      this.totalSize += size;\n\n      // Save to persistent storage\n      if (this.storageType !== CacheStorageType.MEMORY) {\n        this.saveToStorage();\n      }\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'cache_set',\n        key,\n        size,\n        ttl,\n        priority,\n      });\n\n      medicalPerformanceMonitor.endMeasurement(metricId, { success: true });\n      return true;\n    } catch (error) {\n      medicalPerformanceMonitor.endMeasurement(metricId, { success: false, error: error.message });\n      console.error('Cache set error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get cache entry\n   */\n  get(key) {\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.CACHE,\n      'cache_get',\n      { key }\n    );\n\n    try {\n      const entry = this.cache.get(key);\n\n      if (!entry) {\n        this.missCount += 1;\n        medicalPerformanceMonitor.endMeasurement(metricId, { hit: false });\n        return null;\n      }\n\n      if (entry.isExpired()) {\n        this.cache.delete(key);\n        this.totalSize -= this.calculateSize(entry.value);\n        this.missCount += 1;\n        medicalPerformanceMonitor.endMeasurement(metricId, { hit: false, expired: true });\n        return null;\n      }\n\n      entry.markAccessed();\n      this.hitCount += 1;\n\n      medicalPerformanceMonitor.endMeasurement(metricId, { hit: true });\n      return entry.value;\n    } catch (error) {\n      medicalPerformanceMonitor.endMeasurement(metricId, { hit: false, error: error.message });\n      console.error('Cache get error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if key exists and is not expired\n   */\n  has(key) {\n    const entry = this.cache.get(key);\n    return entry && !entry.isExpired();\n  }\n\n  /**\n   * Delete cache entry\n   */\n  delete(key) {\n    const entry = this.cache.get(key);\n    if (entry) {\n      this.totalSize -= this.calculateSize(entry.value);\n      this.cache.delete(key);\n\n      if (this.storageType !== CacheStorageType.MEMORY) {\n        this.saveToStorage();\n      }\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'cache_delete',\n        key,\n      });\n\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Clear all cache entries\n   */\n  clear() {\n    const entriesCleared = this.cache.size;\n    this.cache.clear();\n    this.totalSize = 0;\n\n    if (this.storage) {\n      this.storage.removeItem('medical_cache');\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'cache_cleared',\n      entriesCleared,\n    });\n  }\n\n  /**\n   * Ensure cache capacity by evicting entries\n   */\n  ensureCapacity() {\n    // Check size limit\n    while (this.totalSize > this.options.maxSize) {\n      this.evictLeastImportant();\n    }\n\n    // Check entry count limit\n    while (this.cache.size >= this.options.maxEntries) {\n      this.evictLeastImportant();\n    }\n  }\n\n  /**\n   * Evict least important entry based on priority and access patterns\n   */\n  evictLeastImportant() {\n    let lowestScore = Infinity;\n    let keyToEvict = null;\n\n    this.cache.forEach((entry, key) => {\n      // Never evict critical priority items unless expired\n      if (entry.priority === CachePriority.CRITICAL && !entry.isExpired()) {\n        return;\n      }\n\n      const score = entry.getEvictionScore();\n      if (score < lowestScore) {\n        lowestScore = score;\n        keyToEvict = key;\n      }\n    });\n\n    if (keyToEvict) {\n      this.delete(keyToEvict);\n      this.evictionCount += 1;\n    }\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  cleanup() {\n    const startTime = performance.now();\n    let cleanedCount = 0;\n\n    this.cache.forEach((entry, key) => {\n      if (entry.isExpired()) {\n        this.delete(key);\n        cleanedCount += 1;\n      }\n    });\n\n    const duration = performance.now() - startTime;\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'cache_cleanup',\n      cleanedCount,\n      duration,\n      remainingEntries: this.cache.size,\n    });\n\n    return cleanedCount;\n  }\n\n  /**\n   * Start automatic cleanup timer\n   */\n  startCleanupTimer() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup();\n    }, this.options.cleanupInterval);\n  }\n\n  /**\n   * Stop cleanup timer\n   */\n  stopCleanupTimer() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n  }\n\n  /**\n   * Calculate size of cached value (approximate)\n   */\n  calculateSize(value) {\n    try {\n      return JSON.stringify(value).length * 2; // Rough estimate (UTF-16)\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats() {\n    const hitRate = this.hitCount + this.missCount > 0\n      ? (this.hitCount / (this.hitCount + this.missCount)) * 100\n      : 0;\n\n    return {\n      entries: this.cache.size,\n      totalSize: this.totalSize,\n      maxSize: this.options.maxSize,\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      hitRate: hitRate.toFixed(2) + '%',\n      evictionCount: this.evictionCount,\n      storageType: this.storageType,\n      utilizationPercent: ((this.totalSize / this.options.maxSize) * 100).toFixed(2) + '%',\n    };\n  }\n\n  /**\n   * Get cache entry information\n   */\n  getEntryInfo(key) {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    return {\n      key: entry.key,\n      size: this.calculateSize(entry.value),\n      priority: entry.priority,\n      ttl: entry.ttl,\n      age: entry.getAge(),\n      timeToExpiration: entry.getTimeToExpiration(),\n      accessCount: entry.metadata.accessCount,\n      lastAccessed: new Date(entry.metadata.lastAccessed).toISOString(),\n      isExpired: entry.isExpired(),\n      evictionScore: entry.getEvictionScore(),\n    };\n  }\n\n  /**\n   * Dispose of cache and cleanup resources\n   */\n  dispose() {\n    this.stopCleanupTimer();\n    this.clear();\n  }\n}\n\n/**\n * Medical cache factory for different data types\n */\nexport class MedicalCacheFactory {\n  static patientDataCache = null;\n  static predictionCache = null;\n  static validationCache = null;\n  static apiCache = null;\n\n  /**\n   * Get or create patient data cache (session storage, short TTL)\n   */\n  static getPatientDataCache() {\n    if (!this.patientDataCache) {\n      this.patientDataCache = new MedicalCache(CacheStorageType.SESSION, {\n        maxSize: 10 * 1024 * 1024, // 10MB\n        maxEntries: 100,\n        enableEncryption: true,\n      });\n    }\n    return this.patientDataCache;\n  }\n\n  /**\n   * Get or create prediction results cache (memory only, medium TTL)\n   */\n  static getPredictionCache() {\n    if (!this.predictionCache) {\n      this.predictionCache = new MedicalCache(CacheStorageType.MEMORY, {\n        maxSize: 50 * 1024 * 1024, // 50MB\n        maxEntries: 500,\n      });\n    }\n    return this.predictionCache;\n  }\n\n  /**\n   * Get or create validation rules cache (local storage, long TTL)\n   */\n  static getValidationCache() {\n    if (!this.validationCache) {\n      this.validationCache = new MedicalCache(CacheStorageType.LOCAL, {\n        maxSize: 5 * 1024 * 1024, // 5MB\n        maxEntries: 200,\n      });\n    }\n    return this.validationCache;\n  }\n\n  /**\n   * Get or create API response cache (session storage, short TTL)\n   */\n  static getApiCache() {\n    if (!this.apiCache) {\n      this.apiCache = new MedicalCache(CacheStorageType.SESSION, {\n        maxSize: 20 * 1024 * 1024, // 20MB\n        maxEntries: 300,\n      });\n    }\n    return this.apiCache;\n  }\n\n  /**\n   * Clear all caches (privacy compliance)\n   */\n  static clearAllCaches() {\n    [\n      this.patientDataCache,\n      this.predictionCache,\n      this.validationCache,\n      this.apiCache,\n    ].forEach((cache) => {\n      if (cache) {\n        cache.clear();\n      }\n    });\n  }\n\n  /**\n   * Dispose all caches\n   */\n  static disposeAllCaches() {\n    [\n      this.patientDataCache,\n      this.predictionCache,\n      this.validationCache,\n      this.apiCache,\n    ].forEach((cache) => {\n      if (cache) {\n        cache.dispose();\n      }\n    });\n\n    this.patientDataCache = null;\n    this.predictionCache = null;\n    this.validationCache = null;\n    this.apiCache = null;\n  }\n}\n\n// Export convenience instances\nexport const patientDataCache = MedicalCacheFactory.getPatientDataCache();\nexport const predictionCache = MedicalCacheFactory.getPredictionCache();\nexport const validationCache = MedicalCacheFactory.getValidationCache();\nexport const apiCache = MedicalCacheFactory.getApiCache();","import { API_URLS, APP_CONFIG } from '../config.js';\nimport { predictLVO, canUseLocalModel } from '../logic/lvo-local-model.js';\nimport { extractDriversFromResponse, extractProbabilityFromResponse, extractConfidenceFromResponse } from './drivers.js';\n\n// Performance monitoring and caching\nimport { medicalPerformanceMonitor, PerformanceMetricType } from '../performance/medical-performance-monitor.js';\nimport { apiCache, CachePriority, MedicalCacheTTL } from '../performance/medical-cache.js';\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\n\n// Warm up Google Cloud Functions on app load\nexport async function warmUpFunctions() {\n  console.log('Warming up Cloud Functions...');\n\n  // Send lightweight ping requests to wake up cold functions\n  const warmUpPromises = Object.values(API_URLS).map(async (url) => {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout for warm-up\n\n      // Use minimal POST with empty data to warm up\n      await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({}), // Empty body will fail validation but still warms up the function\n        signal: controller.signal,\n        mode: 'cors',\n      });\n\n      clearTimeout(timeoutId);\n      console.log(`Warmed up: ${url}`);\n    } catch (error) {\n      // Ignore warm-up errors - they're not critical\n      // The function is still warmed up even if it returns an error\n      console.log(`Warm-up attempt for ${url.split('/').pop()} completed`);\n    }\n  });\n\n  // Don't wait for warm-up to complete - do it in background\n  Promise.all(warmUpPromises).then(() => {\n    console.log('Cloud Functions warm-up complete');\n  });\n}\n\nclass APIError extends Error {\n  constructor(message, status, url) {\n    super(message);\n    this.name = 'APIError';\n    this.status = status;\n    this.url = url;\n  }\n}\n\nfunction normalizeBooleans(payload) {\n  const normalized = { ...payload };\n\n  Object.keys(normalized).forEach((key) => {\n    const value = normalized[key];\n    if (typeof value === 'boolean' || value === 'on' || value === 'true' || value === 'false') {\n      normalized[key] = value === true || value === 'on' || value === 'true' ? 1 : 0;\n    }\n  });\n\n  return normalized;\n}\n\nfunction safeParseFloat(value, defaultValue = 0) {\n  const parsed = parseFloat(value);\n  return isNaN(parsed) ? defaultValue : parsed;\n}\n\n/**\n * Create cache key for API requests\n */\nfunction createCacheKey(url, payload) {\n  const urlKey = url.split('/').pop() || 'unknown';\n  const payloadHash = btoa(JSON.stringify(payload)).slice(0, 16);\n  return `api_${urlKey}_${payloadHash}`;\n}\n\n/**\n * Enhanced fetchJSON with performance monitoring and caching\n */\nasync function fetchJSON(url, payload, options = {}) {\n  const {\n    cacheable = true,\n    cacheTTL = MedicalCacheTTL.API_RESPONSES,\n    cachePriority = CachePriority.NORMAL,\n    critical = false,\n  } = options;\n\n  // Start performance monitoring\n  const metricId = medicalPerformanceMonitor.startMeasurement(\n    PerformanceMetricType.API_CALL,\n    url.split('/').pop() || 'api_call',\n    { url, critical, cacheable }\n  );\n\n  // Check cache first if cacheable\n  let cacheKey = null;\n  if (cacheable) {\n    cacheKey = createCacheKey(url, payload);\n    const cachedData = apiCache.get(cacheKey);\n\n    if (cachedData) {\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        cached: true,\n        success: true\n      });\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'api_cache_hit',\n        endpoint: url.split('/').pop(),\n        cacheKey,\n      });\n\n      return cachedData;\n    }\n  }\n\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), APP_CONFIG.requestTimeout);\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify(payload),\n      signal: controller.signal,\n      mode: 'cors',\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}`;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        errorMessage = `${errorMessage}: ${response.statusText}`;\n      }\n      throw new APIError(errorMessage, response.status, url);\n    }\n\n    const data = await response.json();\n\n    // Cache successful responses\n    if (cacheable && cacheKey) {\n      apiCache.set(cacheKey, data, cacheTTL, cachePriority, {\n        endpoint: url.split('/').pop(),\n        timestamp: new Date().toISOString(),\n        payloadSize: JSON.stringify(payload).length,\n        responseSize: JSON.stringify(data).length,\n      });\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'api_response_cached',\n        endpoint: url.split('/').pop(),\n        cacheKey,\n      });\n    }\n\n    medicalPerformanceMonitor.endMeasurement(metricId, {\n      cached: false,\n      success: true,\n      responseSize: JSON.stringify(data).length,\n      statusCode: response.status,\n    });\n\n    return data;\n  } catch (error) {\n    clearTimeout(timeoutId);\n\n    let apiError;\n    if (error.name === 'AbortError') {\n      apiError = new APIError('Request timeout - please try again', 408, url);\n    } else if (error instanceof APIError) {\n      apiError = error;\n    } else {\n      // Network or other errors\n      apiError = new APIError(\n        'Network error - please check your connection and try again',\n        0,\n        url,\n      );\n    }\n\n    medicalPerformanceMonitor.endMeasurement(metricId, {\n      cached: false,\n      success: false,\n      error: apiError.message,\n      statusCode: apiError.status,\n    });\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'api_error',\n      endpoint: url.split('/').pop(),\n      error: apiError.message,\n      statusCode: apiError.status,\n    });\n\n    throw apiError;\n  }\n}\n\nexport async function predictComaIch(payload) {\n  const normalizedPayload = normalizeBooleans(payload);\n\n  // Production: Patient data logging removed for privacy\n\n  try {\n    const response = await fetchJSON(API_URLS.COMA_ICH, normalizedPayload, {\n      cacheable: true,\n      cacheTTL: MedicalCacheTTL.PREDICTION_RESULTS,\n      cachePriority: CachePriority.HIGH,\n      critical: true,\n    });\n\n    // Production: Response logging removed for privacy\n\n    // Normalize response format for consistency\n    const result = {\n      probability: safeParseFloat(response.probability || response.ich_probability, 0),\n      drivers: response.drivers || null,\n      confidence: safeParseFloat(response.confidence, 0.75),\n      module: 'Coma',\n      strategy: 'COMA_ICH',\n      timestamp: new Date().toISOString(),\n      inputSummary: {\n        gcs: normalizedPayload.gcs,\n        gfap: normalizedPayload.gfap_value,\n        age: normalizedPayload.age_years,\n      },\n    };\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.PREDICTION_COMPLETED, {\n      module: 'coma',\n      probability: result.probability,\n      confidence: result.confidence,\n      cached: response._cached || false,\n    });\n\n    return result;\n  } catch (error) {\n    console.error('Coma ICH prediction failed:', error);\n    throw new APIError(\n      `Failed to get ICH prediction: ${error.message}`,\n      error.status,\n      API_URLS.COMA_ICH,\n    );\n  }\n}\n\nexport async function predictLimitedIch(payload) {\n  // Ensure all required fields are present for the Limited Data API\n  const fullPayload = {\n    age_years: payload.age_years,\n    systolic_bp: payload.systolic_bp,\n    diastolic_bp: payload.diastolic_bp,\n    gfap_value: payload.gfap_value,\n    // Ensure checkbox fields are present (default to 0 if missing/unchecked)\n    vigilanzminderung: payload.vigilanzminderung || 0,\n  };\n\n  const normalizedPayload = normalizeBooleans(fullPayload);\n\n  // Production: Patient data logging removed for privacy\n\n  try {\n    const response = await fetchJSON(API_URLS.LDM_ICH, normalizedPayload, {\n      cacheable: true,\n      cacheTTL: MedicalCacheTTL.PREDICTION_RESULTS,\n      cachePriority: CachePriority.HIGH,\n      critical: true,\n    });\n\n    // Production: Response logging removed for privacy\n\n    // Normalize response format for consistency\n    const result = {\n      probability: safeParseFloat(response.probability || response.ich_probability, 0),\n      drivers: response.drivers || null,\n      confidence: safeParseFloat(response.confidence, 0.65),\n      module: 'Limited Data',\n      strategy: 'LIMITED_DATA_ICH',\n      timestamp: new Date().toISOString(),\n      inputSummary: {\n        age: normalizedPayload.age_years,\n        gfap: normalizedPayload.gfap_value,\n        systolic_bp: normalizedPayload.systolic_bp,\n        diastolic_bp: normalizedPayload.diastolic_bp,\n        vigilanzminderung: normalizedPayload.vigilanzminderung,\n      },\n    };\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.PREDICTION_COMPLETED, {\n      module: 'limited',\n      probability: result.probability,\n      confidence: result.confidence,\n      cached: response._cached || false,\n    });\n\n    return result;\n  } catch (error) {\n    console.error('Limited Data ICH prediction failed:', error);\n    throw new APIError(\n      `Failed to get ICH prediction: ${error.message}`,\n      error.status,\n      API_URLS.LDM_ICH,\n    );\n  }\n}\n\nexport async function predictFullStroke(payload) {\n  // Ensure all required fields are present for the Full Stroke API\n  const fullPayload = {\n    age_years: payload.age_years,\n    systolic_bp: payload.systolic_bp,\n    diastolic_bp: payload.diastolic_bp,\n    gfap_value: payload.gfap_value,\n    fast_ed_score: payload.fast_ed_score,\n    // Ensure all checkbox fields are present (default to 0 if missing)\n    headache: payload.headache || 0,\n    vigilanzminderung: payload.vigilanzminderung || 0,\n    armparese: payload.armparese || 0,\n    beinparese: payload.beinparese || 0,\n    eye_deviation: payload.eye_deviation || 0,\n    atrial_fibrillation: payload.atrial_fibrillation || 0,\n    anticoagulated_noak: payload.anticoagulated_noak || 0,\n    antiplatelets: payload.antiplatelets || 0,\n  };\n\n  const normalizedPayload = normalizeBooleans(fullPayload);\n\n  // Production: Patient data logging removed for privacy\n\n  // Use local LVO model for prediction (more accurate, faster, works offline)\n  let lvoResult = null;\n\n  if (canUseLocalModel(normalizedPayload)) {\n    console.log('🚀 Using local LVO model (GFAP + FAST-ED)');\n    const localLVO = predictLVO(normalizedPayload.gfap_value, normalizedPayload.fast_ed_score);\n\n    if (localLVO.probability !== null) {\n      // Convert local model format to match expected API format\n      lvoResult = {\n        probability: localLVO.probability,\n        drivers: localLVO.riskFactors.map((factor) => ({\n          feature: factor.name,\n          value: factor.value,\n          contribution: factor.contribution,\n          impact: factor.impact,\n        })),\n        confidence: localLVO.riskLevel === 'high' ? 0.9 : localLVO.riskLevel === 'moderate' ? 0.7 : 0.5,\n        module: 'Full Stroke (Local LVO)',\n        interpretation: localLVO.interpretation,\n      };\n\n      // Production: Prediction logging removed for privacy\n    }\n  }\n\n  try {\n    // Still use API for ICH prediction (requires all parameters)\n    const response = await fetchJSON(API_URLS.FULL_STROKE, normalizedPayload, {\n      cacheable: true,\n      cacheTTL: MedicalCacheTTL.PREDICTION_RESULTS,\n      cachePriority: CachePriority.HIGH,\n      critical: true,\n    });\n\n    // Production: Response logging removed for privacy\n\n    // Extract ICH results from API\n    const ichProbability = extractProbabilityFromResponse(response, 'ICH');\n    const ichDrivers = extractDriversFromResponse(response, 'ICH');\n    const ichConfidence = extractConfidenceFromResponse(response, 'ICH');\n\n    const ichResult = {\n      probability: ichProbability,\n      drivers: ichDrivers,\n      confidence: ichConfidence,\n      module: 'Full Stroke',\n      strategy: 'FULL_STROKE',\n      timestamp: new Date().toISOString(),\n      inputSummary: {\n        age: normalizedPayload.age_years,\n        gfap: normalizedPayload.gfap_value,\n        fast_ed: normalizedPayload.fast_ed_score,\n        systolic_bp: normalizedPayload.systolic_bp,\n      },\n    };\n\n    // If local LVO failed, fall back to API\n    if (!lvoResult) {\n      console.log('⚠️ Falling back to API for LVO prediction');\n      const lvoProbability = extractProbabilityFromResponse(response, 'LVO');\n      const lvoDrivers = extractDriversFromResponse(response, 'LVO');\n      const lvoConfidence = extractConfidenceFromResponse(response, 'LVO');\n\n      lvoResult = {\n        probability: lvoProbability,\n        drivers: lvoDrivers,\n        confidence: lvoConfidence,\n        module: 'Full Stroke (API)',\n        strategy: 'FULL_STROKE_LVO',\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    // Production: Results logging removed for privacy\n\n    const result = {\n      ich: ichResult,\n      lvo: lvoResult,\n    };\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.PREDICTION_COMPLETED, {\n      module: 'full',\n      ich_probability: ichResult.probability,\n      lvo_probability: lvoResult.probability,\n      ich_confidence: ichResult.confidence,\n      lvo_confidence: lvoResult.confidence,\n      local_lvo_used: lvoResult.module.includes('Local'),\n      cached: response._cached || false,\n    });\n\n    return result;\n  } catch (error) {\n    console.error('Full Stroke prediction failed:', error);\n    throw new APIError(\n      `Failed to get stroke predictions: ${error.message}`,\n      error.status,\n      API_URLS.FULL_STROKE,\n    );\n  }\n}\n\n// Export the error class for use in other modules\nexport { APIError };\n","// Localization messages for the Stroke Triage Assistant\n\nexport const messages = {\n  en: {\n    // Header\n    appTitle: 'iGFAP',\n    emergencyBadge: 'Emergency Tool',\n    helpButton: 'Help and Instructions',\n    darkModeButton: 'Toggle dark mode',\n    languageToggle: 'Language',\n\n    // Progress\n    step1: 'Initial Assessment',\n    step2: 'Data Collection',\n    step3: 'Results',\n\n    // Module titles\n    comaModuleTitle: 'Coma Module',\n    limitedDataModuleTitle: 'Limited Data Module',\n    fullStrokeModuleTitle: 'Full Stroke Module',\n\n    // Triage 1\n    triage1Title: 'Patient Assessment',\n    triage1Question: 'Is the patient comatose?',\n    triage1Help: 'Glasgow Coma Scale < 9',\n    triage1Yes: 'YES - Comatose',\n    triage1No: 'NO - Conscious',\n\n    // Triage 2\n    triage2Title: 'Examination Capability',\n    triage2Question: 'Can the patient be reliably examined?',\n    triage2Help: 'Patient is not aphasic, confused, or uncooperative',\n    triage2Yes: 'YES - Full Exam Possible',\n    triage2No: 'NO - Limited Exam Only',\n\n    // Forms\n    ageLabel: 'Age (years)',\n    ageHelp: 'Patient age in years',\n    systolicLabel: 'Systolic BP (mmHg)',\n    systolicHelp: 'Systolic blood pressure',\n    diastolicLabel: 'Diastolic BP (mmHg)',\n    diastolicHelp: 'Diastolic blood pressure',\n    gfapLabel: 'GFAP Value (pg/mL)',\n    gfapHelp: 'GFAP biomarker level',\n    fastEdLabel: 'FAST-ED Score',\n    fastEdHelp: 'FAST-ED assessment score (0-9)',\n\n    // Checkboxes\n    headacheLabel: 'Headache',\n    vigilanzLabel: 'Reduced consciousness',\n    armPareseLabel: 'Arm weakness',\n    beinPareseLabel: 'Leg weakness',\n    eyeDeviationLabel: 'Eye deviation',\n    atrialFibLabel: 'Atrial fibrillation',\n    anticoagLabel: 'Anticoagulated (NOAK)',\n    antiplateletsLabel: 'Antiplatelets',\n\n    // Buttons\n    analyzeButton: 'Analyze',\n    analyzing: 'Analyzing...',\n    printResults: 'Print Results',\n    newAssessment: 'Start New Assessment',\n    startOver: 'Start Over',\n    goBack: 'Go Back',\n    goHome: 'Go Home',\n\n    // Form sections\n    basicInformation: 'Basic Information',\n    biomarkersScores: 'Biomarkers & Scores',\n    clinicalSymptoms: 'Clinical Symptoms',\n    medicalHistory: 'Medical History',\n\n    // Form labels with units\n    ageYearsLabel: 'Age (years)',\n    systolicBpLabel: 'Systolic BP (mmHg)',\n    diastolicBpLabel: 'Diastolic BP (mmHg)',\n    gfapValueLabel: 'GFAP Value (pg/mL)',\n    fastEdScoreLabel: 'FAST-ED Score',\n\n    // Help text\n    ageYearsHelp: \"Patient's age in years\",\n    systolicBpHelp: 'Normal: 90-140 mmHg',\n    diastolicBpHelp: 'Normal: 60-90 mmHg',\n    gfapTooltip: 'Brain injury biomarker',\n    gfapTooltipLong: 'Glial Fibrillary Acidic Protein - Brain injury biomarker',\n    gfapRange: 'Range: {min} - {max} pg/mL',\n    fastEdTooltip: '0-9 scale for LVO screening',\n\n    // Module buttons\n    analyzeIchRisk: 'Analyze ICH Risk',\n    analyzeStrokeRisk: 'Analyze Stroke Risk',\n\n    // Alert messages\n    criticalPatient: 'Critical Patient',\n    comaAlert: 'Patient is comatose (GCS < 9). Rapid assessment required.',\n    vigilanceReduction: 'Vigilance Reduction (Decreased alertness)',\n\n    // Additional symptom labels\n    armParesis: 'Arm Paresis',\n    legParesis: 'Leg Paresis',\n    eyeDeviation: 'Eye Deviation',\n    atrialFibrillation: 'Atrial Fibrillation',\n    onNoacDoac: 'On NOAC/DOAC',\n    onAntiplatelets: 'On Antiplatelets',\n\n    // Results\n    resultsTitle: 'Assessment Results',\n    bleedingRiskAssessment: 'Bleeding Risk Assessment',\n    ichProbability: 'ICH Probability',\n    lvoProbability: 'LVO Probability',\n    lvoMayBePossible: 'Large vessel occlusion possible - further evaluation recommended',\n    riskFactorsTitle: 'Main Risk Factors',\n    increasingRisk: 'Increasing Risk',\n    decreasingRisk: 'Decreasing Risk',\n    noFactors: 'No factors',\n    riskLevel: 'Risk Level',\n    lowRisk: 'Low Risk',\n    mediumRisk: 'Medium Risk',\n    highRisk: 'High Risk',\n\n    // Risk levels\n    riskLow: 'Low',\n    riskMedium: 'Medium',\n    riskHigh: 'High',\n\n    // Risk Factors Analysis\n    riskFactorsAnalysis: 'Risk Factors',\n    contributingFactors: 'Contributing factors to the assessment',\n    riskFactors: 'Risk Factors',\n    increaseRisk: 'INCREASE',\n    decreaseRisk: 'DECREASE',\n    noPositiveFactors: 'No increasing factors',\n    noNegativeFactors: 'No decreasing factors',\n    ichRiskFactors: 'ICH Risk Factors',\n    lvoRiskFactors: 'LVO Risk Factors',\n\n    // Critical Alert\n    criticalAlertTitle: 'CRITICAL RISK DETECTED',\n    criticalAlertMessage: 'High probability of intracerebral hemorrhage detected.',\n    immediateActionsRequired: 'Immediate actions required',\n    initiateStrokeProtocol: 'Initiate stroke protocol immediately',\n    urgentCtImaging: 'Urgent CT imaging required',\n    considerBpManagement: 'Consider blood pressure management',\n    prepareNeurosurgicalConsult: 'Prepare for potential neurosurgical consultation',\n\n    // Help Modal\n    helpTitle: 'Quick Reference Guide',\n    gcsTitle: 'Glasgow Coma Scale (GCS)',\n    gcsLow: 'GCS < 9: Comatose patient - use Coma Module',\n    gcsMod: 'GCS 8-12: Moderate impairment',\n    gcsHigh: 'GCS 13-15: Mild impairment',\n    fastEdTitle: 'FAST-ED Score Components',\n    fastEdFacial: 'Facial Palsy: 0-1 points',\n    fastEdArm: 'Arm Weakness: 0-2 points',\n    fastEdSpeech: 'Speech Changes: 0-2 points',\n    fastEdTime: 'Time: Critical factor',\n    fastEdEye: 'Eye Deviation: 0-2 points',\n    fastEdDenial: 'Denial/Neglect: 0-2 points',\n    criticalValuesTitle: 'Critical Values',\n    criticalBp: 'Systolic BP > 180: Increased ICH risk',\n    criticalGfap: 'GFAP > 500 pg/mL: Significant marker',\n    criticalFastEd: 'FAST-ED ≥ 4: Consider LVO',\n\n    // FAST-ED Calculator Modal\n    fastEdCalculatorTitle: 'FAST-ED Score Calculator',\n    fastEdCalculatorSubtitle: 'Click to calculate FAST-ED score components',\n    facialPalsyTitle: 'Facial Palsy',\n    facialPalsyNormal: 'Normal (0)',\n    facialPalsyMild: 'Present (1)',\n    armWeaknessTitle: 'Arm Weakness',\n    armWeaknessNormal: 'Normal (0)',\n    armWeaknessMild: 'Mild weakness or drift (1)',\n    armWeaknessSevere: 'Severe weakness or falls immediately (2)',\n    speechChangesTitle: 'Speech Abnormalities',\n    speechChangesNormal: 'Normal (0)',\n    speechChangesMild: 'Mild dysarthria or aphasia (1)',\n    speechChangesSevere: 'Severe dysarthria or aphasia (2)',\n    eyeDeviationTitle: 'Eye Deviation',\n    eyeDeviationNormal: 'Normal (0)',\n    eyeDeviationPartial: 'Partial gaze deviation (1)',\n    eyeDeviationForced: 'Forced gaze deviation (2)',\n    denialNeglectTitle: 'Denial/Neglect',\n    denialNeglectNormal: 'Normal (0)',\n    denialNeglectPartial: 'Partial neglect (1)',\n    denialNeglectComplete: 'Complete neglect (2)',\n    totalScoreTitle: 'Total FAST-ED Score',\n    riskLevel: 'Risk Level',\n    riskLevelLow: 'LOW (Score <4)',\n    riskLevelHigh: 'HIGH (Score ≥4 - Consider LVO)',\n    applyScore: 'Apply Score',\n    cancel: 'Cancel',\n\n    // Results Screen Enhancements\n    riskAnalysis: 'Risk Analysis',\n    riskAnalysisSubtitle: 'Clinical factors in this assessment',\n    contributingFactors: 'Contributing factors',\n    factorsShown: 'shown',\n    positiveFactors: 'Positive factors',\n    negativeFactors: 'Negative factors',\n    clinicalInformation: 'Clinical Information',\n    clinicalRecommendations: 'Clinical Recommendations',\n    clinicalRec1: 'Consider immediate imaging if ICH risk is high',\n    clinicalRec2: 'Activate stroke team for LVO scores ≥ 50%',\n    clinicalRec3: 'Monitor blood pressure closely',\n    clinicalRec4: 'Document all findings thoroughly',\n    noDriverData: 'No driver data available',\n    driverAnalysisUnavailable: 'Driver analysis unavailable',\n    driverInfoNotAvailable: 'Driver information not available from this prediction model',\n    driverAnalysisNotAvailable: 'Driver analysis not available for this prediction',\n    lvoNotPossible: 'LVO assessment not possible with limited data',\n    fullExamRequired: 'Full neurological examination required for LVO screening',\n    limitedAssessment: 'Limited Assessment',\n\n    // Disclaimer\n    disclaimer: 'Clinical Disclaimer',\n    disclaimerText: 'This tool is for clinical decision support only. Always use clinical judgment and follow local protocols. Not a replacement for physician assessment.',\n    importantNote: 'Important',\n    importantText: 'These results are for clinical decision support only. Always use clinical judgment and follow institutional protocols.',\n\n    // ICH Volume and Mortality\n    predictedMortality: 'Predicted 30-day mortality',\n    ichVolumeLabel: 'ICH Volume',\n    references: 'References',\n\n    // Input Summary\n    inputSummaryTitle: 'Input Summary',\n    inputSummarySubtitle: 'Values used for this analysis',\n\n    // Footer\n    privacyLink: 'Privacy Policy',\n    disclaimerLink: 'Medical Disclaimer',\n    versionLink: 'Version 2.1.0 - Research Preview',\n\n    // Privacy and disclaimers\n    privacyPolicy: 'Privacy Policy: This tool processes data locally. No patient data is stored or transmitted.',\n    medicalDisclaimer: 'Medical Disclaimer: This tool is for clinical decision support only. Always use clinical judgment and follow local protocols.',\n\n    // Error messages\n    networkError: 'Network error - please check your connection and try again',\n    requestTimeout: 'Request timeout - please try again',\n    apiError: 'Failed to get results',\n    validationError: 'Please check your input values',\n\n    // Session\n    sessionTimeout: 'Your session has been idle for 30 minutes. Would you like to continue?',\n    unsavedData: 'You have unsaved data. Are you sure you want to leave?',\n\n    // Stroke Centers\n    nearestCentersTitle: 'Nearest Stroke Centers',\n    useCurrentLocation: 'Use Current Location',\n    enterLocationPlaceholder: 'Enter city or address...',\n    enterManually: 'Enter Location Manually',\n    search: 'Search',\n    yourLocation: 'Your Location',\n    recommendedCenters: 'Recommended Centers',\n    alternativeCenters: 'Alternative Centers',\n    noCentersFound: 'No stroke centers found in this area',\n    gettingLocation: 'Getting your location',\n    searchingLocation: 'Searching location',\n    locationError: 'Unable to get your location',\n    locationPermissionDenied: 'Location access denied. Please allow location access and try again.',\n    locationUnavailable: 'Location information is unavailable',\n    locationTimeout: 'Location request timed out',\n    geolocationNotSupported: 'Geolocation is not supported by this browser',\n    geocodingNotImplemented: 'Location search not available. Please use GPS or enter coordinates manually.',\n    tryManualEntry: 'Try entering your location manually or use GPS.',\n    distanceNote: 'Distances are calculated as straight-line distances. Actual travel times may vary.',\n    travelTimeNote: 'Travel times calculated for emergency vehicles with sirens and priority routing.',\n    calculatingTravelTimes: 'Calculating travel times',\n    minutes: 'min',\n    poweredByOrs: 'Travel times powered by OpenRoute Service',\n\n    // Center Types and Services\n    comprehensiveCenter: 'Comprehensive Stroke Center',\n    primaryCenter: 'Primary Stroke Center',\n    telemetryCenter: 'Telemedicine Center',\n    thrombectomy: 'Thrombectomy',\n    neurosurgery: 'Neurosurgery',\n    icu: 'Intensive Care',\n    telemedicine: 'Telemedicine',\n    stroke_unit: 'Stroke Unit',\n\n    // Actions\n    call: 'Call',\n    directions: 'Directions',\n    emergency: 'Emergency',\n    certified: 'Certified',\n\n    // Prerequisites Modal\n    prerequisitesTitle: 'Prerequisites for Stroke Triage',\n    prerequisitesIntro: 'Please confirm that all of the following prerequisites are met:',\n    prerequisitesWarning: 'All prerequisites must be met to continue',\n    continue: 'Continue',\n    acute_deficit: 'Acute (severe) neurological deficit present',\n    symptom_onset: 'Symptom onset within 6 hours',\n    no_preexisting: 'No pre-existing severe neurological deficits',\n    no_trauma: 'No traumatic brain injury present',\n\n    // Differential Diagnoses for Stroke Modules\n    differentialDiagnoses: 'Differential Diagnoses',\n    reconfirmTimeWindow: 'Please reconfirm time window!',\n    unclearTimeWindow: 'With unclear/extended time window, early demarcated brain infarction is also possible',\n    rareDiagnoses: 'Rare diagnoses such as glioblastoma are also possible',\n\n  },\n\n  de: {\n    // Header\n    appTitle: 'iGFAP',\n    emergencyBadge: 'Notfall-Tool',\n    helpButton: 'Hilfe und Anweisungen',\n    darkModeButton: 'Dunklen Modus umschalten',\n    languageToggle: 'Sprache',\n\n    // Progress\n    step1: 'Erstbeurteilung',\n    step2: 'Datenerhebung',\n    step3: 'Ergebnisse',\n\n    // Module titles\n    comaModuleTitle: 'Koma-Modul',\n    limitedDataModuleTitle: 'Begrenzte Daten Modul',\n    fullStrokeModuleTitle: 'Vollständiges Schlaganfall-Modul',\n\n    // Triage 1\n    triage1Title: 'Patientenbeurteilung',\n    triage1Question: 'Ist der Patient komatös?',\n    triage1Help: 'Glasgow Coma Scale < 9',\n    triage1Yes: 'JA - Komatös',\n    triage1No: 'NEIN - Bei Bewusstsein',\n\n    // Triage 2\n    triage2Title: 'Untersuchungsfähigkeit',\n    triage2Question: 'Kann der Patient zuverlässig untersucht werden?',\n    triage2Help: 'Patient ist nicht aphasisch, verwirrt oder unkooperativ',\n    triage2Yes: 'JA - Vollständige Untersuchung möglich',\n    triage2No: 'NEIN - Nur begrenzte Untersuchung',\n\n    // Forms\n    ageLabel: 'Alter (Jahre)',\n    ageHelp: 'Patientenalter in Jahren',\n    systolicLabel: 'Systolischer RR (mmHg)',\n    systolicHelp: 'Systolischer Blutdruck',\n    diastolicLabel: 'Diastolischer RR (mmHg)',\n    diastolicHelp: 'Diastolischer Blutdruck',\n    gfapLabel: 'GFAP-Wert (pg/mL)',\n    gfapHelp: 'GFAP-Biomarker-Wert',\n    fastEdLabel: 'FAST-ED-Score',\n    fastEdHelp: 'FAST-ED-Bewertungsscore (0-9)',\n\n    // Checkboxes\n    headacheLabel: 'Kopfschmerzen',\n    vigilanzLabel: 'Bewusstseinstrübung',\n    armPareseLabel: 'Armschwäche',\n    beinPareseLabel: 'Beinschwäche',\n    eyeDeviationLabel: 'Blickdeviation',\n    atrialFibLabel: 'Vorhofflimmern',\n    anticoagLabel: 'Antikoaguliert (NOAK)',\n    antiplateletsLabel: 'Thrombozytenaggregationshemmer',\n\n    // Buttons\n    analyzeButton: 'Analysieren',\n    analyzing: 'Analysiere...',\n    printResults: 'Ergebnisse drucken',\n    newAssessment: 'Neue Bewertung starten',\n    startOver: 'Von vorn beginnen',\n    goBack: 'Zurück',\n    goHome: 'Zur Startseite',\n\n    // Form sections\n    basicInformation: 'Grundinformationen',\n    biomarkersScores: 'Biomarker & Scores',\n    clinicalSymptoms: 'Klinische Symptome',\n    medicalHistory: 'Anamnese',\n\n    // Form labels with units\n    ageYearsLabel: 'Alter (Jahre)',\n    systolicBpLabel: 'Systolischer RR (mmHg)',\n    diastolicBpLabel: 'Diastolischer RR (mmHg)',\n    gfapValueLabel: 'GFAP-Wert (pg/mL)',\n    fastEdScoreLabel: 'FAST-ED-Score',\n\n    // Help text\n    ageYearsHelp: 'Patientenalter in Jahren',\n    systolicBpHelp: 'Normal: 90-140 mmHg',\n    diastolicBpHelp: 'Normal: 60-90 mmHg',\n    gfapTooltip: 'Hirnverletzungs-Biomarker',\n    gfapTooltipLong: 'Glial Fibrillary Acidic Protein - Hirnverletzungs-Biomarker',\n    gfapRange: 'Bereich: {min} - {max} pg/mL',\n    fastEdTooltip: '0-9 Skala für LVO-Screening',\n\n    // Module buttons\n    analyzeIchRisk: 'ICB-Risiko analysieren',\n    analyzeStrokeRisk: 'Schlaganfall-Risiko analysieren',\n\n    // Alert messages\n    criticalPatient: 'Kritischer Patient',\n    comaAlert: 'Patient ist komatös (GCS < 9). Schnelle Beurteilung erforderlich.',\n    vigilanceReduction: 'Vigilanzminderung (Verminderte Wachheit)',\n\n    // Additional symptom labels\n    armParesis: 'Armparese',\n    legParesis: 'Beinparese',\n    eyeDeviation: 'Blickdeviation',\n    atrialFibrillation: 'Vorhofflimmern',\n    onNoacDoac: 'NOAK/DOAK-Therapie',\n    onAntiplatelets: 'Thrombozytenaggregationshemmer',\n\n    // Results\n    resultsTitle: 'Bewertungsergebnisse',\n    bleedingRiskAssessment: 'Blutungsrisiko-Bewertung',\n    ichProbability: 'ICB-Risiko',\n    lvoProbability: 'LVO-Risiko',\n    lvoMayBePossible: 'Großgefäßverschluss möglich - weitere Abklärung empfohlen',\n    riskFactorsTitle: 'Hauptrisikofaktoren',\n    increasingRisk: 'Risikoerhöhend',\n    decreasingRisk: 'Risikomindernd',\n    noFactors: 'Keine Faktoren',\n    riskLevel: 'Risikostufe',\n    lowRisk: 'Niedriges Risiko',\n    mediumRisk: 'Mittleres Risiko',\n    highRisk: 'Hohes Risiko',\n\n    // Risk levels\n    riskLow: 'Niedrig',\n    riskMedium: 'Mittel',\n    riskHigh: 'Hoch',\n\n    // Risk Factors Analysis\n    riskFactorsAnalysis: 'Risikofaktoren',\n    contributingFactors: 'Beitragende Faktoren zur Bewertung',\n    riskFactors: 'Risikofaktoren',\n    increaseRisk: 'ERHÖHEN',\n    decreaseRisk: 'VERRINGERN',\n    noPositiveFactors: 'Keine erhöhenden Faktoren',\n    noNegativeFactors: 'Keine verringernden Faktoren',\n    ichRiskFactors: 'ICB-Risikofaktoren',\n    lvoRiskFactors: 'LVO-Risikofaktoren',\n\n    // Critical Alert\n    criticalAlertTitle: 'KRITISCHES RISIKO ERKANNT',\n    criticalAlertMessage: 'Hohe Wahrscheinlichkeit einer intrazerebralen Blutung erkannt.',\n    immediateActionsRequired: 'Sofortige Maßnahmen erforderlich',\n    initiateStrokeProtocol: 'Schlaganfall-Protokoll sofort einleiten',\n    urgentCtImaging: 'Dringende CT-Bildgebung erforderlich',\n    considerBpManagement: 'Blutdruckmanagement erwägen',\n    prepareNeurosurgicalConsult: 'Neurochirurgische Konsultation vorbereiten',\n\n    // Help Modal\n    helpTitle: 'Kurzreferenzleitfaden',\n    gcsTitle: 'Glasgow Coma Scale (GCS)',\n    gcsLow: 'GCS < 9: Komatöser Patient - Koma-Modul verwenden',\n    gcsMod: 'GCS 8-12: Mäßige Beeinträchtigung',\n    gcsHigh: 'GCS 13-15: Leichte Beeinträchtigung',\n    fastEdTitle: 'FAST-ED-Score-Komponenten',\n    fastEdFacial: 'Faziale Parese: 0-1 Punkte',\n    fastEdArm: 'Armschwäche: 0-2 Punkte',\n    fastEdSpeech: 'Sprachveränderungen: 0-2 Punkte',\n    fastEdTime: 'Zeit: Kritischer Faktor',\n    fastEdEye: 'Blickdeviation: 0-2 Punkte',\n    fastEdDenial: 'Verneinung/Neglect: 0-2 Punkte',\n    criticalValuesTitle: 'Kritische Werte',\n    criticalBp: 'Systolischer RR > 180: Erhöhtes ICB-Risiko',\n    criticalGfap: 'GFAP > 500 pg/mL: Signifikanter Marker',\n    criticalFastEd: 'FAST-ED ≥ 4: LVO in Betracht ziehen',\n\n    // FAST-ED Calculator Modal\n    fastEdCalculatorTitle: 'FAST-ED-Score-Rechner',\n    fastEdCalculatorSubtitle: 'Klicken Sie, um FAST-ED-Score-Komponenten zu berechnen',\n    facialPalsyTitle: 'Fazialisparese',\n    facialPalsyNormal: 'Normal (0)',\n    facialPalsyMild: 'Vorhanden (1)',\n    armWeaknessTitle: 'Armschwäche',\n    armWeaknessNormal: 'Normal (0)',\n    armWeaknessMild: 'Leichte Schwäche oder Absinken (1)',\n    armWeaknessSevere: 'Schwere Schwäche oder fällt sofort ab (2)',\n    speechChangesTitle: 'Sprachstörungen',\n    speechChangesNormal: 'Normal (0)',\n    speechChangesMild: 'Leichte Dysarthrie oder Aphasie (1)',\n    speechChangesSevere: 'Schwere Dysarthrie oder Aphasie (2)',\n    eyeDeviationTitle: 'Blickdeviation',\n    eyeDeviationNormal: 'Normal (0)',\n    eyeDeviationPartial: 'Partielle Blickdeviation (1)',\n    eyeDeviationForced: 'Forcierte Blickdeviation (2)',\n    denialNeglectTitle: 'Verneinung/Neglect',\n    denialNeglectNormal: 'Normal (0)',\n    denialNeglectPartial: 'Partieller Neglect (1)',\n    denialNeglectComplete: 'Kompletter Neglect (2)',\n    totalScoreTitle: 'Gesamt-FAST-ED-Score',\n    riskLevel: 'Risikostufe',\n    riskLevelLow: 'NIEDRIG (Score <4)',\n    riskLevelHigh: 'HOCH (Score ≥4 - LVO erwägen)',\n    applyScore: 'Score Anwenden',\n    cancel: 'Abbrechen',\n\n    // Results Screen Enhancements\n    riskAnalysis: 'Risikoanalyse',\n    riskAnalysisSubtitle: 'Klinische Faktoren in dieser Bewertung',\n    contributingFactors: 'Beitragende Faktoren',\n    factorsShown: 'angezeigt',\n    positiveFactors: 'Positive Faktoren',\n    negativeFactors: 'Negative Faktoren',\n    clinicalInformation: 'Klinische Informationen',\n    clinicalRecommendations: 'Klinische Empfehlungen',\n    clinicalRec1: 'Sofortige Bildgebung erwägen bei hohem ICB-Risiko',\n    clinicalRec2: 'Stroke-Team aktivieren bei LVO-Score ≥ 50%',\n    clinicalRec3: 'Blutdruck engmaschig überwachen',\n    clinicalRec4: 'Alle Befunde gründlich dokumentieren',\n    noDriverData: 'Keine Treiberdaten verfügbar',\n    driverAnalysisUnavailable: 'Treiberanalyse nicht verfügbar',\n    driverInfoNotAvailable: 'Treiberinformationen von diesem Vorhersagemodell nicht verfügbar',\n    driverAnalysisNotAvailable: 'Treiberanalyse für diese Vorhersage nicht verfügbar',\n    lvoNotPossible: 'LVO-Bewertung mit begrenzten Daten nicht möglich',\n    fullExamRequired: 'Vollständige neurologische Untersuchung für LVO-Screening erforderlich',\n    limitedAssessment: 'Begrenzte Bewertung',\n\n    // Disclaimer\n    disclaimer: 'Klinischer Haftungsausschluss',\n    disclaimerText: 'Dieses Tool dient nur zur klinischen Entscheidungsunterstützung. Verwenden Sie immer klinisches Urteilsvermögen und befolgen Sie lokale Protokolle. Kein Ersatz für ärztliche Beurteilung.',\n    importantNote: 'Wichtig',\n    importantText: 'Diese Ergebnisse dienen nur zur klinischen Entscheidungsunterstützung. Verwenden Sie immer klinisches Urteilsvermögen und befolgen Sie institutionelle Protokolle.',\n\n    // ICH Volume and Mortality\n    predictedMortality: 'Vorhergesagte 30-Tage-Mortalität',\n    ichVolumeLabel: 'ICB-Volumen',\n    references: 'Referenzen',\n\n    // Input Summary\n    inputSummaryTitle: 'Eingabezusammenfassung',\n    inputSummarySubtitle: 'Für diese Analyse verwendete Werte',\n\n    // Footer\n    privacyLink: 'Datenschutzrichtlinie',\n    disclaimerLink: 'Medizinischer Haftungsausschluss',\n    versionLink: 'Version 2.1.0 - Research Preview',\n\n    // Privacy and disclaimers\n    privacyPolicy: 'Datenschutzrichtlinie: Dieses Tool verarbeitet Daten lokal. Keine Patientendaten werden gespeichert oder übertragen.',\n    medicalDisclaimer: 'Medizinischer Haftungsausschluss: Dieses Tool dient nur zur klinischen Entscheidungsunterstützung. Verwenden Sie immer klinisches Urteilsvermögen und befolgen Sie lokale Protokolle.',\n\n    // Error messages\n    networkError: 'Netzwerkfehler - bitte überprüfen Sie Ihre Verbindung und versuchen Sie es erneut',\n    requestTimeout: 'Anfrage-Timeout - bitte versuchen Sie es erneut',\n    apiError: 'Ergebnisse konnten nicht abgerufen werden',\n    validationError: 'Bitte überprüfen Sie Ihre Eingabewerte',\n\n    // Session\n    sessionTimeout: 'Ihre Sitzung war 30 Minuten lang inaktiv. Möchten Sie fortfahren?',\n    unsavedData: 'Sie haben ungespeicherte Daten. Sind Sie sicher, dass Sie verlassen möchten?',\n\n    // Stroke Centers\n    nearestCentersTitle: 'Nächstgelegene Schlaganfall-Zentren',\n    useCurrentLocation: 'Aktuellen Standort verwenden',\n    enterLocationPlaceholder: 'Stadt oder Adresse eingeben...',\n    enterManually: 'Standort manuell eingeben',\n    search: 'Suchen',\n    yourLocation: 'Ihr Standort',\n    recommendedCenters: 'Empfohlene Zentren',\n    alternativeCenters: 'Alternative Zentren',\n    noCentersFound: 'Keine Schlaganfall-Zentren in diesem Bereich gefunden',\n    gettingLocation: 'Standort wird ermittelt',\n    searchingLocation: 'Standort wird gesucht',\n    locationError: 'Standort konnte nicht ermittelt werden',\n    locationPermissionDenied: 'Standortzugriff verweigert. Bitte erlauben Sie Standortzugriff und versuchen Sie es erneut.',\n    locationUnavailable: 'Standortinformationen sind nicht verfügbar',\n    locationTimeout: 'Standortanfrage ist abgelaufen',\n    geolocationNotSupported: 'Geolokalisierung wird von diesem Browser nicht unterstützt',\n    geocodingNotImplemented: 'Standortsuche nicht verfügbar. Bitte verwenden Sie GPS oder geben Sie Koordinaten manuell ein.',\n    tryManualEntry: 'Versuchen Sie, Ihren Standort manuell einzugeben oder GPS zu verwenden.',\n    distanceNote: 'Entfernungen werden als Luftlinie berechnet. Tatsächliche Fahrzeiten können variieren.',\n    travelTimeNote: 'Fahrzeiten berechnet für Rettungsfahrzeuge mit Sondersignalen und Vorfahrtsberechtigung.',\n    calculatingTravelTimes: 'Fahrzeiten werden berechnet',\n    minutes: 'Min',\n    poweredByOrs: 'Fahrzeiten bereitgestellt von OpenRoute Service',\n\n    // Center Types and Services\n    comprehensiveCenter: 'Überregionales Schlaganfall-Zentrum',\n    primaryCenter: 'Regionales Schlaganfall-Zentrum',\n    telemetryCenter: 'Telemedizin-Zentrum',\n    thrombectomy: 'Thrombektomie',\n    neurosurgery: 'Neurochirurgie',\n    icu: 'Intensivstation',\n    telemedicine: 'Telemedizin',\n    stroke_unit: 'Stroke Unit',\n\n    // Actions\n    call: 'Anrufen',\n    directions: 'Wegbeschreibung',\n    emergency: 'Notfall',\n    certified: 'Zertifiziert',\n\n    // Prerequisites Modal\n    prerequisitesTitle: 'Voraussetzungen für Schlaganfall-Triage',\n    prerequisitesIntro: 'Bitte bestätigen Sie, dass alle folgenden Voraussetzungen erfüllt sind:',\n    prerequisitesWarning: 'Alle Voraussetzungen müssen erfüllt sein, um fortzufahren',\n    continue: 'Weiter',\n    acute_deficit: 'Akutes (schweres) neurologisches Defizit vorhanden',\n    symptom_onset: 'Symptombeginn innerhalb 6h',\n    no_preexisting: 'Keine vorbestehende schwere neurologische Defizite',\n    no_trauma: 'Kein Schädelhirntrauma vorhanden',\n\n    // Differential Diagnoses for Stroke Modules\n    differentialDiagnoses: 'Differentialdiagnosen',\n    reconfirmTimeWindow: 'Bitte Zeitfenster rekonfirmieren!',\n    unclearTimeWindow: 'Bei unklarem/erweitertem Zeitfenster ist auch ein beginnend demarkierter Hirninfarkt möglich',\n    rareDiagnoses: 'Seltene Diagnosen wie ein Glioblastom sind auch möglich',\n\n  },\n};\n","// Internationalization utilities for the Stroke Triage Assistant\n\nimport { messages } from './messages.js';\n\nclass I18n {\n  constructor() {\n    this.supportedLanguages = ['en', 'de'];\n    this.currentLanguage = this.detectLanguage();\n  }\n\n  // Detect browser language and default to appropriate language\n  detectLanguage() {\n    // Check if language is already set in localStorage\n    const savedLanguage = localStorage.getItem('language');\n    if (savedLanguage && this.supportedLanguages.includes(savedLanguage)) {\n      return savedLanguage;\n    }\n\n    // Detect browser language\n    const browserLang = navigator.language || navigator.userLanguage;\n    const langCode = browserLang.substring(0, 2).toLowerCase();\n\n    // Default to German if browser language is German, otherwise English\n    return langCode === 'de' ? 'de' : 'en';\n  }\n\n  // Get current language\n  getCurrentLanguage() {\n    return this.currentLanguage;\n  }\n\n  // Set language and save to localStorage\n  setLanguage(language) {\n    if (this.supportedLanguages.includes(language)) {\n      this.currentLanguage = language;\n      localStorage.setItem('language', language);\n\n      // Dispatch custom event for language change\n      window.dispatchEvent(new CustomEvent('languageChanged', {\n        detail: { language },\n      }));\n\n      return true;\n    }\n    return false;\n  }\n\n  // Get supported languages\n  getSupportedLanguages() {\n    return [...this.supportedLanguages];\n  }\n\n  // Translate a message key\n  t(key) {\n    const currentMessages = messages[this.currentLanguage] || messages.en;\n    return currentMessages[key] || key;\n  }\n\n  // Toggle between English and German\n  toggleLanguage() {\n    const newLanguage = this.currentLanguage === 'en' ? 'de' : 'en';\n    return this.setLanguage(newLanguage);\n  }\n\n  // Get language display name\n  getLanguageDisplayName(lang = null) {\n    const language = lang || this.currentLanguage;\n    const displayNames = {\n      en: 'English',\n      de: 'Deutsch',\n    };\n    return displayNames[language] || language;\n  }\n\n  // Format date/time according to current locale\n  formatDateTime(date) {\n    const locale = this.currentLanguage === 'de' ? 'de-DE' : 'en-US';\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }).format(date);\n  }\n\n  // Format time only according to current locale\n  formatTime(date) {\n    const locale = this.currentLanguage === 'de' ? 'de-DE' : 'en-US';\n    return new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }).format(date);\n  }\n}\n\n// Create singleton instance\nconst i18n = new I18n();\n\n// Export both the instance and the class\nexport { i18n, I18n };\n\n// Export convenience function for translation\nexport const t = (key) => i18n.t(key);\n","import { t, i18n } from '../../localization/i18n.js';\nimport { navigate } from '../../logic/handlers.js';\n\n/**\n * Prerequisites checklist items\n */\nconst getPrerequisites = () => [\n  { id: 'acute_deficit', checked: false },\n  { id: 'symptom_onset', checked: false },\n  { id: 'no_preexisting', checked: false },\n  { id: 'no_trauma', checked: false },\n];\n\n/**\n * Render prerequisites modal\n * @returns {string} HTML for prerequisites modal\n */\nexport function renderPrerequisitesModal() {\n  const prerequisites = getPrerequisites();\n\n  return `\n    <div id=\"prerequisitesModal\" class=\"modal prerequisites-modal\" style=\"display: flex;\">\n      <div class=\"modal-content prerequisites-content\">\n        <div class=\"modal-header\">\n          <h2>${t('prerequisitesTitle')}</h2>\n          <button class=\"modal-close\" id=\"closePrerequisites\">&times;</button>\n        </div>\n        \n        <div class=\"modal-body\">\n          <p class=\"prerequisites-intro\">\n            ${t('prerequisitesIntro')}\n          </p>\n          \n          <div class=\"prerequisites-list\">\n            ${prerequisites.map((item) => `\n              <div class=\"prerequisite-item\" data-id=\"${item.id}\">\n                <label class=\"toggle-switch\">\n                  <input type=\"checkbox\" id=\"${item.id}\" class=\"toggle-input\">\n                  <span class=\"toggle-slider\"></span>\n                </label>\n                <span class=\"prerequisite-label\">\n                  ${t(item.id)}\n                </span>\n              </div>\n            `).join('')}\n          </div>\n          \n          <div class=\"prerequisites-warning\" id=\"prerequisitesWarning\" style=\"display: none;\">\n            <span class=\"warning-icon\">⚠️</span>\n            <span class=\"warning-text\">\n              ${t('prerequisitesWarning')}\n            </span>\n          </div>\n        </div>\n        \n        <div class=\"modal-footer\">\n          <div class=\"button-group\">\n            <button type=\"button\" class=\"secondary\" id=\"cancelPrerequisites\">\n              ${t('cancel')}\n            </button>\n            <button type=\"button\" class=\"primary\" id=\"confirmPrerequisites\">\n              ${t('continue')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Initialize prerequisites modal event handlers\n */\nexport function initPrerequisitesModal() {\n  const modal = document.getElementById('prerequisitesModal');\n  if (!modal) {\n    console.error('Prerequisites modal not found');\n    return;\n  }\n\n  console.log('Initializing prerequisites modal');\n\n  // Close button handlers\n  const closeBtn = document.getElementById('closePrerequisites');\n  const cancelBtn = document.getElementById('cancelPrerequisites');\n  const confirmBtn = document.getElementById('confirmPrerequisites');\n\n  console.log('Modal buttons found:', { closeBtn: !!closeBtn, cancelBtn: !!cancelBtn, confirmBtn: !!confirmBtn });\n\n  const closeModal = () => {\n    modal.remove();\n    // Navigate back to welcome screen if cancelled\n    navigate('welcome');\n  };\n\n  closeBtn?.addEventListener('click', closeModal);\n  cancelBtn?.addEventListener('click', closeModal);\n\n  // Confirm button handler\n  confirmBtn?.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    console.log('Prerequisites confirm button clicked');\n    const checkboxes = modal.querySelectorAll('.toggle-input');\n    const allChecked = Array.from(checkboxes).every((cb) => cb.checked);\n    console.log('All prerequisites checked:', allChecked);\n\n    if (allChecked) {\n      console.log('Navigating to triage2');\n      modal.remove();\n      // Proceed to triage2 (stroke module selection)\n      navigate('triage2');\n    } else {\n      console.log('Showing prerequisites warning');\n      // Show warning\n      const warning = document.getElementById('prerequisitesWarning');\n      if (warning) {\n        warning.style.display = 'flex';\n        // Shake animation\n        warning.classList.add('shake');\n        setTimeout(() => warning.classList.remove('shake'), 500);\n      }\n    }\n  });\n\n  // Toggle change handler to hide warning when all checked\n  const checkboxes = modal.querySelectorAll('.toggle-input');\n  checkboxes.forEach((checkbox) => {\n    checkbox.addEventListener('change', () => {\n      const allChecked = Array.from(checkboxes).every((cb) => cb.checked);\n      const warning = document.getElementById('prerequisitesWarning');\n\n      if (allChecked && warning) {\n        warning.style.display = 'none';\n      }\n    });\n  });\n}\n\n/**\n * Show prerequisites modal\n */\nexport function showPrerequisitesModal() {\n  const existingModal = document.getElementById('prerequisitesModal');\n\n  // Always remove existing modal and create fresh one to handle language changes\n  if (existingModal) {\n    existingModal.remove();\n  }\n\n  // Create modal element directly instead of innerHTML\n  const modalElement = document.createElement('div');\n  modalElement.innerHTML = renderPrerequisitesModal();\n  const modal = modalElement.firstElementChild;\n\n  // Insert into DOM\n  document.body.appendChild(modal);\n\n  // Initialize immediately since DOM is ready\n  initPrerequisitesModal();\n}\n","import { VALIDATION_RULES } from '../config.js';\n\nexport function validateInput(name, value, rules, formData = null) {\n  const result = {\n    errors: [],\n    warnings: []\n  };\n\n  if (rules.required && !value && value !== 0) {\n    result.errors.push('This field is required');\n  }\n\n  if (rules.min !== undefined && value !== '' && !isNaN(value) && parseFloat(value) < rules.min) {\n    result.errors.push(`Value must be at least ${rules.min}`);\n  }\n\n  if (rules.max !== undefined && value !== '' && !isNaN(value) && parseFloat(value) > rules.max) {\n    result.errors.push(`Value must be at most ${rules.max}`);\n  }\n\n  if (rules.pattern && !rules.pattern.test(value)) {\n    result.errors.push('Invalid format');\n  }\n\n  // Medical validation checks (warnings, not blocking errors)\n  if (rules.medicalCheck && value !== '' && !isNaN(value)) {\n    const medicalWarning = rules.medicalCheck(parseFloat(value), formData);\n    if (medicalWarning) {\n      result.warnings.push(medicalWarning);\n    }\n  }\n\n  // For backward compatibility, return just errors array if no warnings\n  if (result.warnings.length === 0) {\n    return result.errors;\n  }\n\n  return result;\n}\n\nexport function validateForm(form) {\n  let isValid = true;\n  const validationErrors = {};\n\n  // Collect form data for medical checks\n  const formData = {};\n  Object.keys(VALIDATION_RULES).forEach((name) => {\n    const input = form.elements[name];\n    if (input) {\n      formData[name] = input.value;\n    }\n  });\n\n  const validationWarnings = {};\n\n  Object.entries(VALIDATION_RULES).forEach(([name, rules]) => {\n    const input = form.elements[name];\n    if (input) {\n      const validation = validateInput(name, input.value, rules, formData);\n\n      // Handle both old format (array) and new format (object)\n      if (Array.isArray(validation)) {\n        // Old format - just errors\n        if (validation.length > 0) {\n          validationErrors[name] = validation;\n          isValid = false;\n        }\n      } else {\n        // New format - errors and warnings\n        if (validation.errors.length > 0) {\n          validationErrors[name] = validation.errors;\n          isValid = false;\n        }\n        if (validation.warnings.length > 0) {\n          validationWarnings[name] = validation.warnings;\n        }\n      }\n    }\n  });\n\n  return { isValid, validationErrors, validationWarnings };\n}\n\nexport function showValidationErrors(container, validationErrors) {\n  Object.entries(validationErrors).forEach(([name, errors]) => {\n    const input = container.querySelector(`[name=\"${name}\"]`);\n    if (input) {\n      const group = input.closest('.input-group');\n      if (group) {\n        group.classList.add('error');\n        // Remove existing error messages\n        group.querySelectorAll('.error-message').forEach((el) => el.remove());\n        // Add new error message safely without innerHTML\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-message';\n\n        const iconSpan = document.createElement('span');\n        iconSpan.className = 'error-icon';\n        iconSpan.textContent = '⚠️';\n\n        errorDiv.appendChild(iconSpan);\n        errorDiv.appendChild(document.createTextNode(` ${errors[0]}`));\n        group.appendChild(errorDiv);\n      }\n    }\n  });\n}\n\nexport function showValidationWarnings(container, validationWarnings) {\n  Object.entries(validationWarnings).forEach(([name, warnings]) => {\n    const input = container.querySelector(`[name=\"${name}\"]`);\n    if (input) {\n      const group = input.closest('.input-group');\n      if (group) {\n        group.classList.add('warning');\n        // Remove existing warning messages\n        group.querySelectorAll('.warning-message').forEach((el) => el.remove());\n        // Add new warning message safely without innerHTML\n        const warningDiv = document.createElement('div');\n        warningDiv.className = 'warning-message';\n\n        const iconSpan = document.createElement('span');\n        iconSpan.className = 'warning-icon';\n        iconSpan.textContent = '💡';\n\n        warningDiv.appendChild(iconSpan);\n        warningDiv.appendChild(document.createTextNode(` ${warnings[0]}`));\n        group.appendChild(warningDiv);\n      }\n    }\n  });\n}\n\nexport function clearValidationErrors(container) {\n  container.querySelectorAll('.input-group.error').forEach((group) => {\n    group.classList.remove('error');\n    group.querySelectorAll('.error-message').forEach((el) => el.remove());\n  });\n}\n\nexport function clearValidationWarnings(container) {\n  container.querySelectorAll('.input-group.warning').forEach((group) => {\n    group.classList.remove('warning');\n    group.querySelectorAll('.warning-message').forEach((el) => el.remove());\n  });\n}\n\nexport function clearAllValidation(container) {\n  clearValidationErrors(container);\n  clearValidationWarnings(container);\n}\n","import { store } from '../state/store.js';\nimport {\n  predictComaIch, predictLimitedIch, predictFullStroke, APIError,\n} from '../api/client.js';\nimport { t } from '../localization/i18n.js';\nimport { showPrerequisitesModal } from '../ui/components/prerequisites-modal.js';\n\nimport { validateForm, showValidationErrors } from './validate.js';\n\nexport function handleTriage1(isComatose) {\n  store.logEvent('triage1_answer', { comatose: isComatose });\n\n  if (isComatose) {\n    navigate('coma');\n  } else {\n    // Show prerequisites modal for conscious patients\n    showPrerequisitesModal();\n  }\n}\n\nexport function handleTriage2(isExaminable) {\n  store.logEvent('triage2_answer', { examinable: isExaminable });\n  const nextScreen = isExaminable ? 'full' : 'limited';\n  navigate(nextScreen);\n}\n\nexport function navigate(screen) {\n  store.logEvent('navigate', {\n    from: store.getState().currentScreen,\n    to: screen,\n  });\n  store.navigate(screen);\n  window.scrollTo(0, 0);\n}\n\nexport function reset() {\n  if (store.hasUnsavedData()) {\n    if (!confirm('Are you sure you want to start over? All entered data will be lost.')) {\n      return;\n    }\n  }\n  store.logEvent('reset');\n  store.reset();\n}\n\nexport function goBack() {\n  const success = store.goBack();\n\n  if (success) {\n    store.logEvent('navigate_back');\n    window.scrollTo(0, 0);\n  } else {\n    goHome();\n  }\n}\n\nexport function goHome() {\n  store.logEvent('navigate_home');\n  store.goHome();\n  window.scrollTo(0, 0);\n}\n\nexport async function handleSubmit(e, container) {\n  e.preventDefault();\n  const form = e.target;\n  const { module } = form.dataset;\n\n  // Validate form\n  const validation = validateForm(form);\n  if (!validation.isValid) {\n    showValidationErrors(container, validation.validationErrors);\n    try {\n      // Focus first invalid field and announce summary for screen readers\n      const firstErrorName = Object.keys(validation.validationErrors)[0];\n      if (firstErrorName && form.elements[firstErrorName]) {\n        const el = form.elements[firstErrorName];\n        el.focus({ preventScroll: true });\n        el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n      const sr = document.createElement('div');\n      sr.className = 'sr-only';\n      sr.setAttribute('role', 'status');\n      sr.setAttribute('aria-live', 'polite');\n      const errorCount = Object.keys(validation.validationErrors).length;\n      sr.textContent = `${errorCount} field${errorCount === 1 ? '' : 's'} need attention.`;\n      document.body.appendChild(sr);\n      setTimeout(() => sr.remove(), 1200);\n    } catch {}\n    return;\n  }\n\n  // Collect inputs - handle all form elements including unchecked checkboxes\n  const inputs = {};\n\n  // Process all form elements to ensure checkboxes are included\n  Array.from(form.elements).forEach((element) => {\n    if (element.name) {\n      if (element.type === 'checkbox') {\n        inputs[element.name] = element.checked;\n      } else if (element.type === 'number') {\n        const n = parseFloat(element.value);\n        inputs[element.name] = isNaN(n) ? 0 : n;\n      } else if (element.type === 'hidden') {\n        // Handle hidden fields (like armparese from FAST-ED)\n        if (element.name === 'armparese') {\n          inputs[element.name] = element.value === 'true';\n        } else {\n          inputs[element.name] = element.value;\n        }\n      } else {\n        inputs[element.name] = element.value;\n      }\n    }\n  });\n\n  // Store form data\n  store.setFormData(module, inputs);\n\n  // Show loading state\n  const button = form.querySelector('button[type=submit]');\n  const originalContent = button ? button.innerHTML : '';\n  if (button) {\n    button.disabled = true;\n    button.innerHTML = `<span class=\"loading-spinner\"></span> ${t('analyzing')}`;\n  }\n\n  try {\n    // Run models based on module\n    let results;\n\n    switch (module) {\n      case 'coma':\n        const comaResult = await predictComaIch(inputs);\n        results = {\n          ich: comaResult,\n          lvo: null,\n        };\n        break;\n\n      case 'limited':\n        const limitedResult = await predictLimitedIch(inputs);\n        results = {\n          ich: limitedResult,\n          lvo: { notPossible: true },\n        };\n        break;\n\n      case 'full':\n        results = await predictFullStroke(inputs);\n        break;\n\n      default:\n        throw new Error(`Unknown module: ${module}`);\n    }\n\n    store.setResults(results);\n    store.logEvent('models_complete', { module, results });\n    navigate('results');\n  } catch (error) {\n    console.error('Error running models:', error);\n\n    let errorMessage = 'An error occurred during analysis. Please try again.';\n    if (error instanceof APIError) {\n      errorMessage = error.message;\n    }\n\n    showError(container, errorMessage);\n\n    if (button) {\n      button.disabled = false;\n      button.innerHTML = originalContent;\n    }\n  }\n}\n\nfunction showError(container, message) {\n  // Remove existing error alerts\n  container.querySelectorAll('.critical-alert').forEach((alert) => {\n    if (alert.querySelector('h4')?.textContent?.includes('Error')) {\n      alert.remove();\n    }\n  });\n\n  const alert = document.createElement('div');\n  alert.className = 'critical-alert';\n\n  // Create safe DOM structure without innerHTML to prevent XSS\n  const h4 = document.createElement('h4');\n  const iconSpan = document.createElement('span');\n  iconSpan.className = 'alert-icon';\n  iconSpan.textContent = '⚠️';\n  h4.appendChild(iconSpan);\n  h4.appendChild(document.createTextNode(' Error'));\n\n  const p = document.createElement('p');\n  p.textContent = message; // Safe text content only\n\n  alert.appendChild(h4);\n  alert.appendChild(p);\n\n  const containerDiv = container.querySelector('.container');\n  if (containerDiv) {\n    containerDiv.prepend(alert);\n  } else {\n    container.prepend(alert);\n  }\n\n  setTimeout(() => alert.remove(), 10000);\n}\n","/**\n * Legacy ICH Model - Simple Logistic Regression (Age + GFAP Only)\n *\n * This is a baseline model for research comparison purposes.\n * Uses only age and GFAP values with logistic regression.\n *\n * Performance Metrics:\n * - ROC-AUC: 0.789\n * - Recall: 40%\n * - Precision: 86%\n * - F1-Score: 55%\n *\n * FOR RESEARCH COMPARISON ONLY - NOT FOR CLINICAL USE\n */\n\nexport class LegacyICHModel {\n  // Training data parameters from original study\n  static PARAMS = {\n    age: {\n      mean: 74.59,\n      std: 12.75,\n    },\n    gfap: {\n      mean: 665.23,\n      std: 2203.77,\n    },\n    coefficients: {\n      intercept: 0.3248,\n      age: -0.2108, // Negative: older age slightly decreases odds in this simple model\n      gfap: 3.1631, // Positive: higher GFAP significantly increases odds\n    },\n  };\n\n  /**\n   * Calculate ICH probability using legacy logistic regression model\n   * @param {number} age - Patient age in years\n   * @param {number} gfapValue - GFAP value in pg/ml\n   * @returns {object} - Probability and diagnostic information\n   */\n  static calculateProbability(age, gfapValue) {\n    // Input validation\n    if (!age || !gfapValue || age <= 0 || gfapValue <= 0) {\n      return {\n        probability: 0,\n        confidence: 0,\n        isValid: false,\n        reason: 'Invalid inputs: age and GFAP required',\n      };\n    }\n\n    // Validate ranges\n    if (age < 18 || age > 120) {\n      return {\n        probability: 0,\n        confidence: 0,\n        isValid: false,\n        reason: `Age ${age} outside valid range (18-120 years)`,\n      };\n    }\n\n    if (gfapValue < 10 || gfapValue > 20000) {\n      console.warn(`GFAP ${gfapValue} outside typical range (10-20000 pg/ml)`);\n    }\n\n    try {\n      // Step 1: Scale inputs using training data statistics\n      const scaledAge = (age - this.PARAMS.age.mean) / this.PARAMS.age.std;\n      const scaledGfap = (gfapValue - this.PARAMS.gfap.mean) / this.PARAMS.gfap.std;\n\n      // Step 2: Calculate log-odds (logit)\n      const logit = this.PARAMS.coefficients.intercept\n                    + (this.PARAMS.coefficients.age * scaledAge)\n                    + (this.PARAMS.coefficients.gfap * scaledGfap);\n\n      // Step 3: Convert to probability using sigmoid function\n      const rawProbability = 1 / (1 + Math.exp(-logit));\n      const probability = rawProbability * 100; // Convert to percentage\n\n      // Step 4: Calculate confidence based on distance from decision boundary\n      // Confidence is higher when probability is closer to 0% or 100%\n      const confidence = Math.abs(rawProbability - 0.5) * 2; // 0 to 1 scale\n\n      // Step 5: Determine risk category\n      const riskCategory = this.getRiskCategory(probability);\n\n      return {\n        probability: Math.round(probability * 10) / 10, // Round to 1 decimal\n        confidence: Math.round(confidence * 100) / 100, // Round to 2 decimals\n        logit: Math.round(logit * 1000) / 1000, // Round to 3 decimals\n        riskCategory,\n        scaledInputs: {\n          age: Math.round(scaledAge * 1000) / 1000,\n          gfap: Math.round(scaledGfap * 1000) / 1000,\n        },\n        rawInputs: { age, gfap: gfapValue },\n        isValid: true,\n        calculationMethod: 'logistic_regression_age_gfap',\n      };\n    } catch (error) {\n      console.error('Legacy model calculation error:', error);\n      return {\n        probability: 0,\n        confidence: 0,\n        isValid: false,\n        reason: 'Calculation error',\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Get risk category and color based on probability\n   * @param {number} probability - Probability percentage (0-100)\n   * @returns {object} - Risk level information\n   */\n  static getRiskCategory(probability) {\n    if (probability < 10) {\n      return {\n        level: 'very_low',\n        color: '#10b981',\n        label: 'Very Low Risk',\n        description: 'Minimal ICH likelihood',\n      };\n    }\n    if (probability < 25) {\n      return {\n        level: 'low',\n        color: '#84cc16',\n        label: 'Low Risk',\n        description: 'Below typical threshold',\n      };\n    }\n    if (probability < 50) {\n      return {\n        level: 'moderate',\n        color: '#f59e0b',\n        label: 'Moderate Risk',\n        description: 'Elevated concern',\n      };\n    }\n    if (probability < 75) {\n      return {\n        level: 'high',\n        color: '#f97316',\n        label: 'High Risk',\n        description: 'Significant likelihood',\n      };\n    }\n    return {\n      level: 'very_high',\n      color: '#dc2626',\n      label: 'Very High Risk',\n      description: 'Critical ICH probability',\n    };\n  }\n\n  /**\n   * Compare legacy model with main model results\n   * @param {object} mainResults - Results from complex ML model\n   * @param {object} legacyResults - Results from legacy model\n   * @returns {object} - Comparison analysis\n   */\n  static compareModels(mainResults, legacyResults) {\n    if (!mainResults || !legacyResults || !legacyResults.isValid) {\n      return {\n        isValid: false,\n        reason: 'Invalid model results for comparison',\n      };\n    }\n\n    // Normalize probabilities to percentage scale (0-100)\n    let mainProb = mainResults.probability || 0;\n    if (mainProb <= 1) {\n      mainProb *= 100; // Convert 0.65 to 65%\n    }\n\n    const legacyProb = legacyResults.probability || 0; // Already in percentage\n\n    const absoluteDifference = mainProb - legacyProb;\n    const relativeDifference = legacyProb > 0 ? (absoluteDifference / legacyProb) * 100 : 0;\n\n    // Determine which model suggests higher risk\n    const higherRiskModel = mainProb > legacyProb ? 'main'\n      : legacyProb > mainProb ? 'legacy' : 'equal';\n\n    // Assess agreement level\n    let agreement;\n    const absDiff = Math.abs(absoluteDifference);\n    if (absDiff < 5) {\n      agreement = 'strong';\n    } else if (absDiff < 15) {\n      agreement = 'moderate';\n    } else if (absDiff < 30) {\n      agreement = 'weak';\n    } else {\n      agreement = 'poor';\n    }\n\n    return {\n      isValid: true,\n      probabilities: {\n        main: Math.round(mainProb * 10) / 10,\n        legacy: Math.round(legacyProb * 10) / 10,\n      },\n      differences: {\n        absolute: Math.round(absoluteDifference * 10) / 10,\n        relative: Math.round(relativeDifference * 10) / 10,\n      },\n      agreement: {\n        level: agreement,\n        higherRiskModel,\n      },\n      interpretation: this.getComparisonInterpretation(absoluteDifference, agreement),\n    };\n  }\n\n  /**\n   * Get interpretation of model comparison\n   * @param {number} difference - Absolute difference between models\n   * @param {string} agreement - Agreement level\n   * @returns {object} - Interpretation for researchers\n   */\n  static getComparisonInterpretation(difference, agreement) {\n    const absDiff = Math.abs(difference);\n\n    if (agreement === 'strong') {\n      return {\n        type: 'concordant',\n        message: 'Models show strong agreement',\n        implication: 'Age and GFAP are primary risk factors',\n      };\n    }\n\n    if (absDiff > 20) {\n      return {\n        type: 'divergent',\n        message: 'Significant model disagreement',\n        implication: 'Complex model captures additional risk factors not in age/GFAP',\n      };\n    }\n\n    return {\n      type: 'moderate_difference',\n      message: 'Models show moderate difference',\n      implication: 'Additional factors provide incremental predictive value',\n    };\n  }\n\n  /**\n   * Test the legacy model with known cases\n   * @returns {object} - Test results for validation\n   */\n  static runValidationTests() {\n    const testCases = [\n      {\n        age: 65, gfap: 100, expected: 'low', description: 'Younger patient, low GFAP',\n      },\n      {\n        age: 75, gfap: 500, expected: 'moderate', description: 'Average age, moderate GFAP',\n      },\n      {\n        age: 85, gfap: 1000, expected: 'high', description: 'Older patient, high GFAP',\n      },\n      {\n        age: 70, gfap: 2000, expected: 'very_high', description: 'High GFAP dominates',\n      },\n      {\n        age: 90, gfap: 50, expected: 'very_low', description: 'Low GFAP despite age',\n      },\n    ];\n\n    const results = testCases.map((testCase) => {\n      const result = this.calculateProbability(testCase.age, testCase.gfap);\n      return {\n        ...testCase,\n        result,\n        passed: result.isValid && result.riskCategory.level === testCase.expected,\n      };\n    });\n\n    const passedTests = results.filter((r) => r.passed).length;\n    const totalTests = results.length;\n\n    return {\n      summary: {\n        passed: passedTests,\n        total: totalTests,\n        passRate: Math.round((passedTests / totalTests) * 100),\n      },\n      details: results,\n    };\n  }\n\n  /**\n   * Get model metadata for research documentation\n   * @returns {object} - Model information\n   */\n  static getModelMetadata() {\n    return {\n      name: 'Legacy ICH Model',\n      type: 'Logistic Regression',\n      version: '1.0.0',\n      features: ['age', 'gfap'],\n      performance: {\n        rocAuc: 0.789,\n        recall: 0.40,\n        precision: 0.86,\n        f1Score: 0.55,\n        specificity: 0.94,\n      },\n      trainingData: {\n        samples: 'Historical cohort',\n        dateRange: 'Research study period',\n        validation: 'Cross-validation',\n      },\n      limitations: [\n        'Only uses age and GFAP - ignores clinical symptoms',\n        'Lower recall (40%) - misses some ICH cases',\n        'No time-to-onset consideration',\n        'No blood pressure or medication factors',\n        'Simplified feature set for baseline comparison',\n      ],\n      purpose: 'Research baseline for evaluating complex model improvements',\n    };\n  }\n}\n\n/**\n * Utility function to safely calculate legacy model in existing app flow\n * @param {object} patientData - Existing patient data structure\n * @returns {object|null} - Legacy model results or null if not applicable\n */\nexport function calculateLegacyICH(patientData) {\n  try {\n    // Extract age and GFAP from various possible data structures\n    const age = patientData?.age_years || patientData?.age || null;\n    const gfap = patientData?.gfap_value || patientData?.gfap || null;\n\n    if (!age || !gfap) {\n      return null; // Silently fail if required data not available\n    }\n\n    return LegacyICHModel.calculateProbability(age, gfap);\n  } catch (error) {\n    console.warn('Legacy ICH calculation failed (non-critical):', error);\n    return null;\n  }\n}\n\n/**\n * Export test function for validation\n */\nexport function testLegacyModel() {\n  console.log('🧪 Legacy ICH Model Validation Tests');\n  const testResults = LegacyICHModel.runValidationTests();\n\n  console.log(`✅ Passed: ${testResults.summary.passed}/${testResults.summary.total} tests`);\n  console.log(`📊 Pass Rate: ${testResults.summary.passRate}%`);\n\n  testResults.details.forEach((test) => {\n    const icon = test.passed ? '✅' : '❌';\n    console.log(`${icon} ${test.description}: ${test.result.probability.toFixed(1)}% (${test.result.riskCategory.level})`);\n  });\n\n  return testResults;\n}\n","/**\n * Research Data Logger\n * Safely stores model comparison data for research analysis\n * All data stays local - no external transmission\n */\n\nimport { LegacyICHModel } from './legacy-ich-model.js';\n\nexport class ResearchDataLogger {\n  static STORAGE_KEY = 'igfap_research_data';\n\n  static MAX_ENTRIES = 1000; // Prevent unlimited storage growth\n\n  /**\n   * Log comparison between main and legacy models\n   * @param {object} comparisonData - Data from both models\n   */\n  static logComparison(comparisonData) {\n    try {\n      const entry = {\n        id: this.generateEntryId(),\n        timestamp: new Date().toISOString(),\n        sessionId: this.getSessionId(),\n        ...comparisonData,\n      };\n\n      const stored = this.getStoredData();\n      stored.entries.push(entry);\n\n      // Limit storage size\n      if (stored.entries.length > this.MAX_ENTRIES) {\n        stored.entries = stored.entries.slice(-this.MAX_ENTRIES);\n      }\n\n      stored.lastUpdated = new Date().toISOString();\n      stored.totalComparisons = stored.entries.length;\n\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(stored));\n\n      console.log(`📊 Research data logged (${stored.totalComparisons} comparisons)`);\n      return true;\n    } catch (error) {\n      console.warn('Research data logging failed (non-critical):', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all stored research data\n   * @returns {object} - Complete research dataset\n   */\n  static getStoredData() {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) {\n        return this.createEmptyDataset();\n      }\n\n      const data = JSON.parse(stored);\n\n      // Validate structure\n      if (!data.entries || !Array.isArray(data.entries)) {\n        console.warn('Invalid research data structure, resetting');\n        return this.createEmptyDataset();\n      }\n\n      return data;\n    } catch (error) {\n      console.warn('Failed to load research data, creating new:', error);\n      return this.createEmptyDataset();\n    }\n  }\n\n  /**\n   * Create empty dataset structure\n   * @returns {object} - Empty research dataset\n   */\n  static createEmptyDataset() {\n    return {\n      version: '1.0.0',\n      created: new Date().toISOString(),\n      lastUpdated: null,\n      totalComparisons: 0,\n      entries: [],\n      metadata: {\n        app: 'iGFAP Stroke Triage',\n        purpose: 'Model comparison research',\n        dataRetention: 'Local storage only',\n      },\n    };\n  }\n\n  /**\n   * Export research data as CSV for analysis\n   * @returns {string} - CSV formatted data\n   */\n  static exportAsCSV() {\n    const data = this.getStoredData();\n\n    if (!data.entries || data.entries.length === 0) {\n      return 'No research data available for export';\n    }\n\n    // CSV headers\n    const headers = [\n      'timestamp',\n      'session_id',\n      'age',\n      'gfap_value',\n      'main_model_probability',\n      'main_model_module',\n      'legacy_model_probability',\n      'legacy_model_confidence',\n      'absolute_difference',\n      'relative_difference',\n      'agreement_level',\n      'higher_risk_model',\n    ];\n\n    // Convert entries to CSV rows\n    const rows = data.entries.map((entry) => [\n      entry.timestamp,\n      entry.sessionId,\n      entry.inputs?.age || '',\n      entry.inputs?.gfap || '',\n      entry.main?.probability || '',\n      entry.main?.module || '',\n      entry.legacy?.probability || '',\n      entry.legacy?.confidence || '',\n      entry.comparison?.differences?.absolute || '',\n      entry.comparison?.differences?.relative || '',\n      entry.comparison?.agreement?.level || '',\n      entry.comparison?.agreement?.higherRiskModel || '',\n    ].join(','));\n\n    // Combine headers and rows\n    const csv = [headers.join(','), ...rows].join('\\n');\n    return csv;\n  }\n\n  /**\n   * Export research data as JSON for detailed analysis\n   * @returns {string} - JSON formatted data\n   */\n  static exportAsJSON() {\n    const data = this.getStoredData();\n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Download research data as file\n   * @param {string} format - 'csv' or 'json'\n   */\n  static downloadData(format = 'csv') {\n    try {\n      const data = format === 'csv' ? this.exportAsCSV() : this.exportAsJSON();\n      const filename = `igfap-research-${Date.now()}.${format}`;\n\n      const blob = new Blob([data], {\n        type: format === 'csv' ? 'text/csv' : 'application/json',\n      });\n\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      console.log(`📥 Downloaded research data: ${filename}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to download research data:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all stored research data\n   */\n  static clearData() {\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n      console.log('🗑️ Research data cleared');\n      return true;\n    } catch (error) {\n      console.warn('Failed to clear research data:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get summary statistics of stored data\n   * @returns {object} - Summary statistics\n   */\n  static getDataSummary() {\n    const data = this.getStoredData();\n\n    if (!data.entries || data.entries.length === 0) {\n      return {\n        totalEntries: 0,\n        dateRange: null,\n        avgDifference: null,\n      };\n    }\n\n    const { entries } = data;\n    const differences = entries\n      .map((e) => e.comparison?.differences?.absolute)\n      .filter((d) => d !== undefined && d !== null);\n\n    const avgDifference = differences.length > 0\n      ? differences.reduce((sum, d) => sum + Math.abs(d), 0) / differences.length : 0;\n\n    return {\n      totalEntries: entries.length,\n      dateRange: {\n        first: entries[0]?.timestamp,\n        last: entries[entries.length - 1]?.timestamp,\n      },\n      avgAbsoluteDifference: Math.round(avgDifference * 10) / 10,\n      storageSize: JSON.stringify(data).length,\n    };\n  }\n\n  // Utility functions\n  static generateEntryId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  static getSessionId() {\n    let sessionId = sessionStorage.getItem('research_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now().toString(36)}`;\n      sessionStorage.setItem('research_session_id', sessionId);\n    }\n    return sessionId;\n  }\n}\n\n/**\n * Safe wrapper for logging research data in production\n * @param {object} mainResults - Main model results\n * @param {object} legacyResults - Legacy model results\n * @param {object} inputs - Patient input data\n */\nexport function safeLogResearchData(mainResults, legacyResults, inputs) {\n  try {\n    // Only log if research mode is enabled\n    if (!isResearchModeEnabled()) {\n      return;\n    }\n\n    const comparisonData = {\n      inputs: {\n        age: inputs.age_years || inputs.age,\n        gfap: inputs.gfap_value || inputs.gfap,\n        module: mainResults.module || 'unknown',\n      },\n      main: {\n        probability: mainResults.probability,\n        module: mainResults.module,\n        confidence: mainResults.confidence,\n      },\n      legacy: legacyResults,\n      comparison: legacyResults\n        ? LegacyICHModel.compareModels(mainResults, legacyResults) : null,\n    };\n\n    ResearchDataLogger.logComparison(comparisonData);\n  } catch (error) {\n    // Silently fail - never break main app functionality\n    console.warn('Research logging failed (non-critical):', error);\n  }\n}\n\n/**\n * Check if research mode is enabled for current module\n * @param {string} module - Current module (coma/limited/full)\n * @returns {boolean} - True if research features should be active\n */\nexport function isResearchModeEnabled(module = null) {\n  // Never enable research mode for coma module\n  if (module === 'coma') {\n    return false;\n  }\n\n  // Always enable for stroke modules (limited/full)\n  if (module === 'limited' || module === 'full') {\n    return true;\n  }\n\n  // Fallback: check if any stroke module data exists\n  if (typeof window !== 'undefined') {\n    try {\n      const store = window.store || require('../state/store.js')?.store;\n      if (store) {\n        const { formData } = store.getState();\n        const hasStrokeData = formData.limited || formData.full;\n        return hasStrokeData; // Enable if stroke module data exists\n      }\n    } catch (error) {\n      // Silently fail - research mode just won't work\n    }\n  }\n\n  return false;\n}\n\n/**\n * Enable/disable research mode\n * @param {boolean} enabled - Enable or disable research mode\n */\nexport function setResearchMode(enabled) {\n  try {\n    if (enabled) {\n      localStorage.setItem('research_mode', 'true');\n      console.log('🔬 Research mode enabled');\n    } else {\n      localStorage.removeItem('research_mode');\n      console.log('🔬 Research mode disabled');\n    }\n\n    // Trigger page refresh to apply changes\n    if (window.location.search.includes('research=')) {\n      // Remove research param from URL if disabling\n      if (!enabled) {\n        const url = new URL(window.location);\n        url.searchParams.delete('research');\n        window.history.replaceState({}, '', url);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.warn('Failed to toggle research mode:', error);\n    return false;\n  }\n}\n","/**\n * Research Comparison UI Components\n * Hidden by default, activated only for research purposes\n */\n\nimport { t } from '../localization/i18n.js';\n\nimport { LegacyICHModel } from './legacy-ich-model.js';\nimport { ResearchDataLogger, isResearchModeEnabled } from './data-logger.js';\n\n/**\n * Render research toggle button (no longer used - header button handles this)\n * @returns {string} - Empty string (header button replaces this)\n */\nexport function renderResearchToggle() {\n  return ''; // Header button now handles research panel toggling\n}\n\n/**\n * Render model comparison panel\n * @param {object} mainResults - Main model results\n * @param {object} legacyResults - Legacy model results\n * @param {object} inputs - Patient input data\n * @returns {string} - HTML for comparison panel\n */\nexport function renderModelComparison(mainResults, legacyResults, inputs) {\n  // Show debug info if legacy results are invalid\n  if (!legacyResults?.isValid) {\n    console.log('🔬 Legacy model results invalid:', legacyResults);\n    return `\n      <div class=\"research-panel\" id=\"researchPanel\" style=\"display: none;\">\n        <div class=\"research-header\">\n          <h4>🔬 Model Comparison (Research)</h4>\n          <button class=\"close-research\" id=\"closeResearch\">×</button>\n        </div>\n        <div class=\"research-error\">\n          <p>⚠️ Legacy model calculation failed</p>\n          <small>Debug: ${legacyResults?.reason || 'Unknown error'}</small>\n        </div>\n      </div>\n    `;\n  }\n\n  const comparison = LegacyICHModel.compareModels(mainResults, legacyResults);\n\n  return `\n    <div class=\"research-panel\" id=\"researchPanel\" style=\"display: none;\">\n      <div class=\"research-header\">\n        <h4>🔬 Model Comparison (Research)</h4>\n        <button class=\"close-research\" id=\"closeResearch\">×</button>\n      </div>\n      \n      <div class=\"model-comparison\">\n        ${renderProbabilityBars(mainResults, legacyResults)}\n        ${renderDifferenceAnalysis(comparison)}\n        ${renderCalculationDetails(legacyResults, inputs)}\n        ${renderModelMetrics()}\n      </div>\n      \n      <div class=\"research-actions\">\n        <button id=\"exportResearchData\" class=\"research-btn\">📥 Export Data</button>\n        <button id=\"toggleCalculationDetails\" class=\"research-btn\">🧮 Details</button>\n        <button id=\"clearResearchData\" class=\"research-btn danger\">🗑️ Clear</button>\n      </div>\n      \n      <div class=\"research-disclaimer\">\n        <small>\n          ⚠️ <strong>Research Mode Active</strong><br>\n          Legacy model: Age + GFAP only (ROC-AUC: 0.789, Recall: 40%)<br>\n          For baseline comparison. Main model includes additional clinical factors.\n        </small>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render probability comparison bars\n * @param {object} mainResults - Main model results\n * @param {object} legacyResults - Legacy model results\n * @returns {string} - HTML for probability bars\n */\nfunction renderProbabilityBars(mainResults, legacyResults) {\n  // Convert main model probability to percentage if it's in decimal form (0-1)\n  let mainProb = mainResults.probability || 0;\n  if (mainProb <= 1) {\n    mainProb *= 100; // Convert 0.65 to 65%\n  }\n\n  // Legacy model already returns percentage (0-100)\n  const legacyProb = legacyResults.probability || 0;\n\n  return `\n    <div class=\"probability-comparison\">\n      <div class=\"bar-group\">\n        <label class=\"bar-label\">Main Model (Complex) - ${mainResults.module || 'Unknown'}</label>\n        <div class=\"probability-bar\">\n          <div class=\"bar-fill main-model\" style=\"width: ${Math.min(mainProb, 100)}%\">\n            <span class=\"bar-value\">${mainProb.toFixed(1)}%</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"bar-group\">\n        <label class=\"bar-label\">Legacy Model (Age + GFAP Only)</label>\n        <div class=\"probability-bar\">\n          <div class=\"bar-fill legacy-model\" style=\"width: ${Math.min(legacyProb, 100)}%\">\n            <span class=\"bar-value\">${legacyProb.toFixed(1)}%</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render difference analysis\n * @param {object} comparison - Model comparison results\n * @returns {string} - HTML for difference analysis\n */\nfunction renderDifferenceAnalysis(comparison) {\n  if (!comparison.isValid) {\n    return '<div class=\"comparison-error\">Unable to compare models</div>';\n  }\n\n  const { differences, agreement } = comparison;\n  const isMainHigher = differences.absolute > 0;\n\n  return `\n    <div class=\"difference-analysis\">\n      <div class=\"difference-metric\">\n        <span class=\"metric-label\">Difference:</span>\n        <span class=\"metric-value ${isMainHigher ? 'higher' : 'lower'}\">\n          ${differences.absolute > 0 ? '+' : ''}${differences.absolute}%\n        </span>\n      </div>\n      \n      <div class=\"agreement-level\">\n        <span class=\"metric-label\">Agreement:</span>\n        <span class=\"agreement-badge ${agreement.level}\">\n          ${agreement.level.charAt(0).toUpperCase() + agreement.level.slice(1)}\n        </span>\n      </div>\n      \n      <div class=\"interpretation\">\n        <p class=\"interpretation-text\">${comparison.interpretation.message}</p>\n        <small class=\"interpretation-detail\">${comparison.interpretation.implication}</small>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render calculation details (expandable)\n * @param {object} legacyResults - Legacy model results\n * @param {object} inputs - Patient input data\n * @returns {string} - HTML for calculation details\n */\nfunction renderCalculationDetails(legacyResults, inputs) {\n  return `\n    <div class=\"calculation-details\" id=\"calculationDetails\" style=\"display: none;\">\n      <h5>Legacy Model Calculation</h5>\n      <div class=\"calculation-steps\">\n        <div class=\"step\">\n          <strong>Inputs:</strong> Age ${inputs.age}, GFAP ${inputs.gfap} pg/ml\n        </div>\n        <div class=\"step\">\n          <strong>Scaling:</strong> Age → ${legacyResults.scaledInputs.age}, GFAP → ${legacyResults.scaledInputs.gfap}\n        </div>\n        <div class=\"step\">\n          <strong>Logit:</strong> ${legacyResults.logit}\n        </div>\n        <div class=\"step\">\n          <strong>Probability:</strong> ${legacyResults.probability}% (Confidence: ${(legacyResults.confidence * 100).toFixed(0)}%)\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render model performance metrics\n * @returns {string} - HTML for model metrics\n */\nfunction renderModelMetrics() {\n  const metadata = LegacyICHModel.getModelMetadata();\n\n  return `\n    <div class=\"model-metrics\">\n      <h5>Performance Comparison</h5>\n      <div class=\"metrics-grid\">\n        <div class=\"metric-item\">\n          <span class=\"metric-name\">ROC-AUC</span>\n          <span class=\"metric-value\">Legacy: ${metadata.performance.rocAuc}</span>\n        </div>\n        <div class=\"metric-item\">\n          <span class=\"metric-name\">Recall</span>\n          <span class=\"metric-value\">Legacy: ${(metadata.performance.recall * 100).toFixed(0)}%</span>\n        </div>\n        <div class=\"metric-item\">\n          <span class=\"metric-name\">Precision</span>\n          <span class=\"metric-value\">Legacy: ${(metadata.performance.precision * 100).toFixed(0)}%</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Initialize research mode event handlers\n */\nexport function initializeResearchMode() {\n  // Always initialize if research panel exists\n  const researchPanel = document.getElementById('researchPanel');\n  if (!researchPanel) {\n    return;\n  }\n\n  // Close research panel\n  const closeResearch = document.getElementById('closeResearch');\n  if (closeResearch) {\n    closeResearch.addEventListener('click', () => {\n      const panel = document.getElementById('researchPanel');\n      if (panel) {\n        panel.style.display = 'none';\n      }\n    });\n  }\n\n  // Export data button\n  const exportButton = document.getElementById('exportResearchData');\n  if (exportButton) {\n    exportButton.addEventListener('click', () => {\n      ResearchDataLogger.downloadData('csv');\n    });\n  }\n\n  // Toggle calculation details\n  const detailsToggle = document.getElementById('toggleCalculationDetails');\n  if (detailsToggle) {\n    detailsToggle.addEventListener('click', () => {\n      const details = document.getElementById('calculationDetails');\n      if (details) {\n        details.style.display = details.style.display === 'none' ? 'block' : 'none';\n        detailsToggle.textContent = details.style.display === 'none' ? '🧮 Details' : '🧮 Hide';\n      }\n    });\n  }\n\n  // Clear data button\n  const clearButton = document.getElementById('clearResearchData');\n  if (clearButton) {\n    clearButton.addEventListener('click', () => {\n      if (confirm('Clear all research data? This cannot be undone.')) {\n        ResearchDataLogger.clearData();\n\n        // Update display\n        const summary = ResearchDataLogger.getDataSummary();\n        console.log(`Data cleared. Total entries: ${summary.totalEntries}`);\n      }\n    });\n  }\n\n  console.log('🔬 Research mode initialized');\n}\n","/**\n * Authentication System for iGFAP Stroke Triage Assistant\n * Research Preview Access Control\n *\n * @author iGFAP Project Team\n * @contact Deepak Bos <bosdeepak@gmail.com>\n */\n\nexport class AuthenticationManager {\n  constructor() {\n    this.isAuthenticated = false;\n    this.sessionTimeout = 4 * 60 * 60 * 1000; // 4 hours for research sessions\n    this.lastActivity = Date.now();\n    this.setupActivityTracking();\n  }\n\n  /**\n   * Authenticate user with research access password\n   * @param {string} password - Research access password\n   * @returns {boolean} - Authentication success\n   */\n  async authenticate(hashedInput) {\n    // Secure password verification for research preview\n    // SHA-256 hash of \"Neuro25\"\n    const validHash = await this.hashPassword('Neuro25');\n\n    if (hashedInput === validHash) {\n      this.isAuthenticated = true;\n      this.lastActivity = Date.now();\n      this.storeAuthSession();\n      return true;\n    }\n\n    // Rate limiting - delay on failed attempts\n    await this.delayFailedAttempt();\n    return false;\n  }\n\n  /**\n   * Check if current session is valid\n   * @returns {boolean} - Session validity\n   */\n  isValidSession() {\n    if (!this.isAuthenticated) {\n      return this.checkStoredSession();\n    }\n\n    const timeSinceActivity = Date.now() - this.lastActivity;\n    if (timeSinceActivity > this.sessionTimeout) {\n      this.logout();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Update activity timestamp\n   */\n  updateActivity() {\n    this.lastActivity = Date.now();\n    this.storeAuthSession();\n  }\n\n  /**\n   * Logout and clear session\n   */\n  logout() {\n    this.isAuthenticated = false;\n    sessionStorage.removeItem('auth_session');\n    sessionStorage.removeItem('auth_timestamp');\n  }\n\n  /**\n   * Simple hash function for password verification\n   * Note: For production medical device, use proper bcrypt/PBKDF2\n   * @param {string} input - Password to hash\n   * @returns {string} - Hashed password\n   */\n  async hashPassword(input) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(input);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  }\n\n  /**\n   * Store authenticated session\n   */\n  storeAuthSession() {\n    if (this.isAuthenticated) {\n      sessionStorage.setItem('auth_session', 'verified');\n      sessionStorage.setItem('auth_timestamp', this.lastActivity.toString());\n    }\n  }\n\n  /**\n   * Check for existing valid session\n   * @returns {boolean} - Stored session validity\n   */\n  checkStoredSession() {\n    const session = sessionStorage.getItem('auth_session');\n    const timestamp = sessionStorage.getItem('auth_timestamp');\n\n    if (session === 'verified' && timestamp) {\n      const lastActivity = parseInt(timestamp);\n      const timeSinceActivity = Date.now() - lastActivity;\n\n      if (timeSinceActivity < this.sessionTimeout) {\n        this.isAuthenticated = true;\n        this.lastActivity = lastActivity;\n        return true;\n      }\n    }\n\n    this.logout();\n    return false;\n  }\n\n  /**\n   * Setup activity tracking for session management\n   */\n  setupActivityTracking() {\n    // Track user interactions to maintain session\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n\n    const updateActivity = () => {\n      if (this.isAuthenticated) {\n        this.updateActivity();\n      }\n    };\n\n    events.forEach((event) => {\n      document.addEventListener(event, updateActivity, { passive: true });\n    });\n  }\n\n  /**\n   * Rate limiting for failed authentication attempts\n   */\n  async delayFailedAttempt() {\n    return new Promise((resolve) => {\n      setTimeout(resolve, 1000); // 1 second delay\n    });\n  }\n\n  /**\n   * Get session status for UI\n   * @returns {object} - Session information\n   */\n  getSessionInfo() {\n    if (!this.isAuthenticated) {\n      return { authenticated: false };\n    }\n\n    const timeRemaining = this.sessionTimeout - (Date.now() - this.lastActivity);\n    const hoursRemaining = Math.floor(timeRemaining / (60 * 60 * 1000));\n    const minutesRemaining = Math.floor((timeRemaining % (60 * 60 * 1000)) / (60 * 1000));\n\n    return {\n      authenticated: true,\n      timeRemaining: `${hoursRemaining}h ${minutesRemaining}m`,\n      lastActivity: new Date(this.lastActivity).toLocaleTimeString(),\n    };\n  }\n}\n\n// Export singleton instance\nexport const authManager = new AuthenticationManager();\n","export function renderProgressIndicator(currentStep) {\n  const steps = [\n    { id: 1, label: 'Triage' },\n    { id: 2, label: 'Assessment' },\n    { id: 3, label: 'Results' },\n  ];\n\n  let html = '<div class=\"progress-indicator\">';\n  steps.forEach((step, index) => {\n    const isActive = step.id === currentStep;\n    const isCompleted = step.id < currentStep;\n    html += `\n      <div class=\"progress-step ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''}\">\n        ${isCompleted ? '' : step.id}\n      </div>\n    `;\n    if (index < steps.length - 1) {\n      html += `<div class=\"progress-line ${isCompleted ? 'completed' : ''}\"></div>`;\n    }\n  });\n  html += '</div>';\n  return html;\n}\n","import { renderProgressIndicator } from '../components/progress.js';\nimport { t } from '../../localization/i18n.js';\n\nexport function renderTriage1() {\n  return `\n    <div class=\"container\">\n      ${renderProgressIndicator(1)}\n      <h2>${t('triage1Title')}</h2>\n      <div class=\"triage-question\">\n        ${t('triage1Question')}\n        <small>${t('triage1Help')}</small>\n      </div>\n      <div class=\"triage-buttons\">\n        <button class=\"yes-btn\" data-action=\"triage1\" data-value=\"true\">${t('triage1Yes')}</button>\n        <button class=\"no-btn\" data-action=\"triage1\" data-value=\"false\">${t('triage1No')}</button>\n      </div>\n    </div>\n  `;\n}\n","import { renderProgressIndicator } from '../components/progress.js';\nimport { t } from '../../localization/i18n.js';\n\nexport function renderTriage2() {\n  return `\n    <div class=\"container\">\n      ${renderProgressIndicator(1)}\n      <h2>${t('triage2Title')}</h2>\n      <div class=\"triage-question\">\n        ${t('triage2Question')}\n        <small>${t('triage2Help')}</small>\n      </div>\n      <div class=\"triage-buttons\">\n        <button class=\"yes-btn\" data-action=\"triage2\" data-value=\"true\">${t('triage2Yes')}</button>\n        <button class=\"no-btn\" data-action=\"triage2\" data-value=\"false\">${t('triage2No')}</button>\n      </div>\n    </div>\n  `;\n}\n","import { renderProgressIndicator } from '../components/progress.js';\nimport { GFAP_RANGES } from '../../config.js';\nimport { t } from '../../localization/i18n.js';\n\nexport function renderComa() {\n  return `\n    <div class=\"container\">\n      ${renderProgressIndicator(2)}\n      <h2>${t('comaModuleTitle') || 'Coma Module'}</h2>\n      <form data-module=\"coma\">\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"gfap_value\">\n              ${t('gfapValueLabel')}\n              <span class=\"tooltip\">ℹ️\n                <span class=\"tooltiptext\">${t('gfapTooltipLong')}</span>\n              </span>\n            </label>\n            <input type=\"number\" id=\"gfap_value\" name=\"gfap_value\" min=\"${GFAP_RANGES.min}\" max=\"${GFAP_RANGES.max}\" step=\"0.1\" required aria-describedby=\"gfap-help\">\n            <div id=\"gfap-help\" class=\"input-help\">\n              ${t('gfapRange').replace('{min}', GFAP_RANGES.min).replace('{max}', GFAP_RANGES.max)}\n            </div>\n          </div>\n        </div>\n        <button type=\"submit\" class=\"primary\">${t('analyzeIchRisk')}</button>\n        <button type=\"button\" class=\"secondary\" data-action=\"reset\">${t('startOver')}</button>\n      </form>\n    </div>\n  `;\n}\n","import { renderProgressIndicator } from '../components/progress.js';\nimport { GFAP_RANGES } from '../../config.js';\nimport { t } from '../../localization/i18n.js';\n\nexport function renderLimited() {\n  return `\n    <div class=\"container\">\n      ${renderProgressIndicator(2)}\n      <h2>${t('limitedDataModuleTitle') || 'Limited Data Module'}</h2>\n      <form data-module=\"limited\">\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"age_years\">${t('ageYearsLabel')}</label>\n            <input type=\"number\" name=\"age_years\" id=\"age_years\" min=\"0\" max=\"120\" required aria-describedby=\"age-help\">\n            <div id=\"age-help\" class=\"input-help\">${t('ageYearsHelp')}</div>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"systolic_bp\">${t('systolicBpLabel')}</label>\n            <div class=\"input-with-unit\">\n              <input type=\"number\" name=\"systolic_bp\" id=\"systolic_bp\" min=\"60\" max=\"300\" required aria-describedby=\"sbp-help\" inputmode=\"numeric\">\n              <span class=\"unit\">mmHg</span>\n            </div>\n            <div id=\"sbp-help\" class=\"input-help\">${t('systolicBpHelp')}</div>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"diastolic_bp\">${t('diastolicBpLabel')}</label>\n            <div class=\"input-with-unit\">\n              <input type=\"number\" name=\"diastolic_bp\" id=\"diastolic_bp\" min=\"30\" max=\"200\" required aria-describedby=\"dbp-help\" inputmode=\"numeric\">\n              <span class=\"unit\">mmHg</span>\n            </div>\n            <div id=\"dbp-help\" class=\"input-help\">${t('diastolicBpHelp')}</div>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"gfap_value\">\n              ${t('gfapValueLabel')}\n              <span class=\"tooltip\">ℹ️\n                <span class=\"tooltiptext\">${t('gfapTooltipLong')}</span>\n              </span>\n            </label>\n            <div class=\"input-with-unit\">\n              <input type=\"number\" name=\"gfap_value\" id=\"gfap_value\" min=\"${GFAP_RANGES.min}\" max=\"${GFAP_RANGES.max}\" step=\"0.1\" required inputmode=\"decimal\">\n              <span class=\"unit\">pg/mL</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"checkbox-group\">\n          <label class=\"checkbox-wrapper\">\n            <input type=\"checkbox\" name=\"vigilanzminderung\" id=\"vigilanzminderung\">\n            <span class=\"checkbox-label\">${t('vigilanceReduction')}</span>\n          </label>\n        </div>\n        <button type=\"submit\" class=\"primary\">${t('analyzeIchRisk')}</button>\n        <button type=\"button\" class=\"secondary\" data-action=\"reset\">${t('startOver')}</button>\n      </form>\n    </div>\n  `;\n}\n","import { renderProgressIndicator } from '../components/progress.js';\nimport { GFAP_RANGES } from '../../config.js';\nimport { t } from '../../localization/i18n.js';\n\nexport function renderFull() {\n  return `\n    <div class=\"container\">\n      ${renderProgressIndicator(2)}\n      <h2>${t('fullStrokeModuleTitle') || 'Full Stroke Module'}</h2>\n      <form data-module=\"full\">\n        <h3>${t('basicInformation')}</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"age_years\">${t('ageYearsLabel')}</label>\n            <input type=\"number\" name=\"age_years\" id=\"age_years\" min=\"0\" max=\"120\" required>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"systolic_bp\">${t('systolicBpLabel')}</label>\n            <div class=\"input-with-unit\">\n              <input type=\"number\" name=\"systolic_bp\" id=\"systolic_bp\" min=\"60\" max=\"300\" required inputmode=\"numeric\">\n              <span class=\"unit\">mmHg</span>\n            </div>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"diastolic_bp\">${t('diastolicBpLabel')}</label>\n            <div class=\"input-with-unit\">\n              <input type=\"number\" name=\"diastolic_bp\" id=\"diastolic_bp\" min=\"30\" max=\"200\" required inputmode=\"numeric\">\n              <span class=\"unit\">mmHg</span>\n            </div>\n          </div>\n        </div>\n\n        <h3>${t('biomarkersScores')}</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"gfap_value\">\n              ${t('gfapValueLabel')}\n              <span class=\"tooltip\">ℹ️\n                <span class=\"tooltiptext\">${t('gfapTooltip')}</span>\n              </span>\n            </label>\n            <div class=\"input-with-unit\">\n              <input type=\"number\" name=\"gfap_value\" id=\"gfap_value\" min=\"${GFAP_RANGES.min}\" max=\"${GFAP_RANGES.max}\" step=\"0.1\" required inputmode=\"decimal\">\n              <span class=\"unit\">pg/mL</span>\n            </div>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"fast_ed_score\">\n              ${t('fastEdScoreLabel')}\n              <span class=\"tooltip\">ℹ️\n                <span class=\"tooltiptext\">${t('fastEdCalculatorSubtitle')}</span>\n              </span>\n            </label>\n            <input type=\"number\" name=\"fast_ed_score\" id=\"fast_ed_score\" min=\"0\" max=\"9\" required readonly placeholder=\"${t('fastEdCalculatorSubtitle')}\" style=\"cursor: pointer;\">\n            <input type=\"hidden\" name=\"armparese\" id=\"armparese_hidden\" value=\"false\">\n            <input type=\"hidden\" name=\"eye_deviation\" id=\"eye_deviation_hidden\" value=\"false\">\n          </div>\n        </div>\n\n        <h3>${t('clinicalSymptoms')}</h3>\n        <div class=\"input-grid\">\n          <div class=\"checkbox-group\">\n            <label class=\"checkbox-wrapper\">\n              <input type=\"checkbox\" name=\"headache\" id=\"headache\">\n              <span class=\"checkbox-label\">${t('headacheLabel')}</span>\n            </label>\n            <label class=\"checkbox-wrapper\">\n              <input type=\"checkbox\" name=\"vigilanzminderung\" id=\"vigilanzminderung\">\n              <span class=\"checkbox-label\">${t('vigilanzLabel')}</span>\n            </label>\n          </div>\n          <div class=\"checkbox-group\">\n            <label class=\"checkbox-wrapper\">\n              <input type=\"checkbox\" name=\"beinparese\" id=\"beinparese\">\n              <span class=\"checkbox-label\">${t('legParesis')}</span>\n            </label>\n          </div>\n        </div>\n\n        <h3>${t('medicalHistory')}</h3>\n        <div class=\"input-grid\">\n          <div class=\"checkbox-group\">\n            <label class=\"checkbox-wrapper\">\n              <input type=\"checkbox\" name=\"atrial_fibrillation\" id=\"atrial_fibrillation\">\n              <span class=\"checkbox-label\">${t('atrialFibrillation')}</span>\n            </label>\n          </div>\n          <div class=\"checkbox-group\">\n            <label class=\"checkbox-wrapper\">\n              <input type=\"checkbox\" name=\"anticoagulated_noak\" id=\"anticoagulated_noak\">\n              <span class=\"checkbox-label\">${t('onNoacDoac')}</span>\n            </label>\n          </div>\n          <div class=\"checkbox-group\">\n            <label class=\"checkbox-wrapper\">\n              <input type=\"checkbox\" name=\"antiplatelets\" id=\"antiplatelets\">\n              <span class=\"checkbox-label\">${t('onAntiplatelets')}</span>\n            </label>\n          </div>\n        </div>\n\n        <button type=\"submit\" class=\"primary\">${t('analyzeStrokeRisk')}</button>\n        <button type=\"button\" class=\"secondary\" data-action=\"reset\">${t('startOver')}</button>\n      </form>\n    </div>\n  `;\n}\n","import { t } from '../../localization/i18n.js';\n\nexport function renderCriticalAlert() {\n  return `\n    <div class=\"critical-alert\">\n      <h4><span class=\"alert-icon\">🚨</span> ${t('criticalAlertTitle')}</h4>\n      <p>${t('criticalAlertMessage')}</p>\n    </div>\n  `;\n}\n","// User-friendly label formatter for technical field names\n// Converts technical driver and field names to user-friendly labels\n\nimport { t } from '../localization/i18n.js';\n\n/**\n * Mapping of technical field names to the same labels used in input forms\n * Uses existing localization keys from the input forms\n */\nconst FIELD_LABEL_MAP = {\n  // Age and demographics\n  age_years: 'ageLabel',\n  age: 'ageLabel',\n\n  // Blood pressure\n  systolic_bp: 'systolicLabel',\n  diastolic_bp: 'diastolicLabel',\n  systolic_blood_pressure: 'systolicLabel',\n  diastolic_blood_pressure: 'diastolicLabel',\n  blood_pressure_systolic: 'systolicLabel',\n  blood_pressure_diastolic: 'diastolicLabel',\n\n  // Biomarkers\n  gfap_value: 'gfapLabel',\n  gfap: 'gfapLabel',\n  gfap_level: 'gfapLabel',\n\n  // Clinical scores\n  fast_ed_score: 'fastEdLabel',\n  fast_ed: 'fastEdLabel',\n  fast_ed_total: 'fastEdLabel',\n\n  // Neurological symptoms\n  vigilanzminderung: 'vigilanzLabel',\n  vigilance_reduction: 'vigilanzLabel',\n  reduced_consciousness: 'vigilanzLabel',\n  armparese: 'armPareseLabel',\n  arm_paresis: 'armPareseLabel',\n  arm_weakness: 'armPareseLabel',\n  beinparese: 'beinPareseLabel',\n  leg_paresis: 'beinPareseLabel',\n  leg_weakness: 'beinPareseLabel',\n  eye_deviation: 'eyeDeviationLabel',\n  blickdeviation: 'eyeDeviationLabel',\n  headache: 'headacheLabel',\n  kopfschmerzen: 'headacheLabel',\n\n  // Medical history\n  atrial_fibrillation: 'atrialFibLabel',\n  vorhofflimmern: 'atrialFibLabel',\n  anticoagulated_noak: 'anticoagLabel',\n  anticoagulation: 'anticoagLabel',\n  antiplatelets: 'antiplateletsLabel',\n  thrombozytenaggregationshemmer: 'antiplateletsLabel',\n};\n\n/**\n * Fallback patterns for common technical terms\n * Used when no specific mapping exists\n */\nconst PATTERN_REPLACEMENTS = [\n  { pattern: /_score$/, replacement: ' Score' },\n  { pattern: /_value$/, replacement: ' Level' },\n  { pattern: /_bp$/, replacement: ' Blood Pressure' },\n  { pattern: /_years?$/, replacement: ' (years)' },\n  { pattern: /^ich_/, replacement: 'Brain Bleeding ' },\n  { pattern: /^lvo_/, replacement: 'Large Vessel ' },\n  { pattern: /parese$/, replacement: 'Weakness' },\n  { pattern: /deviation$/, replacement: 'Movement' },\n];\n\n/**\n * Format a technical field name using the same labels as input forms\n * @param {string} fieldName - Technical field name (e.g., 'fast_ed_score')\n * @returns {string} - Consistent medical terminology label\n */\nexport function formatDriverName(fieldName) {\n  if (!fieldName) {\n    return '';\n  }\n\n  // First, try to find exact match in mapping to input form labels\n  const mappedKey = FIELD_LABEL_MAP[fieldName.toLowerCase()];\n  if (mappedKey) {\n    const translated = t(mappedKey);\n    if (translated && translated !== mappedKey) {\n      return translated;\n    }\n  }\n\n  // Apply pattern-based replacements for common medical terms\n  let formatted = fieldName.toLowerCase();\n  PATTERN_REPLACEMENTS.forEach(({ pattern, replacement }) => {\n    formatted = formatted.replace(pattern, replacement);\n  });\n\n  // Clean up and format - keep medical terminology consistent\n  formatted = formatted\n    .replace(/_/g, ' ') // Replace underscores with spaces\n    .replace(/\\b\\w/g, (l) => l.toUpperCase()) // Title case\n    .trim();\n\n  return formatted;\n}\n\n/**\n * Format field names for input summary display\n * @param {string} fieldName - Technical field name\n * @returns {string} - User-friendly label for summary\n */\nexport function formatSummaryLabel(fieldName) {\n  // Use the same logic but with specific summary context\n  const friendlyLabel = formatDriverName(fieldName);\n\n  // Remove units from summary labels as they're shown in values\n  return friendlyLabel\n    .replace(/\\s*\\([^)]*\\)\\s*/g, '') // Remove anything in parentheses\n    .trim();\n}\n\n/**\n * Format field values for display\n * @param {any} value - Field value\n * @param {string} fieldName - Field name for context\n * @returns {string} - Formatted display value\n */\nexport function formatDisplayValue(value, fieldName = '') {\n  if (value === null || value === undefined || value === '') {\n    return '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? '✓' : '✗';\n  }\n\n  if (typeof value === 'number') {\n    // Add units based on field type\n    if (fieldName.includes('bp') || fieldName.includes('blood_pressure')) {\n      return `${value} mmHg`;\n    }\n    if (fieldName.includes('gfap')) {\n      return `${value} pg/mL`;\n    }\n    if (fieldName.includes('age')) {\n      return `${value} years`;\n    }\n    if (fieldName.includes('score')) {\n      return value.toString();\n    }\n\n    // Default number formatting\n    return Number.isInteger(value) ? value.toString() : value.toFixed(1);\n  }\n\n  return value.toString();\n}\n\n/**\n * Get a short description for a clinical field\n * @param {string} fieldName - Technical field name\n * @returns {string} - Brief description\n */\nexport function getFieldDescription(fieldName) {\n  const descriptions = {\n    fast_ed_score: 'Stroke severity assessment',\n    gfap_value: 'Brain injury biomarker',\n    vigilanzminderung: 'Level of consciousness',\n    systolic_bp: 'Upper blood pressure reading',\n    diastolic_bp: 'Lower blood pressure reading',\n    atrial_fibrillation: 'Irregular heart rhythm',\n    anticoagulated_noak: 'Blood-thinning medication',\n    antiplatelets: 'Anti-clotting medication',\n  };\n\n  return descriptions[fieldName.toLowerCase()] || '';\n}\n","import { t } from '../../localization/i18n.js';\nimport { formatDriverName } from '../../utils/label-formatter.js';\n\nexport function renderDriversSection(ich, lvo) {\n  console.log('=== DRIVER RENDERING SECTION ===');\n\n  if (!ich?.drivers && !lvo?.drivers) {\n    console.log('❌ No drivers available for rendering');\n    return '';\n  }\n\n  let html = `\n    <div class=\"drivers-section\">\n      <div class=\"drivers-header\">\n        <h3><span class=\"driver-header-icon\">🎯</span> ${t('riskAnalysis')}</h3>\n        <p class=\"drivers-subtitle\">${t('riskAnalysisSubtitle')}</p>\n      </div>\n      <div class=\"enhanced-drivers-grid\">\n  `;\n\n  if (ich?.drivers) {\n    console.log('🧠 Rendering ICH drivers panel');\n    html += renderEnhancedDriversPanel(ich.drivers, 'ICH', 'ich', ich.probability);\n  }\n\n  if (lvo?.drivers && !lvo.notPossible) {\n    console.log('🩸 Rendering LVO drivers panel');\n    html += renderEnhancedDriversPanel(lvo.drivers, 'LVO', 'lvo', lvo.probability);\n  }\n\n  html += `\n      </div>\n    </div>\n  `;\n  return html;\n}\n\nexport function renderDriversPanel(drivers, title, type) {\n  if (!drivers || Object.keys(drivers).length === 0) {\n    return `\n      <div class=\"drivers-panel\">\n        <h4>\n          <span class=\"driver-icon ${type}\">${type === 'ich' ? 'I' : 'L'}</span>\n          ${title} ${t('riskFactors')}\n        </h4>\n        <p style=\"color: var(--text-secondary); font-style: italic;\">\n          Driver information not available from this prediction model.\n        </p>\n      </div>\n    `;\n  }\n\n  const driversViewModel = normalizeDrivers(drivers);\n\n  if (driversViewModel.kind === 'unavailable') {\n    return `\n      <div class=\"drivers-panel\">\n        <h4>\n          <span class=\"driver-icon ${type}\">${type === 'ich' ? 'I' : 'L'}</span>\n          ${title} ${t('riskFactors')}\n        </h4>\n        <p style=\"color: var(--text-secondary); font-style: italic;\">\n          Driver analysis not available for this prediction.\n        </p>\n      </div>\n    `;\n  }\n\n  let html = `\n    <div class=\"drivers-panel\">\n      <h4>\n        <span class=\"driver-icon ${type}\">${type === 'ich' ? 'I' : 'L'}</span>\n        ${title} Risk Factors\n      </h4>\n  `;\n\n  // Calculate relative importance for legacy panel\n  const totalPositiveWeightLegacy = driversViewModel.positive.reduce((sum, d) => sum + Math.abs(d.weight), 0);\n  const totalNegativeWeightLegacy = driversViewModel.negative.reduce((sum, d) => sum + Math.abs(d.weight), 0);\n\n  // Show positive drivers (increase risk)\n  if (driversViewModel.positive.length > 0) {\n    driversViewModel.positive.forEach((driver) => {\n      const relativeImportance = totalPositiveWeightLegacy > 0\n        ? (Math.abs(driver.weight) / totalPositiveWeightLegacy) * 100 : 0;\n      const width = Math.min(relativeImportance * 2, 100); // Scale for visualization\n      html += `\n        <div class=\"driver-item\">\n          <span class=\"driver-label\">${driver.label}</span>\n          <div class=\"driver-bar-container\">\n            <div class=\"driver-bar positive\" style=\"width: ${width}%\">\n              <span class=\"driver-value\">+${relativeImportance.toFixed(0)}%</span>\n            </div>\n          </div>\n        </div>\n      `;\n    });\n  }\n\n  // Show negative drivers (decrease risk)\n  if (driversViewModel.negative.length > 0) {\n    driversViewModel.negative.forEach((driver) => {\n      const relativeImportance = totalNegativeWeightLegacy > 0\n        ? (Math.abs(driver.weight) / totalNegativeWeightLegacy) * 100 : 0;\n      const width = Math.min(relativeImportance * 2, 100); // Scale for visualization\n      html += `\n        <div class=\"driver-item\">\n          <span class=\"driver-label\">${driver.label}</span>\n          <div class=\"driver-bar-container\">\n            <div class=\"driver-bar negative\" style=\"width: ${width}%\">\n              <span class=\"driver-value\">-${relativeImportance.toFixed(0)}%</span>\n            </div>\n          </div>\n        </div>\n      `;\n    });\n  }\n\n  // Show metadata if available\n  if (driversViewModel.meta && Object.keys(driversViewModel.meta).length > 0) {\n    html += `\n      <div style=\"margin-top: 15px; padding-top: 10px; border-top: 1px solid var(--border-color);\">\n        <small style=\"color: var(--text-secondary);\">\n    `;\n\n    if (driversViewModel.meta.base_value !== undefined) {\n      html += `Base value: ${driversViewModel.meta.base_value.toFixed(2)} `;\n    }\n    if (driversViewModel.meta.contrib_sum !== undefined) {\n      html += `Contrib sum: ${driversViewModel.meta.contrib_sum.toFixed(2)} `;\n    }\n    if (driversViewModel.meta.logit_total !== undefined) {\n      html += `Logit total: ${driversViewModel.meta.logit_total.toFixed(2)}`;\n    }\n\n    html += `\n        </small>\n      </div>\n    `;\n  }\n\n  html += '</div>';\n  return html;\n}\n\nexport function renderEnhancedDriversPanel(drivers, title, type, probability) {\n  if (!drivers || Object.keys(drivers).length === 0) {\n    console.log(`No drivers data for ${title}`);\n    return `\n      <div class=\"enhanced-drivers-panel ${type}\">\n        <div class=\"panel-header\">\n          <div class=\"panel-icon ${type}\">${type === 'ich' ? '🩸' : '🧠'}</div>\n          <div class=\"panel-title\">\n            <h4>${title} ${t('riskFactors')}</h4>\n            <span class=\"panel-subtitle\">${t('noDriverData')}</span>\n          </div>\n        </div>\n        <p class=\"no-drivers-message\">\n          ${t('driverInfoNotAvailable')}\n        </p>\n      </div>\n    `;\n  }\n\n  // Drivers are already in the correct format from our new extraction\n  const driversViewModel = drivers;\n\n  if (driversViewModel.kind === 'unavailable') {\n    return `\n      <div class=\"enhanced-drivers-panel ${type}\">\n        <div class=\"panel-header\">\n          <div class=\"panel-icon ${type}\">${type === 'ich' ? '🩸' : '🧠'}</div>\n          <div class=\"panel-title\">\n            <h4>${title} ${t('riskFactors')}</h4>\n            <span class=\"panel-subtitle\">${t('driverAnalysisUnavailable')}</span>\n          </div>\n        </div>\n        <p class=\"no-drivers-message\">\n          ${t('driverAnalysisNotAvailable')}\n        </p>\n      </div>\n    `;\n  }\n\n  // Sort drivers by absolute impact and limit to top 6 most important\n  const positiveDrivers = driversViewModel.positive\n    .sort((a, b) => Math.abs(b.weight) - Math.abs(a.weight))\n    .slice(0, 3); // Top 3 positive drivers\n\n  const negativeDrivers = driversViewModel.negative\n    .sort((a, b) => Math.abs(b.weight) - Math.abs(a.weight))\n    .slice(0, 3); // Top 3 negative drivers\n\n  const maxWeight = Math.max(\n    ...positiveDrivers.map((d) => Math.abs(d.weight)),\n    ...negativeDrivers.map((d) => Math.abs(d.weight)),\n    0.01, // Prevent division by zero\n  );\n\n  let html = `\n    <div class=\"enhanced-drivers-panel ${type}\">\n      <div class=\"panel-header\">\n        <div class=\"panel-icon ${type}\">${type === 'ich' ? '🩸' : '🧠'}</div>\n        <div class=\"panel-title\">\n          <h4>${title} ${t('riskFactors')}</h4>\n          <span class=\"panel-subtitle\">${t('contributingFactors')}</span>\n        </div>\n      </div>\n      \n      <div class=\"drivers-split-view\">\n        <div class=\"drivers-column positive-column\">\n          <div class=\"column-header\">\n            <span class=\"column-icon\">↑</span>\n            <span class=\"column-title\">${t('increaseRisk')}</span>\n          </div>\n          <div class=\"compact-drivers\">\n  `;\n\n  // Calculate relative importance percentages\n  const totalPositiveWeight = positiveDrivers.reduce((sum, d) => sum + Math.abs(d.weight), 0);\n\n  // Render positive drivers\n  if (positiveDrivers.length > 0) {\n    positiveDrivers.forEach((driver) => {\n      // Calculate relative importance as percentage of total positive contribution\n      const relativeImportance = totalPositiveWeight > 0\n        ? (Math.abs(driver.weight) / totalPositiveWeight) * 100 : 0;\n      const barWidth = (Math.abs(driver.weight) / maxWeight) * 100;\n      const cleanLabel = formatDriverName(driver.label);\n\n      html += `\n        <div class=\"compact-driver-item\">\n          <div class=\"compact-driver-label\">${cleanLabel}</div>\n          <div class=\"compact-driver-bar positive\" style=\"width: ${barWidth}%\">\n            <span class=\"compact-driver-value\">+${relativeImportance.toFixed(0)}%</span>\n          </div>\n        </div>\n      `;\n    });\n  } else {\n    html += `<div class=\"no-factors\">${t('noPositiveFactors')}</div>`;\n  }\n\n  html += `\n          </div>\n        </div>\n        \n        <div class=\"drivers-column negative-column\">\n          <div class=\"column-header\">\n            <span class=\"column-icon\">↓</span>\n            <span class=\"column-title\">${t('decreaseRisk')}</span>\n          </div>\n          <div class=\"compact-drivers\">\n  `;\n\n  // Calculate relative importance percentages for negative drivers\n  const totalNegativeWeight = negativeDrivers.reduce((sum, d) => sum + Math.abs(d.weight), 0);\n\n  // Render negative drivers\n  if (negativeDrivers.length > 0) {\n    negativeDrivers.forEach((driver) => {\n      // Calculate relative importance as percentage of total negative contribution\n      const relativeImportance = totalNegativeWeight > 0\n        ? (Math.abs(driver.weight) / totalNegativeWeight) * 100 : 0;\n      const barWidth = (Math.abs(driver.weight) / maxWeight) * 100;\n      const cleanLabel = formatDriverName(driver.label);\n\n      html += `\n        <div class=\"compact-driver-item\">\n          <div class=\"compact-driver-label\">${cleanLabel}</div>\n          <div class=\"compact-driver-bar negative\" style=\"width: ${barWidth}%\">\n            <span class=\"compact-driver-value\">-${relativeImportance.toFixed(0)}%</span>\n          </div>\n        </div>\n      `;\n    });\n  } else {\n    html += `<div class=\"no-factors\">${t('noNegativeFactors')}</div>`;\n  }\n\n  html += `\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  return html;\n}\n","// Comprehensive stroke center database for Germany\n// Covers Bayern, Baden-Württemberg, and Nordrhein-Westfalen\n// Total: 316 hospitals with hierarchical capabilities\n\nconst COMPREHENSIVE_HOSPITAL_DATABASE = {\n  bayern: {\n    neurosurgicalCenters: [\n      {\n        id: 'BY-NS-001',\n        name: 'LMU Klinikum München - Großhadern',\n        address: 'Marchioninistraße 15, 81377 München',\n        coordinates: { lat: 48.1106, lng: 11.4684 },\n        phone: '+49 89 4400-0',\n        emergency: '+49 89 4400-73331',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1440,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-002',\n        name: 'Klinikum rechts der Isar München (TUM)',\n        address: 'Ismaninger Str. 22, 81675 München',\n        coordinates: { lat: 48.1497, lng: 11.6052 },\n        phone: '+49 89 4140-0',\n        emergency: '+49 89 4140-2249',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1161,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-003',\n        name: 'Städtisches Klinikum München Schwabing',\n        address: 'Kölner Platz 1, 80804 München',\n        coordinates: { lat: 48.1732, lng: 11.5755 },\n        phone: '+49 89 3068-0',\n        emergency: '+49 89 3068-2050',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 648,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-004',\n        name: 'Städtisches Klinikum München Bogenhausen',\n        address: 'Englschalkinger Str. 77, 81925 München',\n        coordinates: { lat: 48.1614, lng: 11.6254 },\n        phone: '+49 89 9270-0',\n        emergency: '+49 89 9270-2050',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 689,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-005',\n        name: 'Universitätsklinikum Erlangen',\n        address: 'Maximiliansplatz 2, 91054 Erlangen',\n        coordinates: { lat: 49.5982, lng: 11.0037 },\n        phone: '+49 9131 85-0',\n        emergency: '+49 9131 85-39003',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1371,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-006',\n        name: 'Universitätsklinikum Regensburg',\n        address: 'Franz-Josef-Strauß-Allee 11, 93053 Regensburg',\n        coordinates: { lat: 49.0134, lng: 12.0991 },\n        phone: '+49 941 944-0',\n        emergency: '+49 941 944-7501',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1042,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-007',\n        name: 'Universitätsklinikum Würzburg',\n        address: 'Oberdürrbacher Str. 6, 97080 Würzburg',\n        coordinates: { lat: 49.7840, lng: 9.9721 },\n        phone: '+49 931 201-0',\n        emergency: '+49 931 201-24444',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1264,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-008',\n        name: 'Klinikum Nürnberg Nord',\n        address: 'Prof.-Ernst-Nathan-Str. 1, 90419 Nürnberg',\n        coordinates: { lat: 49.4521, lng: 11.0767 },\n        phone: '+49 911 398-0',\n        emergency: '+49 911 398-2369',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1368,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-009',\n        name: 'Universitätsklinikum Augsburg',\n        address: 'Stenglinstr. 2, 86156 Augsburg',\n        coordinates: { lat: 48.3668, lng: 10.9093 },\n        phone: '+49 821 400-01',\n        emergency: '+49 821 400-2356',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1740,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-010',\n        name: 'Klinikum Aschaffenburg-Alzenau',\n        address: 'Am Hasenkopf 1, 63739 Aschaffenburg',\n        coordinates: { lat: 49.9737, lng: 9.1570 },\n        phone: '+49 6021 32-0',\n        emergency: '+49 6021 32-2800',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 40,\n        network: 'TRANSIT',\n      },\n      {\n        id: 'BY-NS-011',\n        name: 'Klinikum Landshut',\n        address: 'Robert-Koch-Str. 1, 84034 Landshut',\n        coordinates: { lat: 48.5665, lng: 12.1512 },\n        phone: '+49 871 698-0',\n        emergency: '+49 871 698-3333',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 505,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-012',\n        name: 'Klinikum Coburg',\n        address: 'Ketschendorfer Str. 33, 96450 Coburg',\n        coordinates: { lat: 50.2596, lng: 10.9644 },\n        phone: '+49 9561 22-0',\n        emergency: '+49 9561 22-6800',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 547,\n        network: 'STENO',\n      },\n      {\n        id: 'BY-NS-013',\n        name: 'Klinikum Passau',\n        address: 'Bischof-Pilgrim-Str. 1, 94032 Passau',\n        coordinates: { lat: 48.5665, lng: 13.4777 },\n        phone: '+49 851 5300-0',\n        emergency: '+49 851 5300-2222',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 696,\n        network: 'TEMPiS',\n      },\n    ],\n\n    comprehensiveStrokeCenters: [\n      {\n        id: 'BY-CS-001',\n        name: 'Klinikum Bamberg',\n        address: 'Buger Str. 80, 96049 Bamberg',\n        coordinates: { lat: 49.8988, lng: 10.9027 },\n        phone: '+49 951 503-0',\n        emergency: '+49 951 503-11101',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 630,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-CS-002',\n        name: 'Klinikum Bayreuth',\n        address: 'Preuschwitzer Str. 101, 95445 Bayreuth',\n        coordinates: { lat: 49.9459, lng: 11.5779 },\n        phone: '+49 921 400-0',\n        emergency: '+49 921 400-5401',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 848,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-CS-003',\n        name: 'Klinikum Coburg',\n        address: 'Ketschendorfer Str. 33, 96450 Coburg',\n        coordinates: { lat: 50.2596, lng: 10.9685 },\n        phone: '+49 9561 22-0',\n        emergency: '+49 9561 22-6300',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 522,\n        network: 'TEMPiS',\n      },\n    ],\n\n    regionalStrokeUnits: [\n      {\n        id: 'BY-RSU-001',\n        name: 'Goldberg-Klinik Kelheim',\n        address: 'Traubenweg 3, 93309 Kelheim',\n        coordinates: { lat: 48.9166, lng: 11.8742 },\n        phone: '+49 9441 702-0',\n        emergency: '+49 9441 702-6800',\n        thrombolysis: true,\n        beds: 200,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-002',\n        name: 'DONAUISAR Klinikum Deggendorf',\n        address: 'Perlasberger Str. 41, 94469 Deggendorf',\n        coordinates: { lat: 48.8372, lng: 12.9619 },\n        phone: '+49 991 380-0',\n        emergency: '+49 991 380-2201',\n        thrombolysis: true,\n        beds: 450,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-003',\n        name: 'Klinikum St. Elisabeth Straubing',\n        address: 'St.-Elisabeth-Str. 23, 94315 Straubing',\n        coordinates: { lat: 48.8742, lng: 12.5733 },\n        phone: '+49 9421 710-0',\n        emergency: '+49 9421 710-2000',\n        thrombolysis: true,\n        beds: 580,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-004',\n        name: 'Klinikum Freising',\n        address: 'Mainburger Str. 29, 85356 Freising',\n        coordinates: { lat: 48.4142, lng: 11.7461 },\n        phone: '+49 8161 24-0',\n        emergency: '+49 8161 24-2800',\n        thrombolysis: true,\n        beds: 380,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-005',\n        name: 'Klinikum Landkreis Erding',\n        address: 'Bajuwarenstr. 5, 85435 Erding',\n        coordinates: { lat: 48.3061, lng: 11.9067 },\n        phone: '+49 8122 59-0',\n        emergency: '+49 8122 59-2201',\n        thrombolysis: true,\n        beds: 350,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-006',\n        name: 'Helios Amper-Klinikum Dachau',\n        address: 'Krankenhausstr. 15, 85221 Dachau',\n        coordinates: { lat: 48.2599, lng: 11.4342 },\n        phone: '+49 8131 76-0',\n        emergency: '+49 8131 76-2201',\n        thrombolysis: true,\n        beds: 480,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-007',\n        name: 'Klinikum Fürstenfeldbruck',\n        address: 'Dachauer Str. 33, 82256 Fürstenfeldbruck',\n        coordinates: { lat: 48.1772, lng: 11.2578 },\n        phone: '+49 8141 99-0',\n        emergency: '+49 8141 99-2201',\n        thrombolysis: true,\n        beds: 420,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-008',\n        name: 'Klinikum Ingolstadt',\n        address: 'Krumenauerstraße 25, 85049 Ingolstadt',\n        coordinates: { lat: 48.7665, lng: 11.4364 },\n        phone: '+49 841 880-0',\n        emergency: '+49 841 880-2201',\n        thrombolysis: true,\n        beds: 665,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-009',\n        name: 'Klinikum Passau',\n        address: 'Bischof-Pilgrim-Str. 1, 94032 Passau',\n        coordinates: { lat: 48.5665, lng: 13.4513 },\n        phone: '+49 851 5300-0',\n        emergency: '+49 851 5300-2100',\n        thrombolysis: true,\n        beds: 540,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-010',\n        name: 'Klinikum Landshut',\n        address: 'Robert-Koch-Str. 1, 84034 Landshut',\n        coordinates: { lat: 48.5436, lng: 12.1619 },\n        phone: '+49 871 698-0',\n        emergency: '+49 871 698-3333',\n        thrombolysis: true,\n        beds: 790,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-011',\n        name: 'RoMed Klinikum Rosenheim',\n        address: 'Pettenkoferstr. 10, 83022 Rosenheim',\n        coordinates: { lat: 47.8567, lng: 12.1265 },\n        phone: '+49 8031 365-0',\n        emergency: '+49 8031 365-3711',\n        thrombolysis: true,\n        beds: 870,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-012',\n        name: 'Klinikum Memmingen',\n        address: 'Bismarckstr. 23, 87700 Memmingen',\n        coordinates: { lat: 47.9833, lng: 10.1833 },\n        phone: '+49 8331 70-0',\n        emergency: '+49 8331 70-2500',\n        thrombolysis: true,\n        beds: 520,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-013',\n        name: 'Klinikum Kempten-Oberallgäu',\n        address: 'Robert-Weixler-Str. 50, 87439 Kempten',\n        coordinates: { lat: 47.7261, lng: 10.3097 },\n        phone: '+49 831 530-0',\n        emergency: '+49 831 530-2201',\n        thrombolysis: true,\n        beds: 650,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-014',\n        name: 'Klinikum Aschaffenburg-Alzenau',\n        address: 'Am Hasenkopf 1, 63739 Aschaffenburg',\n        coordinates: { lat: 49.9747, lng: 9.1581 },\n        phone: '+49 6021 32-0',\n        emergency: '+49 6021 32-2700',\n        thrombolysis: true,\n        beds: 590,\n        network: 'TEMPiS',\n      },\n    ],\n\n    thrombolysisHospitals: [\n      // Add more smaller hospitals with thrombolysis capability\n      {\n        id: 'BY-TH-001',\n        name: 'Krankenhaus Vilsbiburg',\n        address: 'Sonnenstraße 10, 84137 Vilsbiburg',\n        coordinates: { lat: 48.6333, lng: 12.2833 },\n        phone: '+49 8741 60-0',\n        thrombolysis: true,\n        beds: 180,\n      },\n      {\n        id: 'BY-TH-002',\n        name: 'Krankenhaus Eggenfelden',\n        address: 'Pfarrkirchener Str. 5, 84307 Eggenfelden',\n        coordinates: { lat: 48.4000, lng: 12.7667 },\n        phone: '+49 8721 98-0',\n        thrombolysis: true,\n        beds: 220,\n      },\n      // ... more hospitals would be added here\n    ],\n  },\n\n  badenWuerttemberg: {\n    neurosurgicalCenters: [\n      {\n        id: 'BW-NS-001',\n        name: 'Universitätsklinikum Freiburg',\n        address: 'Hugstetter Str. 55, 79106 Freiburg',\n        coordinates: { lat: 48.0025, lng: 7.8347 },\n        phone: '+49 761 270-0',\n        emergency: '+49 761 270-34010',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1600,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-002',\n        name: 'Universitätsklinikum Heidelberg',\n        address: 'Im Neuenheimer Feld 400, 69120 Heidelberg',\n        coordinates: { lat: 49.4178, lng: 8.6706 },\n        phone: '+49 6221 56-0',\n        emergency: '+49 6221 56-36643',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1621,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-003',\n        name: 'Universitätsklinikum Tübingen',\n        address: 'Geissweg 3, 72076 Tübingen',\n        coordinates: { lat: 48.5378, lng: 9.0538 },\n        phone: '+49 7071 29-0',\n        emergency: '+49 7071 29-82211',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1550,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-004',\n        name: 'Universitätsklinikum Ulm',\n        address: 'Albert-Einstein-Allee 23, 89081 Ulm',\n        coordinates: { lat: 48.4196, lng: 9.9592 },\n        phone: '+49 731 500-0',\n        emergency: '+49 731 500-63001',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1264,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-005',\n        name: 'Klinikum Stuttgart - Katharinenhospital',\n        address: 'Kriegsbergstraße 60, 70174 Stuttgart',\n        coordinates: { lat: 48.7784, lng: 9.1682 },\n        phone: '+49 711 278-0',\n        emergency: '+49 711 278-32001',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 950,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-006',\n        name: 'Städtisches Klinikum Karlsruhe',\n        address: 'Moltkestraße 90, 76133 Karlsruhe',\n        coordinates: { lat: 49.0047, lng: 8.3858 },\n        phone: '+49 721 974-0',\n        emergency: '+49 721 974-2301',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1570,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-007',\n        name: 'Klinikum Ludwigsburg',\n        address: 'Posilipostraße 4, 71640 Ludwigsburg',\n        coordinates: { lat: 48.8901, lng: 9.1953 },\n        phone: '+49 7141 99-0',\n        emergency: '+49 7141 99-67201',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 720,\n        network: 'FAST',\n      },\n    ],\n\n    comprehensiveStrokeCenters: [\n      {\n        id: 'BW-CS-001',\n        name: 'Universitätsmedizin Mannheim',\n        address: 'Theodor-Kutzer-Ufer 1-3, 68167 Mannheim',\n        coordinates: { lat: 49.4828, lng: 8.4664 },\n        phone: '+49 621 383-0',\n        emergency: '+49 621 383-2251',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1400,\n        network: 'FAST',\n      },\n    ],\n\n    regionalStrokeUnits: [\n      // Regional stroke units in Baden-Württemberg\n      {\n        id: 'BW-RSU-001',\n        name: 'Robert-Bosch-Krankenhaus Stuttgart',\n        address: 'Auerbachstraße 110, 70376 Stuttgart',\n        coordinates: { lat: 48.7447, lng: 9.2294 },\n        phone: '+49 711 8101-0',\n        emergency: '+49 711 8101-3456',\n        thrombolysis: true,\n        beds: 850,\n        network: 'FAST',\n      },\n      // ... more would be added\n    ],\n\n    thrombolysisHospitals: [\n      // Smaller hospitals with thrombolysis capability\n      // ... would be populated from your database\n    ],\n  },\n\n  nordrheinWestfalen: {\n    neurosurgicalCenters: [\n      {\n        id: 'NRW-NS-001',\n        name: 'Universitätsklinikum Düsseldorf',\n        address: 'Moorenstraße 5, 40225 Düsseldorf',\n        coordinates: { lat: 51.1906, lng: 6.8064 },\n        phone: '+49 211 81-0',\n        emergency: '+49 211 81-17700',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1300,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-002',\n        name: 'Universitätsklinikum Köln',\n        address: 'Kerpener Str. 62, 50937 Köln',\n        coordinates: { lat: 50.9253, lng: 6.9187 },\n        phone: '+49 221 478-0',\n        emergency: '+49 221 478-32500',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1500,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-003',\n        name: 'Universitätsklinikum Essen',\n        address: 'Hufelandstraße 55, 45147 Essen',\n        coordinates: { lat: 51.4285, lng: 7.0073 },\n        phone: '+49 201 723-0',\n        emergency: '+49 201 723-84444',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1350,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-004',\n        name: 'Universitätsklinikum Münster',\n        address: 'Albert-Schweitzer-Campus 1, 48149 Münster',\n        coordinates: { lat: 51.9607, lng: 7.6261 },\n        phone: '+49 251 83-0',\n        emergency: '+49 251 83-47255',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1513,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-005',\n        name: 'Universitätsklinikum Bonn',\n        address: 'Venusberg-Campus 1, 53127 Bonn',\n        coordinates: { lat: 50.6916, lng: 7.1127 },\n        phone: '+49 228 287-0',\n        emergency: '+49 228 287-15107',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1200,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-006',\n        name: 'Klinikum Dortmund',\n        address: 'Beurhausstraße 40, 44137 Dortmund',\n        coordinates: { lat: 51.5036, lng: 7.4663 },\n        phone: '+49 231 953-0',\n        emergency: '+49 231 953-20050',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1200,\n        network: 'NVNR',\n      },\n      {\n        id: 'NRW-NS-007',\n        name: 'Rhein-Maas Klinikum Würselen',\n        address: 'Mauerfeldstraße 25, 52146 Würselen',\n        coordinates: { lat: 50.8178, lng: 6.1264 },\n        phone: '+49 2405 62-0',\n        emergency: '+49 2405 62-2222',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 420,\n        network: 'NEVANO+',\n      },\n    ],\n\n    comprehensiveStrokeCenters: [\n      {\n        id: 'NRW-CS-001',\n        name: 'Universitätsklinikum Aachen',\n        address: 'Pauwelsstraße 30, 52074 Aachen',\n        coordinates: { lat: 50.7780, lng: 6.0614 },\n        phone: '+49 241 80-0',\n        emergency: '+49 241 80-89611',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1400,\n        network: 'NEVANO+',\n      },\n    ],\n\n    regionalStrokeUnits: [\n      // Regional stroke units in NRW\n      {\n        id: 'NRW-RSU-001',\n        name: 'Helios Universitätsklinikum Wuppertal',\n        address: 'Heusnerstraße 40, 42283 Wuppertal',\n        coordinates: { lat: 51.2467, lng: 7.1703 },\n        phone: '+49 202 896-0',\n        emergency: '+49 202 896-2180',\n        thrombolysis: true,\n        beds: 1050,\n        network: 'NEVANO+',\n      },\n      // ... more would be added\n    ],\n\n    thrombolysisHospitals: [\n      {\n        id: 'NRW-TH-009',\n        name: 'Elisabeth-Krankenhaus Essen',\n        address: 'Klara-Kopp-Weg 1, 45138 Essen',\n        coordinates: { lat: 51.4495, lng: 7.0137 },\n        phone: '+49 201 897-0',\n        thrombolysis: true,\n        beds: 583,\n      },\n      {\n        id: 'NRW-TH-010',\n        name: 'Klinikum Oberberg Gummersbach',\n        address: 'Wilhelm-Breckow-Allee 20, 51643 Gummersbach',\n        coordinates: { lat: 51.0277, lng: 7.5694 },\n        phone: '+49 2261 17-0',\n        thrombolysis: true,\n        beds: 431,\n      },\n      {\n        id: 'NRW-TH-011',\n        name: 'St. Vincenz-Krankenhaus Limburg',\n        address: 'Auf dem Schafsberg, 65549 Limburg',\n        coordinates: { lat: 50.3856, lng: 8.0584 },\n        phone: '+49 6431 292-0',\n        thrombolysis: true,\n        beds: 452,\n      },\n      {\n        id: 'NRW-TH-012',\n        name: 'Klinikum Lüdenscheid',\n        address: 'Paulmannshöher Straße 14, 58515 Lüdenscheid',\n        coordinates: { lat: 51.2186, lng: 7.6298 },\n        phone: '+49 2351 46-0',\n        thrombolysis: true,\n        beds: 869,\n      },\n      // ... more hospitals from your database\n    ],\n  },\n};\n\n// ==========================================\n// ENHANCED ROUTING ALGORITHM\n// ==========================================\n\nconst ROUTING_ALGORITHM = {\n\n  // Main routing function with enhanced ICH probability thresholds\n  routePatient(patientData) {\n    const {\n      location,\n      state,\n      ichProbability,\n      timeFromOnset,\n      clinicalFactors,\n    } = patientData;\n\n    // Auto-detect state if not provided\n    const detectedState = state || this.detectState(location);\n    const database = COMPREHENSIVE_HOSPITAL_DATABASE[detectedState];\n\n    // Enhanced decision tree based on ICH probability\n    if (ichProbability >= 0.50) {\n      // HIGH ICH RISK - Direct to neurosurgery\n      const destination = this.findNearest(location, database.neurosurgicalCenters);\n      if (!destination) {\n        throw new Error(`No neurosurgical centers available in ${detectedState}`);\n      }\n\n      return {\n        category: 'NEUROSURGICAL_CENTER',\n        destination,\n        urgency: 'IMMEDIATE',\n        reasoning: 'High bleeding probability (≥50%) - neurosurgical evaluation required',\n        preAlert: 'Activate neurosurgery team',\n        bypassLocal: true,\n        threshold: '≥50%',\n        state: detectedState,\n      };\n    }\n\n    if (ichProbability >= 0.30) {\n      // INTERMEDIATE ICH RISK - Comprehensive center preferred\n      const comprehensiveOptions = [\n        ...database.neurosurgicalCenters,\n        ...database.comprehensiveStrokeCenters,\n      ];\n\n      return {\n        category: 'COMPREHENSIVE_CENTER',\n        destination: this.findNearest(location, comprehensiveOptions),\n        urgency: 'URGENT',\n        reasoning: 'Intermediate bleeding risk (30-50%) - CT and possible intervention',\n        preAlert: 'Prepare for possible neurosurgical consultation',\n        transferPlan: this.findNearest(location, database.neurosurgicalCenters),\n        threshold: '30-50%',\n        state: detectedState,\n      };\n    }\n\n    if (timeFromOnset && timeFromOnset <= 270) { // Within 4.5 hour window\n      // LOW ICH RISK, WITHIN tPA WINDOW - Any thrombolysis center\n      const allThrombolysisCapable = [\n        ...database.neurosurgicalCenters,\n        ...database.comprehensiveStrokeCenters,\n        ...database.regionalStrokeUnits,\n        ...database.thrombolysisHospitals,\n      ];\n\n      return {\n        category: 'THROMBOLYSIS_CAPABLE',\n        destination: this.findNearest(location, allThrombolysisCapable),\n        urgency: 'TIME_CRITICAL',\n        reasoning: 'Low bleeding risk (<30%), within tPA window - nearest thrombolysis',\n        preAlert: 'Prepare for thrombolysis protocol',\n        bypassLocal: false,\n        threshold: '<30%',\n        timeWindow: '≤4.5h',\n        state: detectedState,\n      };\n    }\n\n    // LOW ICH RISK, OUTSIDE tPA WINDOW OR NO TIME - Regional stroke unit adequate\n    const strokeUnitsAndHigher = [\n      ...database.neurosurgicalCenters,\n      ...database.comprehensiveStrokeCenters,\n      ...database.regionalStrokeUnits,\n    ];\n\n    return {\n      category: 'STROKE_UNIT',\n      destination: this.findNearest(location, strokeUnitsAndHigher),\n      urgency: 'STANDARD',\n      reasoning: timeFromOnset > 270\n        ? 'Low bleeding risk, outside tPA window - standard stroke evaluation'\n        : 'Low bleeding risk - standard stroke evaluation',\n      preAlert: 'Standard stroke protocol',\n      bypassLocal: false,\n      threshold: '<30%',\n      timeWindow: timeFromOnset ? '>4.5h' : 'unknown',\n      state: detectedState,\n    };\n  },\n\n  // Auto-detect state based on coordinates (more precise boundaries)\n  detectState(location) {\n    // Baden-Württemberg: check first for western regions\n    if (location.lat >= 47.5 && location.lat <= 49.8\n        && location.lng >= 7.5 && location.lng <= 10.2) {\n      return 'badenWuerttemberg';\n    }\n\n    // NRW: northern regions\n    if (location.lat >= 50.3 && location.lat <= 52.5\n        && location.lng >= 5.9 && location.lng <= 9.5) {\n      return 'nordrheinWestfalen';\n    }\n\n    // Bayern: eastern regions (more restrictive western bound to avoid overlap)\n    if (location.lat >= 47.2 && location.lat <= 50.6\n        && location.lng >= 10.2 && location.lng <= 13.8) {\n      return 'bayern';\n    }\n\n    // Overlap region - use nearest state center\n    return this.findNearestState(location);\n  },\n\n  // Find nearest state for edge cases\n  findNearestState(location) {\n    const stateCenters = {\n      bayern: { lat: 49.0, lng: 11.5 },\n      badenWuerttemberg: { lat: 48.5, lng: 9.0 },\n      nordrheinWestfalen: { lat: 51.5, lng: 7.5 },\n    };\n\n    let nearestState = 'bayern';\n    let minDistance = Infinity;\n\n    for (const [state, center] of Object.entries(stateCenters)) {\n      const distance = this.calculateDistance(location, center);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestState = state;\n      }\n    }\n\n    return nearestState;\n  },\n\n  // Helper function to find nearest hospital\n  findNearest(userLocation, hospitals) {\n    if (!hospitals || hospitals.length === 0) {\n      console.warn('No hospitals available in database');\n      return null;\n    }\n\n    return hospitals\n      .map((hospital) => {\n        // Validate hospital has coordinates\n        if (!hospital.coordinates || typeof hospital.coordinates.lat !== 'number') {\n          console.warn(`Hospital ${hospital.name} missing valid coordinates`);\n          return null;\n        }\n\n        return {\n          ...hospital,\n          distance: this.calculateDistance(userLocation, hospital.coordinates),\n        };\n      })\n      .filter((hospital) => hospital !== null) // Remove invalid hospitals\n      .sort((a, b) => a.distance - b.distance)[0];\n  },\n\n  // Calculate distance between two GPS points\n  calculateDistance(point1, point2) {\n    const R = 6371; // Earth radius in km\n    const dLat = this.toRad(point2.lat - point1.lat);\n    const dLng = this.toRad(point2.lng - point1.lng);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2)\n      + Math.cos(this.toRad(point1.lat)) * Math.cos(this.toRad(point2.lat))\n      * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  },\n\n  toRad(deg) {\n    return deg * (Math.PI / 180);\n  },\n};\n\nexport { COMPREHENSIVE_HOSPITAL_DATABASE, ROUTING_ALGORITHM };\n","// Stroke centers in Bayern (Bavaria), Germany\n// Data includes comprehensive stroke centers and stroke units with neurosurgical capabilities\n\nexport const strokeCenters = [\n  // Major comprehensive stroke centers in München\n  {\n    id: 'klinikum-grosshadern-muenchen',\n    name: 'LMU Klinikum München - Großhadern',\n    type: 'comprehensive',\n    address: 'Marchioninistraße 15, 81377 München',\n    coordinates: {\n      lat: 48.1106,\n      lng: 11.4684,\n    },\n    phone: '+49 89 4400-0',\n    emergency: '+49 89 4400-73331',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-rechts-der-isar-muenchen',\n    name: 'Klinikum rechts der Isar München (TUM)',\n    type: 'comprehensive',\n    address: 'Ismaninger Str. 22, 81675 München',\n    coordinates: {\n      lat: 48.1497,\n      lng: 11.6052,\n    },\n    phone: '+49 89 4140-0',\n    emergency: '+49 89 4140-2249',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-schwabing-muenchen',\n    name: 'Städtisches Klinikum München Schwabing',\n    type: 'comprehensive',\n    address: 'Kölner Platz 1, 80804 München',\n    coordinates: {\n      lat: 48.1732,\n      lng: 11.5755,\n    },\n    phone: '+49 89 3068-0',\n    emergency: '+49 89 3068-2050',\n    services: ['thrombectomy', 'neurosurgery', 'icu'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-bogenhausen-muenchen',\n    name: 'Städtisches Klinikum München Bogenhausen',\n    type: 'comprehensive',\n    address: 'Englschalkinger Str. 77, 81925 München',\n    coordinates: {\n      lat: 48.1614,\n      lng: 11.6254,\n    },\n    phone: '+49 89 9270-0',\n    emergency: '+49 89 9270-2050',\n    services: ['thrombectomy', 'neurosurgery', 'icu'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n\n  // Major centers in other Bayern cities\n  {\n    id: 'uniklinikum-erlangen',\n    name: 'Universitätsklinikum Erlangen',\n    type: 'comprehensive',\n    address: 'Maximiliansplatz 2, 91054 Erlangen',\n    coordinates: {\n      lat: 49.5982,\n      lng: 11.0037,\n    },\n    phone: '+49 9131 85-0',\n    emergency: '+49 9131 85-39003',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'uniklinikum-regensburg',\n    name: 'Universitätsklinikum Regensburg',\n    type: 'comprehensive',\n    address: 'Franz-Josef-Strauß-Allee 11, 93053 Regensburg',\n    coordinates: {\n      lat: 49.0134,\n      lng: 12.0991,\n    },\n    phone: '+49 941 944-0',\n    emergency: '+49 941 944-7501',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'uniklinikum-wuerzburg',\n    name: 'Universitätsklinikum Würzburg',\n    type: 'comprehensive',\n    address: 'Oberdürrbacher Str. 6, 97080 Würzburg',\n    coordinates: {\n      lat: 49.7840,\n      lng: 9.9721,\n    },\n    phone: '+49 931 201-0',\n    emergency: '+49 931 201-24444',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-nuernberg',\n    name: 'Klinikum Nürnberg Nord',\n    type: 'comprehensive',\n    address: 'Prof.-Ernst-Nathan-Str. 1, 90419 Nürnberg',\n    coordinates: {\n      lat: 49.4521,\n      lng: 11.0767,\n    },\n    phone: '+49 911 398-0',\n    emergency: '+49 911 398-2369',\n    services: ['thrombectomy', 'neurosurgery', 'icu'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-augsburg',\n    name: 'Universitätsklinikum Augsburg',\n    type: 'comprehensive',\n    address: 'Stenglinstr. 2, 86156 Augsburg',\n    coordinates: {\n      lat: 48.3668,\n      lng: 10.9093,\n    },\n    phone: '+49 821 400-01',\n    emergency: '+49 821 400-2356',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n\n  // Primary stroke centers\n  {\n    id: 'klinikum-ingolstadt',\n    name: 'Klinikum Ingolstadt',\n    type: 'primary',\n    address: 'Krumenauerstraße 25, 85049 Ingolstadt',\n    coordinates: {\n      lat: 48.7665,\n      lng: 11.4364,\n    },\n    phone: '+49 841 880-0',\n    emergency: '+49 841 880-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-passau',\n    name: 'Klinikum Passau',\n    type: 'primary',\n    address: 'Bischof-Pilgrim-Str. 1, 94032 Passau',\n    coordinates: {\n      lat: 48.5665,\n      lng: 13.4513,\n    },\n    phone: '+49 851 5300-0',\n    emergency: '+49 851 5300-2100',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-bamberg',\n    name: 'Sozialstiftung Bamberg Klinikum',\n    type: 'primary',\n    address: 'Buger Str. 80, 96049 Bamberg',\n    coordinates: {\n      lat: 49.8988,\n      lng: 10.9027,\n    },\n    phone: '+49 951 503-0',\n    emergency: '+49 951 503-11101',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-bayreuth',\n    name: 'Klinikum Bayreuth',\n    type: 'primary',\n    address: 'Preuschwitzer Str. 101, 95445 Bayreuth',\n    coordinates: {\n      lat: 49.9459,\n      lng: 11.5779,\n    },\n    phone: '+49 921 400-0',\n    emergency: '+49 921 400-5401',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-landshut',\n    name: 'Klinikum Landshut',\n    type: 'primary',\n    address: 'Robert-Koch-Str. 1, 84034 Landshut',\n    coordinates: {\n      lat: 48.5436,\n      lng: 12.1619,\n    },\n    phone: '+49 871 698-0',\n    emergency: '+49 871 698-3333',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-rosenheim',\n    name: 'RoMed Klinikum Rosenheim',\n    type: 'primary',\n    address: 'Pettenkoferstr. 10, 83022 Rosenheim',\n    coordinates: {\n      lat: 47.8567,\n      lng: 12.1265,\n    },\n    phone: '+49 8031 365-0',\n    emergency: '+49 8031 365-3711',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-memmingen',\n    name: 'Klinikum Memmingen',\n    type: 'primary',\n    address: 'Bismarckstr. 23, 87700 Memmingen',\n    coordinates: {\n      lat: 47.9833,\n      lng: 10.1833,\n    },\n    phone: '+49 8331 70-0',\n    emergency: '+49 8331 70-2500',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-kempten',\n    name: 'Klinikum Kempten-Oberallgäu',\n    type: 'primary',\n    address: 'Robert-Weixler-Str. 50, 87439 Kempten',\n    coordinates: {\n      lat: 47.7261,\n      lng: 10.3097,\n    },\n    phone: '+49 831 530-0',\n    emergency: '+49 831 530-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-coburg',\n    name: 'Klinikum Coburg',\n    type: 'primary',\n    address: 'Ketschendorfer Str. 33, 96450 Coburg',\n    coordinates: {\n      lat: 50.2596,\n      lng: 10.9685,\n    },\n    phone: '+49 9561 22-0',\n    emergency: '+49 9561 22-6300',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-aschaffenburg',\n    name: 'Klinikum Aschaffenburg-Alzenau',\n    type: 'primary',\n    address: 'Am Hasenkopf 1, 63739 Aschaffenburg',\n    coordinates: {\n      lat: 49.9747,\n      lng: 9.1581,\n    },\n    phone: '+49 6021 32-0',\n    emergency: '+49 6021 32-2700',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n\n  // Additional smaller stroke units in Bayern\n  {\n    id: 'goldberg-klinik-kelheim',\n    name: 'Goldberg-Klinik Kelheim',\n    type: 'primary',\n    address: 'Traubenweg 3, 93309 Kelheim',\n    coordinates: {\n      lat: 48.9166,\n      lng: 11.8742,\n    },\n    phone: '+49 9441 702-0',\n    emergency: '+49 9441 702-6800',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-deggendorf',\n    name: 'DONAUISAR Klinikum Deggendorf',\n    type: 'primary',\n    address: 'Perlasberger Str. 41, 94469 Deggendorf',\n    coordinates: {\n      lat: 48.8372,\n      lng: 12.9619,\n    },\n    phone: '+49 991 380-0',\n    emergency: '+49 991 380-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-straubing',\n    name: 'Klinikum St. Elisabeth Straubing',\n    type: 'primary',\n    address: 'St.-Elisabeth-Str. 23, 94315 Straubing',\n    coordinates: {\n      lat: 48.8742,\n      lng: 12.5733,\n    },\n    phone: '+49 9421 710-0',\n    emergency: '+49 9421 710-2000',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-freising',\n    name: 'Klinikum Freising',\n    type: 'primary',\n    address: 'Mainburger Str. 29, 85356 Freising',\n    coordinates: {\n      lat: 48.4142,\n      lng: 11.7461,\n    },\n    phone: '+49 8161 24-0',\n    emergency: '+49 8161 24-2800',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-erding',\n    name: 'Klinikum Landkreis Erding',\n    type: 'primary',\n    address: 'Bajuwarenstr. 5, 85435 Erding',\n    coordinates: {\n      lat: 48.3061,\n      lng: 11.9067,\n    },\n    phone: '+49 8122 59-0',\n    emergency: '+49 8122 59-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'helios-dachau',\n    name: 'Helios Amper-Klinikum Dachau',\n    type: 'primary',\n    address: 'Krankenhausstr. 15, 85221 Dachau',\n    coordinates: {\n      lat: 48.2599,\n      lng: 11.4342,\n    },\n    phone: '+49 8131 76-0',\n    emergency: '+49 8131 76-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-fuerstenfeldbruck',\n    name: 'Klinikum Fürstenfeldbruck',\n    type: 'primary',\n    address: 'Dachauer Str. 33, 82256 Fürstenfeldbruck',\n    coordinates: {\n      lat: 48.1772,\n      lng: 11.2578,\n    },\n    phone: '+49 8141 99-0',\n    emergency: '+49 8141 99-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n];\n\n// Helper functions for stroke center data\nexport function getStrokeCentersByType(type) {\n  return strokeCenters.filter((center) => center.type === type);\n}\n\nexport function getComprehensiveStrokeCenters() {\n  return getStrokeCentersByType('comprehensive');\n}\n\nexport function getPrimaryStrokeCenters() {\n  return getStrokeCentersByType('primary');\n}\n\nexport function getStrokeCenterById(id) {\n  return strokeCenters.find((center) => center.id === id);\n}\n\n// Calculate distance between two coordinates using Haversine formula (fallback)\nexport function calculateDistance(lat1, lng1, lat2, lng2) {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRadians(lat2 - lat1);\n  const dLng = toRadians(lng2 - lng1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2)\n    + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2))\n    * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nfunction toRadians(degrees) {\n  return degrees * (Math.PI / 180);\n}\n\n// Calculate travel time using OpenRoute Service API\nexport async function calculateTravelTime(fromLat, fromLng, toLat, toLng, profile = 'driving-car') {\n  try {\n    // Using OpenRoute Service (free tier)\n    const url = `https://api.openrouteservice.org/v2/directions/${profile}`;\n    const body = {\n      coordinates: [[fromLng, fromLat], [toLng, toLat]],\n      radiuses: [1000, 1000], // Allow 1km radius for routing\n      format: 'json',\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8',\n        Authorization: '5b3ce3597851110001cf624868c4c27b63ae476c9c26c8bffbc35688', // Free tier key\n        'Content-Type': 'application/json; charset=utf-8',\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Routing API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data.routes && data.routes.length > 0) {\n      const route = data.routes[0];\n      return {\n        duration: Math.round(route.summary.duration / 60), // Convert to minutes\n        distance: Math.round(route.summary.distance / 1000), // Convert to km\n        source: 'routing',\n      };\n    }\n    throw new Error('No route found');\n  } catch (error) {\n    console.warn('Travel time calculation failed, using distance estimate:', error);\n\n    // Fallback to distance-based time estimation\n    const distance = calculateDistance(fromLat, fromLng, toLat, toLng);\n    const estimatedTime = Math.round(distance / 0.8); // Assume 48 km/h average (urban + highway)\n\n    return {\n      duration: estimatedTime,\n      distance: Math.round(distance),\n      source: 'estimated',\n    };\n  }\n}\n\n// Enhanced travel time calculation for emergency vehicles\nexport async function calculateEmergencyTravelTime(fromLat, fromLng, toLat, toLng) {\n  try {\n    // For emergency vehicles, we can use a faster profile and adjust\n    const result = await calculateTravelTime(fromLat, fromLng, toLat, toLng, 'driving-car');\n\n    // Reduce time by 25% for emergency vehicle (sirens, priority routing)\n    const emergencyDuration = Math.round(result.duration * 0.75);\n\n    return {\n      duration: emergencyDuration,\n      distance: result.distance,\n      source: result.source === 'routing' ? 'emergency-routing' : 'emergency-estimated',\n    };\n  } catch (error) {\n    // Fallback calculation\n    const distance = calculateDistance(fromLat, fromLng, toLat, toLng);\n    const emergencyTime = Math.round(distance / 1.2); // Assume 72 km/h for emergency vehicles\n\n    return {\n      duration: emergencyTime,\n      distance: Math.round(distance),\n      source: 'emergency-estimated',\n    };\n  }\n}\n\n// Find nearest stroke centers with travel time calculation\nexport async function findNearestStrokeCentersWithTravelTime(lat, lng, maxResults = 5, maxTime = 120, useEmergencyRouting = true) {\n  console.log('Calculating travel times to stroke centers...');\n\n  const centersWithTravelTime = await Promise.all(\n    strokeCenters.map(async (center) => {\n      try {\n        const travelInfo = useEmergencyRouting\n          ? await calculateEmergencyTravelTime(lat, lng, center.coordinates.lat, center.coordinates.lng)\n          : await calculateTravelTime(lat, lng, center.coordinates.lat, center.coordinates.lng);\n\n        return {\n          ...center,\n          travelTime: travelInfo.duration,\n          distance: travelInfo.distance,\n          travelSource: travelInfo.source,\n        };\n      } catch (error) {\n        console.warn(`Failed to calculate travel time to ${center.name}:`, error);\n        // Fallback to distance calculation\n        const distance = calculateDistance(lat, lng, center.coordinates.lat, center.coordinates.lng);\n        return {\n          ...center,\n          travelTime: Math.round(distance / 0.8), // Estimate: 48 km/h average\n          distance: Math.round(distance),\n          travelSource: 'fallback',\n        };\n      }\n    }),\n  );\n\n  return centersWithTravelTime\n    .filter((center) => center.travelTime <= maxTime)\n    .sort((a, b) => a.travelTime - b.travelTime)\n    .slice(0, maxResults);\n}\n\n// Find nearest stroke centers using distance (fallback/fast method)\nexport function findNearestStrokeCenters(lat, lng, maxResults = 5, maxDistance = 100) {\n  const centersWithDistance = strokeCenters.map((center) => ({\n    ...center,\n    distance: calculateDistance(lat, lng, center.coordinates.lat, center.coordinates.lng),\n  }));\n\n  return centersWithDistance\n    .filter((center) => center.distance <= maxDistance)\n    .sort((a, b) => a.distance - b.distance)\n    .slice(0, maxResults);\n}\n\n// Get stroke center recommendations with travel time (async)\nexport async function getRecommendedStrokeCentersWithTravelTime(lat, lng, conditionType = 'stroke') {\n  const nearestCenters = await findNearestStrokeCentersWithTravelTime(lat, lng, 10, 120, true);\n\n  if (conditionType === 'lvo' || conditionType === 'thrombectomy') {\n    // For LVO cases, prioritize comprehensive stroke centers within 60 minutes\n    const comprehensive = nearestCenters.filter((center) => center.type === 'comprehensive'\n      && center.services.includes('thrombectomy')\n      && center.travelTime <= 60);\n\n    const primary = nearestCenters.filter((center) => center.type === 'primary');\n\n    return {\n      recommended: comprehensive.slice(0, 3),\n      alternative: primary.slice(0, 2),\n    };\n  }\n\n  // For ICH cases, prioritize neurosurgical capabilities\n  if (conditionType === 'ich') {\n    const neurosurgical = nearestCenters.filter((center) => center.services.includes('neurosurgery')\n      && center.travelTime <= 45);\n\n    return {\n      recommended: neurosurgical.slice(0, 3),\n      alternative: nearestCenters.filter((c) => !neurosurgical.includes(c)).slice(0, 2),\n    };\n  }\n\n  // For general stroke cases, return nearest centers regardless of type\n  return {\n    recommended: nearestCenters.slice(0, 5),\n    alternative: [],\n  };\n}\n\n// Get stroke center recommendations based on patient condition (fallback - distance only)\nexport function getRecommendedStrokeCenters(lat, lng, conditionType = 'stroke') {\n  const nearestCenters = findNearestStrokeCenters(lat, lng, 10);\n\n  if (conditionType === 'lvo' || conditionType === 'thrombectomy') {\n    // For LVO cases, prioritize comprehensive stroke centers\n    const comprehensive = nearestCenters.filter((center) => center.type === 'comprehensive'\n      && center.services.includes('thrombectomy'));\n\n    const primary = nearestCenters.filter((center) => center.type === 'primary');\n\n    return {\n      recommended: comprehensive.slice(0, 3),\n      alternative: primary.slice(0, 2),\n    };\n  }\n\n  // For general stroke cases, return nearest centers regardless of type\n  return {\n    recommended: nearestCenters.slice(0, 5),\n    alternative: [],\n  };\n}\n","// GPS-based stroke center map component\nimport { COMPREHENSIVE_HOSPITAL_DATABASE, ROUTING_ALGORITHM } from '../../data/comprehensive-stroke-centers.js';\nimport { calculateDistance, calculateTravelTime, calculateEmergencyTravelTime } from '../../data/stroke-centers.js';\nimport { t } from '../../localization/i18n.js';\n\nexport function renderStrokeCenterMap(results) {\n  return `\n    <div class=\"stroke-center-section\">\n      <h3>🏥 ${t('nearestCentersTitle')}</h3>\n      <div id=\"locationContainer\">\n        <div class=\"location-controls\">\n          <button type=\"button\" id=\"useGpsButton\" class=\"secondary\">\n            📍 ${t('useCurrentLocation')}\n          </button>\n          <div class=\"location-manual\" style=\"display: none;\">\n            <input type=\"text\" id=\"locationInput\" placeholder=\"${t('enterLocationPlaceholder') || 'e.g. München, Köln, Stuttgart, or 48.1351, 11.5820'}\" />\n            <button type=\"button\" id=\"searchLocationButton\" class=\"secondary\">${t('search')}</button>\n          </div>\n          <button type=\"button\" id=\"manualLocationButton\" class=\"secondary\">\n            ✏️ ${t('enterManually')}\n          </button>\n        </div>\n        <div id=\"strokeCenterResults\" class=\"stroke-center-results\"></div>\n      </div>\n    </div>\n  `;\n}\n\nexport function initializeStrokeCenterMap(results) {\n  const useGpsButton = document.getElementById('useGpsButton');\n  const manualLocationButton = document.getElementById('manualLocationButton');\n  const locationManual = document.querySelector('.location-manual');\n  const locationInput = document.getElementById('locationInput');\n  const searchLocationButton = document.getElementById('searchLocationButton');\n  const resultsContainer = document.getElementById('strokeCenterResults');\n\n  if (useGpsButton) {\n    useGpsButton.addEventListener('click', () => {\n      requestUserLocation(results, resultsContainer);\n    });\n  }\n\n  if (manualLocationButton) {\n    manualLocationButton.addEventListener('click', () => {\n      locationManual.style.display = locationManual.style.display === 'none' ? 'block' : 'none';\n    });\n  }\n\n  if (searchLocationButton) {\n    searchLocationButton.addEventListener('click', () => {\n      const location = locationInput.value.trim();\n      if (location) {\n        geocodeLocation(location, results, resultsContainer);\n      }\n    });\n  }\n\n  if (locationInput) {\n    locationInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        const location = locationInput.value.trim();\n        if (location) {\n          geocodeLocation(location, results, resultsContainer);\n        }\n      }\n    });\n  }\n}\n\nfunction requestUserLocation(results, resultsContainer) {\n  if (!navigator.geolocation) {\n    showLocationError(t('geolocationNotSupported'), resultsContainer);\n    return;\n  }\n\n  resultsContainer.innerHTML = `<div class=\"loading\">${t('gettingLocation')}...</div>`;\n\n  navigator.geolocation.getCurrentPosition(\n    (position) => {\n      const { latitude, longitude } = position.coords;\n      showNearestCenters(latitude, longitude, results, resultsContainer);\n    },\n    (error) => {\n      let errorMessage = t('locationError');\n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          errorMessage = t('locationPermissionDenied');\n          break;\n        case error.POSITION_UNAVAILABLE:\n          errorMessage = t('locationUnavailable');\n          break;\n        case error.TIMEOUT:\n          errorMessage = t('locationTimeout');\n          break;\n      }\n      showLocationError(errorMessage, resultsContainer);\n    },\n    {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 300000, // 5 minutes\n    },\n  );\n}\n\nasync function geocodeLocation(locationString, results, resultsContainer) {\n  resultsContainer.innerHTML = `<div class=\"loading\">${t('searchingLocation')}...</div>`;\n\n  // Check if user entered coordinates (format: lat, lng or lat,lng)\n  const coordPattern = /^(-?\\d+\\.?\\d*)\\s*,\\s*(-?\\d+\\.?\\d*)$/;\n  const coordMatch = locationString.trim().match(coordPattern);\n\n  if (coordMatch) {\n    // Direct coordinate input\n    const lat = parseFloat(coordMatch[1]);\n    const lng = parseFloat(coordMatch[2]);\n\n    // Validate coordinates are within supported German states (Bayern, BW, NRW)\n    if (lat >= 47.2 && lat <= 52.5 && lng >= 5.9 && lng <= 15.0) {\n      resultsContainer.innerHTML = `\n        <div class=\"location-success\">\n          <p>📍 Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        </div>\n      `;\n      setTimeout(() => {\n        showNearestCenters(lat, lng, results, resultsContainer);\n      }, 500);\n      return;\n    }\n    showLocationError('Coordinates appear to be outside Germany. Please check the values.', resultsContainer);\n    return;\n  }\n\n  try {\n    // Clean up the location string\n    let searchLocation = locationString.trim();\n\n    // If it doesn't already include country info, add it\n    if (!searchLocation.toLowerCase().includes('deutschland')\n        && !searchLocation.toLowerCase().includes('germany')\n        && !searchLocation.toLowerCase().includes('bayern')\n        && !searchLocation.toLowerCase().includes('bavaria')\n        && !searchLocation.toLowerCase().includes('nordrhein')\n        && !searchLocation.toLowerCase().includes('baden')) {\n      searchLocation += ', Deutschland';\n    }\n\n    // Use Nominatim (OpenStreetMap) geocoding service - free and reliable\n    // Note: encodeURIComponent properly handles umlauts (ä, ö, ü, ß)\n    const encodedLocation = encodeURIComponent(searchLocation);\n    const url = `https://nominatim.openstreetmap.org/search?q=${encodedLocation}&countrycodes=de&format=json&limit=3&addressdetails=1`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': 'iGFAP-StrokeTriage/2.1.0', // Required by Nominatim\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Geocoding API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data && data.length > 0) {\n      // Prefer results from supported states (Bayern, Baden-Württemberg, NRW)\n      let location = data[0];\n      const supportedStates = ['Bayern', 'Baden-Württemberg', 'Nordrhein-Westfalen'];\n\n      for (const result of data) {\n        if (result.address && supportedStates.includes(result.address.state)) {\n          location = result;\n          break;\n        }\n      }\n\n      const lat = parseFloat(location.lat);\n      const lng = parseFloat(location.lon);\n      const locationName = location.display_name || locationString;\n\n      // Show success message and then proceed with location\n      resultsContainer.innerHTML = `\n        <div class=\"location-success\">\n          <p>📍 Found: ${locationName}</p>\n          <small style=\"color: #666;\">Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}</small>\n        </div>\n      `;\n\n      // Wait a moment to show the found location, then show centers\n      setTimeout(() => {\n        showNearestCenters(lat, lng, results, resultsContainer);\n      }, 1000);\n    } else {\n      showLocationError(`\n        <strong>Location \"${locationString}\" not found.</strong><br>\n        <small>Try:</small>\n        <ul style=\"text-align: left; font-size: 0.9em; margin: 10px 0;\">\n          <li>City name: \"München\", \"Köln\", \"Stuttgart\"</li>\n          <li>Address: \"Marienplatz 1, München\"</li>\n          <li>Coordinates: \"48.1351, 11.5820\"</li>\n        </ul>\n      `, resultsContainer);\n    }\n  } catch (error) {\n    console.warn('Geocoding failed:', error);\n    showLocationError(`\n      <strong>Unable to search location.</strong><br>\n      <small>Please try entering coordinates directly (e.g., \"48.1351, 11.5820\")</small>\n    `, resultsContainer);\n  }\n}\n\nasync function showNearestCenters(lat, lng, results, resultsContainer) {\n  const location = { lat, lng };\n\n  // Use the enhanced routing algorithm\n  const routing = ROUTING_ALGORITHM.routePatient({\n    location,\n    ichProbability: results?.ich?.probability || 0,\n    timeFromOnset: results?.timeFromOnset || null,\n    clinicalFactors: results?.clinicalFactors || {},\n  });\n\n  if (!routing || !routing.destination) {\n    resultsContainer.innerHTML = `\n      <div class=\"location-error\">\n        <p>⚠️ No suitable stroke centers found in this area.</p>\n        <p><small>Please try a different location or contact emergency services directly.</small></p>\n      </div>\n    `;\n    return;\n  }\n\n  // Generate routing explanation\n  const routingExplanation = getEnhancedRoutingExplanation(routing, results);\n\n  // Show loading state\n  resultsContainer.innerHTML = `\n    <div class=\"location-info\">\n      <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n      <p><strong>Detected State:</strong> ${getStateName(routing.state)}</p>\n    </div>\n    <div class=\"loading\">${t('calculatingTravelTimes')}...</div>\n  `;\n\n  try {\n    // Get all relevant hospitals for this routing decision\n    const database = COMPREHENSIVE_HOSPITAL_DATABASE[routing.state];\n    const allHospitals = [\n      ...database.neurosurgicalCenters,\n      ...database.comprehensiveStrokeCenters,\n      ...database.regionalStrokeUnits,\n      ...(database.thrombolysisHospitals || []),\n    ];\n\n    // Add distance and travel time to primary destination\n    const { destination } = routing;\n    destination.distance = calculateDistance(lat, lng, destination.coordinates.lat, destination.coordinates.lng);\n\n    try {\n      const travelInfo = await calculateEmergencyTravelTime(lat, lng, destination.coordinates.lat, destination.coordinates.lng);\n      destination.travelTime = travelInfo.duration;\n      destination.travelSource = travelInfo.source;\n    } catch (error) {\n      destination.travelTime = Math.round(destination.distance / 0.8); // Estimate\n      destination.travelSource = 'estimated';\n    }\n\n    // Find 3-4 alternative hospitals nearby\n    const alternatives = allHospitals\n      .filter((h) => h.id !== destination.id)\n      .map((hospital) => ({\n        ...hospital,\n        distance: calculateDistance(lat, lng, hospital.coordinates.lat, hospital.coordinates.lng),\n      }))\n      .sort((a, b) => a.distance - b.distance)\n      .slice(0, 3);\n\n    // Add travel times to alternatives\n    for (const alt of alternatives) {\n      try {\n        const travelInfo = await calculateEmergencyTravelTime(lat, lng, alt.coordinates.lat, alt.coordinates.lng);\n        alt.travelTime = travelInfo.duration;\n        alt.travelSource = travelInfo.source;\n      } catch (error) {\n        alt.travelTime = Math.round(alt.distance / 0.8);\n        alt.travelSource = 'estimated';\n      }\n    }\n\n    const html = `\n      <div class=\"location-info\">\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        <p><strong>State:</strong> ${getStateName(routing.state)}</p>\n        ${routingExplanation}\n      </div>\n      \n      <div class=\"recommended-centers\">\n        <h4>🏥 ${routing.urgency === 'IMMEDIATE' ? 'Emergency' : 'Recommended'} Destination</h4>\n        ${renderEnhancedStrokeCenterCard(destination, true, routing)}\n      </div>\n      \n      ${alternatives.length > 0 ? `\n        <div class=\"alternative-centers\">\n          <h4>Alternative Centers</h4>\n          ${alternatives.map((alt) => renderEnhancedStrokeCenterCard(alt, false, routing)).join('')}\n        </div>\n      ` : ''}\n      \n      <div class=\"travel-time-note\">\n        <small>${t('travelTimeNote') || 'Travel times estimated for emergency vehicles'}</small>\n      </div>\n    `;\n\n    resultsContainer.innerHTML = html;\n  } catch (error) {\n    console.warn('Enhanced routing failed, using basic display:', error);\n\n    // Fallback to basic display\n    resultsContainer.innerHTML = `\n      <div class=\"location-info\">\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        ${routingExplanation}\n      </div>\n      \n      <div class=\"recommended-centers\">\n        <h4>Recommended Center</h4>\n        <div class=\"stroke-center-card recommended\">\n          <div class=\"center-header\">\n            <h5>${routing.destination.name}</h5>\n            <span class=\"distance\">${routing.destination.distance?.toFixed(1) || '?'} km</span>\n          </div>\n          <div class=\"center-details\">\n            <p class=\"address\">📍 ${routing.destination.address}</p>\n            <p class=\"phone\">📞 ${routing.destination.emergency || routing.destination.phone}</p>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"routing-reasoning\">\n        <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\n      </div>\n    `;\n  }\n}\n\nfunction renderStrokeCenterList(centers, isRecommended = false) {\n  if (!centers || centers.length === 0) {\n    return `<p>${t('noCentersFound')}</p>`;\n  }\n\n  return centers.map((center) => `\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'}\">\n      <div class=\"center-header\">\n        <h5>${center.name}</h5>\n        <span class=\"center-type ${center.type}\">${t(`${center.type}Center`)}</span>\n        ${center.travelTime ? `\n          <span class=\"travel-time\">\n            <span class=\"time\">${center.travelTime} ${t('minutes')}</span>\n            <span class=\"distance\">(${center.distance} km)</span>\n          </span>\n        ` : `\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n        `}\n      </div>\n      \n      <div class=\"center-details\">\n        <p class=\"address\">📍 ${center.address}</p>\n        <p class=\"phone\">📞 ${t('emergency')}: ${center.emergency}</p>\n        \n        <div class=\"services\">\n          ${center.services.map((service) => `\n            <span class=\"service-badge\">${t(service)}</span>\n          `).join('')}\n        </div>\n        \n        ${center.certified ? `\n          <div class=\"certification\">\n            ✅ ${t('certified')}: ${center.certification}\n          </div>\n        ` : ''}\n      </div>\n      \n      <div class=\"center-actions\">\n        <button class=\"call-button\" onclick=\"window.open('tel:${center.emergency}')\">\n          📞 ${t('call')}\n        </button>\n        <button class=\"directions-button\" onclick=\"window.open('https://maps.google.com/maps?daddr=${center.coordinates.lat},${center.coordinates.lng}', '_blank')\">\n          🧭 ${t('directions')}\n        </button>\n      </div>\n    </div>\n  `).join('');\n}\n\n// Helper functions for enhanced routing system\nfunction getStateName(stateCode) {\n  const stateNames = {\n    bayern: 'Bayern (Bavaria)',\n    badenWuerttemberg: 'Baden-Württemberg',\n    nordrheinWestfalen: 'Nordrhein-Westfalen (NRW)',\n  };\n  return stateNames[stateCode] || stateCode;\n}\n\nfunction getEnhancedRoutingExplanation(routing, results) {\n  const ichPercent = Math.round((results?.ich?.probability || 0) * 100);\n\n  let urgencyIcon = '🏥';\n  if (routing.urgency === 'IMMEDIATE') {\n    urgencyIcon = '🚨';\n  } else if (routing.urgency === 'TIME_CRITICAL') {\n    urgencyIcon = '⏰';\n  } else if (routing.urgency === 'URGENT') {\n    urgencyIcon = '⚠️';\n  }\n\n  return `\n    <div class=\"routing-explanation ${routing.category.toLowerCase()}\">\n      <div class=\"routing-header\">\n        <strong>${urgencyIcon} ${routing.category.replace('_', ' ')} - ${routing.urgency}</strong>\n      </div>\n      <div class=\"routing-details\">\n        <p><strong>ICH Risk:</strong> ${ichPercent}% ${routing.threshold ? `(${routing.threshold})` : ''}</p>\n        ${routing.timeWindow ? `<p><strong>Time Window:</strong> ${routing.timeWindow}</p>` : ''}\n        <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\n        <p><strong>Pre-Alert:</strong> ${routing.preAlert}</p>\n        ${routing.bypassLocal ? '<p class=\"bypass-warning\">⚠️ Bypassing local hospitals</p>' : ''}\n      </div>\n    </div>\n  `;\n}\n\nfunction renderEnhancedStrokeCenterCard(center, isRecommended, routing) {\n  const capabilities = [];\n  if (center.neurosurgery) {\n    capabilities.push('🧠 Neurosurgery');\n  }\n  if (center.thrombectomy) {\n    capabilities.push('🩸 Thrombectomy');\n  }\n  if (center.thrombolysis) {\n    capabilities.push('💉 Thrombolysis');\n  }\n\n  const networkBadge = center.network ? `<span class=\"network-badge\">${center.network}</span>` : '';\n\n  return `\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'} enhanced\">\n      <div class=\"center-header\">\n        <h5>${center.name}</h5>\n        <div class=\"center-badges\">\n          ${center.neurosurgery ? '<span class=\"capability-badge neurosurgery\">NS</span>' : ''}\n          ${center.thrombectomy ? '<span class=\"capability-badge thrombectomy\">TE</span>' : ''}\n          ${networkBadge}\n        </div>\n      </div>\n      \n      <div class=\"center-metrics\">\n        ${center.travelTime ? `\n          <div class=\"travel-info\">\n            <span class=\"travel-time\">${center.travelTime} min</span>\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n          </div>\n        ` : `\n          <div class=\"distance-only\">\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n          </div>\n        `}\n        <div class=\"bed-info\">\n          <span class=\"beds\">${center.beds} beds</span>\n        </div>\n      </div>\n      \n      <div class=\"center-details\">\n        <p class=\"address\">📍 ${center.address}</p>\n        <p class=\"phone\">📞 ${center.emergency || center.phone}</p>\n        \n        ${capabilities.length > 0 ? `\n          <div class=\"capabilities\">\n            ${capabilities.join(' • ')}\n          </div>\n        ` : ''}\n      </div>\n      \n      <div class=\"center-actions\">\n        <button class=\"call-button\" onclick=\"window.open('tel:${center.emergency || center.phone}')\">\n          📞 Call\n        </button>\n        <button class=\"directions-button\" onclick=\"window.open('https://maps.google.com/maps?daddr=${center.coordinates.lat},${center.coordinates.lng}', '_blank')\">\n          🧭 Directions\n        </button>\n      </div>\n    </div>\n  `;\n}\n\nfunction showLocationError(message, container) {\n  container.innerHTML = `\n    <div class=\"location-error\">\n      <p>⚠️ ${message}</p>\n      <p><small>${t('tryManualEntry')}</small></p>\n    </div>\n  `;\n}\n","import { CRITICAL_THRESHOLDS } from '../config.js';\n\nexport function getRiskLevel(probabilityPercent, type) {\n  const p = Number(probabilityPercent);\n  const thresholds = CRITICAL_THRESHOLDS[type];\n\n  if (p >= thresholds.high) {\n    return '🔴 HIGH RISK';\n  } if (p >= thresholds.medium) {\n    return '🟡 MEDIUM RISK';\n  }\n  return '🟢 LOW RISK';\n}\n\nexport function formatTime(milliseconds) {\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n","/**\n * ICH Volume Calculation and Clinical Assessment\n * Based on validated log-log regression model (R² = 0.476)\n * Formula: log₁₀(Volume) = 0.0192 + 0.4533 × log₁₀(GFAP)\n */\n\n// Volume-based risk thresholds with clinical significance\nexport const VOLUME_THRESHOLDS = {\n  low: {\n    max: 10, color: '#dc2626', label: 'Small', severity: 'low',\n  },\n  moderate: {\n    min: 10, max: 20, color: '#dc2626', label: 'Moderate', severity: 'moderate',\n  },\n  high: {\n    min: 20, max: 30, color: '#dc2626', label: 'Large', severity: 'high',\n  },\n  critical: {\n    min: 30, color: '#dc2626', label: 'Critical', severity: 'critical',\n  },\n};\n\n// 30-day mortality rates by hemorrhage volume (based on clinical literature)\n// Calibrated to Broderick et al. (1993) landmark study:\n// - 30ml = 19% mortality\n// - 60ml = 91% mortality\n// With correlation strengths from observational data\n// Reference thresholds for documentation purposes:\nexport const MORTALITY_BY_VOLUME = {\n  '<10ml': '5-10%', // Minor hemorrhage\n  '10-30ml': '10-19%', // Small (Broderick: 30ml=19%)\n  '30-50ml': '19-44%', // Moderate (interpolated)\n  '50-60ml': '44-91%', // Large (Broderick: 60ml=91%)\n  '≥60ml': '91-100%', // Massive (Broderick: >60ml=91-100%)\n};\n\n/**\n * Calculate ICH volume from GFAP biomarker value\n * @param {number} gfapValue - GFAP value in pg/ml (0-10,000)\n * @returns {object} Volume calculation results\n */\nexport function calculateICHVolume(gfapValue) {\n  // Handle edge cases\n  if (!gfapValue || gfapValue <= 0) {\n    return {\n      volume: 0,\n      volumeRange: { min: 0, max: 0 },\n      riskLevel: 'low',\n      mortalityRate: '~0%',\n      isValid: true,\n      calculation: 'No hemorrhage detected',\n    };\n  }\n\n  // Cap extremely high GFAP values\n  const cappedGfap = Math.min(gfapValue, 10000);\n  if (gfapValue > 10000) {\n    console.warn(`GFAP value ${gfapValue} exceeds expected range, capped at 10,000 pg/ml`);\n  }\n\n  try {\n    // Apply log-log regression formula\n    const logVolume = 0.0192 + 0.4533 * Math.log10(cappedGfap);\n    const calculatedVolume = 10 ** logVolume;\n\n    // Calculate confidence range (±30%)\n    const volumeRange = {\n      min: calculatedVolume * 0.7,\n      max: calculatedVolume * 1.3,\n    };\n\n    // Determine risk level based on volume\n    const riskLevel = getVolumeRiskLevel(calculatedVolume);\n\n    // Get mortality rate\n    const mortalityRate = getMortalityRate(calculatedVolume);\n\n    // Format volume for display\n    const displayVolume = calculatedVolume < 1 ? '<1' : calculatedVolume.toFixed(1);\n\n    return {\n      volume: calculatedVolume,\n      displayVolume,\n      volumeRange: {\n        min: volumeRange.min.toFixed(1),\n        max: volumeRange.max.toFixed(1),\n      },\n      riskLevel,\n      mortalityRate,\n      isValid: true,\n      calculation: `Based on GFAP ${gfapValue} pg/ml`,\n      threshold: calculatedVolume >= 30 ? 'SURGICAL' : calculatedVolume >= 20 ? 'HIGH_RISK' : 'MANAGEABLE',\n    };\n  } catch (error) {\n    console.error('Volume calculation error:', error);\n    return {\n      volume: 0,\n      volumeRange: { min: 0, max: 0 },\n      riskLevel: 'low',\n      mortalityRate: 'Unknown',\n      isValid: false,\n      calculation: 'Calculation error',\n      error: error.message,\n    };\n  }\n}\n\n/**\n * Determine risk level based on calculated volume\n * @param {number} volume - Calculated volume in ml\n * @returns {string} Risk level key\n */\nfunction getVolumeRiskLevel(volume) {\n  if (volume >= VOLUME_THRESHOLDS.critical.min) {\n    return 'critical';\n  }\n  if (volume >= VOLUME_THRESHOLDS.high.min) {\n    return 'high';\n  }\n  if (volume >= VOLUME_THRESHOLDS.moderate.min) {\n    return 'moderate';\n  }\n  return 'low';\n}\n\n/**\n * Get mortality rate based on volume with improved interpolation\n * Calibrated to match clinical studies (Broderick 1993: 30ml=19%, 60ml=91%)\n * @param {number} volume - Volume in ml\n * @returns {string} Mortality rate string with citation\n */\nfunction getMortalityRate(volume) {\n  // For very small hemorrhages\n  if (volume < 10) {\n    return '5-10%⁴';\n  }\n\n  // For small hemorrhages (10-30ml)\n  // Broderick: 30ml = 19% mortality\n  if (volume < 30) {\n    // Linear interpolation: 10ml=10%, 30ml=19%\n    const rate = Math.round(10 + (volume - 10) * (19 - 10) / (30 - 10));\n    return `${rate}%⁴`;\n  }\n\n  // For moderate hemorrhages (30-50ml)\n  // Interpolating from Broderick 30ml=19% to 50ml≈44%\n  if (volume < 50) {\n    // Linear interpolation: 30ml=19%, 50ml=44%\n    const rate = Math.round(19 + (volume - 30) * (44 - 19) / (50 - 30));\n    return `${rate}%³`;\n  }\n\n  // For large hemorrhages (50-60ml)\n  // Broderick: 60ml = 91% mortality\n  if (volume < 60) {\n    // Steeper increase: 50ml=44%, 60ml=91%\n    const rate = Math.round(44 + (volume - 50) * (91 - 44) / (60 - 50));\n    return `${rate}%²`;\n  }\n\n  // For massive hemorrhages (≥60ml)\n  // Broderick: >60ml = 91-100%\n  if (volume < 80) {\n    // 60ml=91%, 80ml=96%\n    const rate = Math.round(91 + (volume - 60) * (96 - 91) / (80 - 60));\n    return `${rate}%¹`;\n  }\n\n  // For extreme cases (≥80ml)\n  return '96-100%¹';\n}\n\n/**\n * Calculate hemorrhage size percentage for visualization\n * Based on brain area scaling: 30ml = ~40% of brain area, 100ml = ~70%\n * @param {number} volume - Volume in ml\n * @returns {number} Percentage of brain area (0-70)\n */\nexport function calculateHemorrhageSizePercent(volume) {\n  if (volume <= 0) {\n    return 0;\n  }\n  if (volume >= 100) {\n    return 70;\n  } // Maximum 70% of brain area\n\n  // Non-linear scaling for realistic appearance\n  // 30ml = 40%, 100ml = 70%\n  const basePercent = Math.sqrt(volume / 30) * 40;\n  return Math.min(basePercent, 70);\n}\n\n/**\n * Get color for volume visualization\n * @param {number} volume - Volume in ml\n * @returns {string} CSS color value\n */\nexport function getVolumeColor(volume) {\n  const riskLevel = getVolumeRiskLevel(volume);\n  return VOLUME_THRESHOLDS[riskLevel].color;\n}\n\n/**\n * Test function for validation\n * Tests the calculator with known GFAP values\n */\nexport function testVolumeCalculator() {\n  const testCases = [\n    { gfap: 100, expectedVolume: '~5ml' },\n    { gfap: 500, expectedVolume: '~15ml' },\n    { gfap: 1000, expectedVolume: '~21ml' },\n    { gfap: 1500, expectedVolume: '~28ml' },\n    { gfap: 3000, expectedVolume: '~50ml' },\n    { gfap: 5000, expectedVolume: '~72ml' },\n  ];\n\n  console.log('🧪 ICH Volume Calculator Test Results:');\n  testCases.forEach((test) => {\n    const result = calculateICHVolume(test.gfap);\n    console.log(`GFAP ${test.gfap}: ${result.displayVolume}ml (${test.expectedVolume}) - ${result.riskLevel} risk - ${result.mortalityRate}`);\n  });\n}\n\n/**\n * Format volume for display with appropriate precision\n * @param {number} volume - Volume in ml\n * @returns {string} Formatted volume string\n */\nexport function formatVolumeDisplay(volume) {\n  if (volume < 1) {\n    return '<1 ml';\n  }\n  if (volume < 10) {\n    return `${volume.toFixed(1)} ml`;\n  }\n  return `${Math.round(volume)} ml`;\n}\n","/**\n * Brain Visualization Component for ICH Volume Display\n * Creates an SVG-based brain hemorrhage visualization\n */\n\nimport {\n  calculateHemorrhageSizePercent, getVolumeColor, calculateICHVolume, formatVolumeDisplay,\n} from '../../logic/ich-volume-calculator.js';\n\n/**\n * Render brain visualization with hemorrhage overlay\n * @param {number} volume - ICH volume in ml\n * @param {string} size - 'compact' or 'detailed'\n * @returns {string} HTML string with SVG brain visualization\n */\nexport function renderBrainVisualization(volume, size = 'compact') {\n  const dimensions = size === 'compact' ? { width: 120, height: 120 } : { width: 200, height: 200 };\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  // Calculate hemorrhage appearance\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\n  const hemorrhageColor = getVolumeColor(volume);\n\n  // Scale hemorrhage radius based on volume (basal ganglia region, slightly off-center)\n  const maxRadius = dimensions.width * 0.25; // Maximum 25% of brain width\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius; // 70% is max brain area\n\n  // Position hemorrhage in basal ganglia region (slightly right of center)\n  const hemorrhageX = centerX + (dimensions.width * 0.1); // 10% right of center\n  const hemorrhageY = centerY + (dimensions.height * 0.05); // 5% below center\n\n  // 30ml reference circle (for detailed view)\n  const referenceRadius = (40 / 70) * maxRadius; // 40% brain area = 30ml threshold\n\n  // Animation for hemorrhage (subtle pulsing)\n  const animationId = `hemorrhage-pulse-${Math.random().toString(36).substr(2, 9)}`;\n\n  return `\n    <div class=\"brain-visualization ${size}\">\n      <svg \n        width=\"${dimensions.width}\" \n        height=\"${dimensions.height}\" \n        viewBox=\"0 0 ${dimensions.width} ${dimensions.height}\"\n        class=\"brain-svg\"\n        role=\"img\"\n        aria-label=\"Brain hemorrhage visualization showing ${volume.toFixed(1)}ml ICH volume\"\n      >\n        <!-- Brain outline with hemorrhage overlay -->\n        ${renderBrainOutlineWithHemorrhage(dimensions, volume)}\n        \n        <!-- 30ml reference indicator (detailed view only) -->\n        ${size === 'detailed' && volume > 0 ? `\n          <circle \n            cx=\"${hemorrhageX}\" \n            cy=\"${hemorrhageY}\" \n            r=\"${referenceRadius}\"\n            fill=\"none\" \n            stroke=\"#9ca3af\" \n            stroke-width=\"1\" \n            stroke-dasharray=\"3,3\"\n            opacity=\"0.5\"\n          />\n          <text \n            x=\"${hemorrhageX + referenceRadius + 5}\" \n            y=\"${hemorrhageY - referenceRadius}\" \n            font-size=\"10\" \n            fill=\"#6b7280\"\n            font-family=\"system-ui\"\n          >30ml</text>\n        ` : ''}\n        \n        <!-- Hemorrhage visualization -->\n        ${volume > 0 ? `\n          <circle \n            cx=\"${hemorrhageX}\" \n            cy=\"${hemorrhageY}\" \n            r=\"${hemorrhageRadius}\"\n            fill=\"${hemorrhageColor}\"\n            opacity=\"0.8\"\n            class=\"hemorrhage-circle\"\n          >\n            <!-- Subtle pulsing animation -->\n            <animate \n              attributeName=\"opacity\" \n              values=\"0.6;0.9;0.6\" \n              dur=\"2.5s\" \n              repeatCount=\"indefinite\"\n            />\n            ${hemorrhageRadius > 15 ? `\n            <animate \n              attributeName=\"r\" \n              values=\"${hemorrhageRadius * 0.95};${hemorrhageRadius};${hemorrhageRadius * 0.95}\" \n              dur=\"2.5s\" \n              repeatCount=\"indefinite\"\n            />\n            ` : ''}\n          </circle>\n          \n          <!-- Volume label (detailed view only) -->\n          ${size === 'detailed' ? `\n            <text \n              x=\"${centerX}\" \n              y=\"${dimensions.height - 10}\" \n              text-anchor=\"middle\" \n              font-size=\"12\" \n              font-weight=\"bold\"\n              fill=\"#374151\"\n              font-family=\"system-ui\"\n            >${volume < 1 ? '<1' : volume.toFixed(1)} ml</text>\n          ` : ''}\n        ` : ''}\n        \n        <style>\n          .hemorrhage-circle {\n            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));\n          }\n        </style>\n      </svg>\n    </div>\n  `;\n}\n\n/**\n * Load and render the provided brain SVG with hemorrhage overlay\n * @param {object} dimensions - Width and height for the brain\n * @returns {string} Brain SVG with embedded hemorrhage visualization\n */\nfunction renderBrainOutlineWithHemorrhage(dimensions, volume) {\n  // For performance, we'll use the SVG as a background image and overlay the hemorrhage\n  // This avoids loading the 530KB SVG content directly into the DOM\n\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  // Calculate hemorrhage position (basal ganglia region - slightly right and posterior)\n  const hemorrhageX = centerX + (dimensions.width * 0.08); // 8% right of center\n  const hemorrhageY = centerY + (dimensions.height * 0.03); // 3% below center\n\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\n  const hemorrhageColor = getVolumeColor(volume);\n  const maxRadius = dimensions.width * 0.25;\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius;\n\n  return `\n    <!-- 3D Brain image as background -->\n    <image \n      x=\"0\" \n      y=\"0\" \n      width=\"${dimensions.width}\" \n      height=\"${dimensions.height}\"\n      href=\"./src/assets/brain-3d.png\"\n      opacity=\"0.95\"\n      preserveAspectRatio=\"xMidYMid meet\"\n    />\n    \n    <!-- Hemorrhage overlay in basal ganglia region -->\n    ${volume > 0 ? `\n      <circle \n        cx=\"${hemorrhageX}\" \n        cy=\"${hemorrhageY}\" \n        r=\"${hemorrhageRadius}\"\n        fill=\"${hemorrhageColor}\"\n        opacity=\"0.85\"\n        class=\"hemorrhage-circle\"\n      >\n        <!-- Subtle pulsing animation -->\n        <animate \n          attributeName=\"opacity\" \n          values=\"0.7;0.95;0.7\" \n          dur=\"2.5s\" \n          repeatCount=\"indefinite\"\n        />\n        ${hemorrhageRadius > 8 ? `\n        <animate \n          attributeName=\"r\" \n          values=\"${hemorrhageRadius * 0.96};${hemorrhageRadius * 1.02};${hemorrhageRadius * 0.96}\" \n          dur=\"2.5s\" \n          repeatCount=\"indefinite\"\n        />\n        ` : ''}\n      </circle>\n      \n      <!-- Hemorrhage center highlight -->\n      <circle \n        cx=\"${hemorrhageX}\" \n        cy=\"${hemorrhageY}\" \n        r=\"${hemorrhageRadius * 0.3}\"\n        fill=\"${hemorrhageColor}\"\n        opacity=\"0.95\"\n        class=\"hemorrhage-center\"\n      />\n    ` : ''}\n  `;\n}\n\n/**\n * Temporary brain outline (for fallback when SVG file not available)\n */\nfunction renderTemporaryBrainOutline(dimensions) {\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  return `\n    <!-- Simplified brain outline -->\n    <ellipse \n      cx=\"${centerX}\" \n      cy=\"${centerY}\" \n      rx=\"${dimensions.width * 0.4}\" \n      ry=\"${dimensions.height * 0.35}\" \n      fill=\"#f1f5f9\" \n      stroke=\"#64748b\" \n      stroke-width=\"2\"\n      opacity=\"0.8\"\n    />\n    \n    <!-- Brain hemisphere division -->\n    <line \n      x1=\"${centerX}\" \n      y1=\"${centerY - dimensions.height * 0.25}\" \n      x2=\"${centerX}\" \n      y2=\"${centerY + dimensions.height * 0.25}\" \n      stroke=\"#9ca3af\" \n      stroke-width=\"1\" \n      opacity=\"0.5\"\n    />\n  `;\n}\n\n/**\n * Create compact brain icon for inline display\n * @param {number} volume - ICH volume in ml\n * @param {number} size - Icon size in pixels\n * @returns {string} Small brain icon with hemorrhage indicator\n */\nexport function renderCompactBrainIcon(volume, size = 24) {\n  const hemorrhageColor = getVolumeColor(volume);\n  const hemorrhageSize = volume > 0 ? Math.max(2, (volume / 50) * size * 0.3) : 0;\n\n  return `\n    <svg \n      width=\"${size}\" \n      height=\"${size}\" \n      viewBox=\"0 0 ${size} ${size}\"\n      class=\"brain-icon\"\n      style=\"display: inline-block; vertical-align: middle;\"\n    >\n      <!-- Simple brain outline -->\n      <ellipse \n        cx=\"${size / 2}\" \n        cy=\"${size / 2}\" \n        rx=\"${size * 0.4}\" \n        ry=\"${size * 0.35}\" \n        fill=\"#f1f5f9\" \n        stroke=\"#64748b\" \n        stroke-width=\"1\"\n      />\n      \n      <!-- Hemorrhage indicator -->\n      ${volume > 0 ? `\n        <circle \n          cx=\"${size / 2 + size * 0.1}\" \n          cy=\"${size / 2}\" \n          r=\"${hemorrhageSize}\"\n          fill=\"${hemorrhageColor}\"\n          opacity=\"0.9\"\n        />\n      ` : ''}\n    </svg>\n  `;\n}\n\n/**\n * Render circular brain display matching ICH risk circle style\n * @param {number} volume - ICH volume in ml\n * @returns {string} HTML for circular brain display\n */\nexport function renderCircularBrainDisplay(volume) {\n  if (!volume || volume <= 0) {\n    return `\n      <div class=\"volume-circle\" data-volume=\"0\">\n        <div class=\"volume-number\">0<span> ml</span></div>\n        <canvas class=\"volume-canvas\" width=\"120\" height=\"120\"></canvas>\n      </div>\n    `;\n  }\n\n  const formattedVolume = formatVolumeDisplay(volume);\n  const canvasId = `volume-canvas-${Math.random().toString(36).substr(2, 9)}`;\n\n  return `\n    <div class=\"volume-circle\" data-volume=\"${volume}\">\n      <div class=\"volume-number\">${formattedVolume}</div>\n      <canvas id=\"${canvasId}\" class=\"volume-canvas\" \n              data-volume=\"${volume}\" data-canvas-id=\"${canvasId}\"></canvas>\n    </div>\n  `;\n}\n\n/**\n * Initialize fluid fill animation for volume canvas\n * Call this after DOM is updated with new volume circles\n */\nexport function initializeVolumeAnimations() {\n  const canvases = document.querySelectorAll('.volume-canvas');\n\n  canvases.forEach((canvas) => {\n    // Set canvas internal size to match CSS size\n    const cssWidth = canvas.offsetWidth || 120;\n    const cssHeight = canvas.offsetHeight || 120;\n    canvas.width = cssWidth;\n    canvas.height = cssHeight;\n\n    const volume = parseFloat(canvas.dataset.volume) || 0;\n    if (volume > 0) {\n      drawVolumeFluid(canvas, volume);\n    }\n  });\n}\n\n/**\n * Draw fluid fill animation on canvas\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {number} volume - ICH volume in ml\n */\nfunction drawVolumeFluid(canvas, volume) {\n  const ctx = canvas.getContext('2d');\n  const centerX = canvas.width / 2;\n  const centerY = canvas.height / 2;\n  const radius = canvas.width * 0.45; // 45% of canvas width for the circle\n  let animationFrame = 0;\n  let isAnimating = true;\n\n  // Check dark mode once\n  const isDarkMode = document.body.classList.contains('dark-mode')\n                    || window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n  function draw() {\n    if (!isAnimating) {\n      return;\n    }\n\n    // Clear canvas completely\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Don't draw background - let CSS handle it\n    // Just draw the fluid and border\n    drawFluidLayer();\n  }\n\n  function drawFluidLayer() {\n    // Calculate fill level based on volume\n    const maxVolume = 80; // ml (practical maximum for visualization)\n    const fillPercentage = Math.min(volume / maxVolume, 0.9);\n    const fillHeight = fillPercentage * (radius * 1.8);\n    const baseLevel = centerY + radius - 4 - fillHeight;\n\n    // Draw fluid fill with waves\n    if (volume > 0) {\n      ctx.save();\n\n      // Clip to circle\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius - 4, 0, Math.PI * 2);\n      ctx.clip();\n\n      // Draw base fluid rectangle\n      ctx.fillStyle = '#dc2626';\n      ctx.globalAlpha = 0.7;\n      ctx.fillRect(0, baseLevel + 5, canvas.width, canvas.height);\n\n      // Draw animated wave surface\n      ctx.globalAlpha = 0.9;\n      ctx.fillStyle = '#dc2626';\n      ctx.beginPath();\n\n      // Create wave path\n      const startX = centerX - radius + 4;\n      ctx.moveTo(startX, baseLevel);\n\n      for (let x = startX; x <= centerX + radius - 4; x += 2) {\n        const waveOffset1 = Math.sin((x * 0.05) + animationFrame * 0.08) * 3;\n        const waveOffset2 = Math.sin((x * 0.08) + animationFrame * 0.12 + 1) * 2;\n        const y = baseLevel + waveOffset1 + waveOffset2;\n        ctx.lineTo(x, y);\n      }\n\n      // Complete wave fill\n      ctx.lineTo(centerX + radius - 4, canvas.height);\n      ctx.lineTo(startX, canvas.height);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.restore();\n    }\n\n    // Draw background border circle (like ICH risk ring)\n    const borderColor = getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim()\n                       || (isDarkMode ? '#8899a6' : '#6c757d');\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = 8;\n    ctx.globalAlpha = 0.4;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.globalAlpha = 1;\n\n    // Draw volume progress ring (like ICH risk circle)\n    const volumePercent = Math.min(volume / 100, 1); // Max 100ml = 100%\n    const circumference = 2 * Math.PI * radius;\n    const progressOffset = circumference * (1 - volumePercent);\n\n    // Progress ring (dark mode aware)\n    const progressColor = getComputedStyle(document.documentElement).getPropertyValue('--danger-color').trim()\n                         || '#dc2626';\n    ctx.strokeStyle = progressColor;\n    ctx.lineWidth = 8;\n    ctx.setLineDash([]);\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, -Math.PI / 2, -Math.PI / 2 + (volumePercent * 2 * Math.PI));\n    ctx.stroke();\n\n    // Continue animation\n    animationFrame += 1;\n    if (volume > 0) {\n      requestAnimationFrame(draw);\n    }\n  }\n\n  // Start animation\n  draw();\n\n  // Stop animation when canvas is removed from DOM\n  const observer = new MutationObserver(() => {\n    if (!document.contains(canvas)) {\n      isAnimating = false;\n      observer.disconnect();\n    }\n  });\n  observer.observe(document.body, { childList: true, subtree: true });\n}\n\n/**\n * Get brain visualization CSS classes\n * @param {string} size - 'compact' or 'detailed'\n * @returns {string} CSS classes\n */\nexport function getBrainVisualizationClasses(size) {\n  const baseClasses = 'brain-visualization';\n  const sizeClasses = size === 'compact' ? 'compact-brain' : 'detailed-brain';\n  return `${baseClasses} ${sizeClasses}`;\n}\n","import { renderProgressIndicator } from '../components/progress.js';\nimport { renderCriticalAlert } from '../components/alerts.js';\nimport { renderDriversSection } from '../components/drivers.js';\nimport { renderStrokeCenterMap } from '../components/stroke-center-map.js';\nimport { getRiskLevel, formatTime } from '../../logic/formatters.js';\nimport { CRITICAL_THRESHOLDS } from '../../config.js';\nimport { t, i18n } from '../../localization/i18n.js';\nimport { store } from '../../state/store.js';\nimport { formatSummaryLabel, formatDisplayValue, formatDriverName } from '../../utils/label-formatter.js';\nimport { calculateICHVolume, formatVolumeDisplay } from '../../logic/ich-volume-calculator.js';\nimport { renderCircularBrainDisplay, initializeVolumeAnimations } from '../components/brain-visualization.js';\n// Dynamic import for React islands to avoid module resolution issues\n// Using React island tachometer instead of the vanilla premium gauge\nimport { calculateLegacyICH } from '../../research/legacy-ich-model.js';\nimport { safeLogResearchData, isResearchModeEnabled } from '../../research/data-logger.js';\nimport { renderModelComparison, renderResearchToggle } from '../../research/comparison-ui.js';\n// Premium vanilla JS tachometer implementation\n\nfunction getModuleDisplayName(module) {\n  const isDE = i18n.getCurrentLanguage() === 'de';\n  const moduleNames = {\n    Coma: isDE ? 'Koma-Modul' : 'Coma Module',\n    Limited: isDE ? 'Begrenzte Daten' : 'Limited Data',\n    Full: isDE ? 'Vollständige Bewertung' : 'Full Assessment',\n  };\n  return moduleNames[module] || module;\n}\n\nfunction renderInputSummary() {\n  const state = store.getState();\n  const { formData } = state;\n\n  if (!formData || Object.keys(formData).length === 0) {\n    return '';\n  }\n\n  let summaryHtml = '';\n\n  // Iterate through each module's form data\n  Object.entries(formData).forEach(([module, data]) => {\n    if (data && Object.keys(data).length > 0) {\n      const moduleTitle = t(`${module}ModuleTitle`) || module.charAt(0).toUpperCase() + module.slice(1);\n      let itemsHtml = '';\n\n      Object.entries(data).forEach(([key, value]) => {\n        // Skip empty values\n        if (value === '' || value === null || value === undefined) {\n          return;\n        }\n\n        // Use consistent medical terminology from input forms\n        const label = formatSummaryLabel(key);\n\n        // Format value with appropriate units\n        const displayValue = formatDisplayValue(value, key);\n\n        itemsHtml += `\n          <div class=\"summary-item\">\n            <span class=\"summary-label\">${label}:</span>\n            <span class=\"summary-value\">${displayValue}</span>\n          </div>\n        `;\n      });\n\n      if (itemsHtml) {\n        summaryHtml += `\n          <div class=\"summary-module\">\n            <h4>${moduleTitle}</h4>\n            <div class=\"summary-items\">\n              ${itemsHtml}\n            </div>\n          </div>\n        `;\n      }\n    }\n  });\n\n  if (!summaryHtml) {\n    return '';\n  }\n\n  return `\n    <div class=\"input-summary\">\n      <h3>📋 ${t('inputSummaryTitle')}</h3>\n      <p class=\"summary-subtitle\">${t('inputSummarySubtitle')}</p>\n      <div class=\"summary-content\">\n        ${summaryHtml}\n      </div>\n    </div>\n  `;\n}\n\nfunction renderRiskCard(type, data, results) {\n  if (!data) {\n    return '';\n  }\n\n  const percent = Math.round((data.probability || 0) * 100);\n  const riskLevel = getRiskLevel(percent, type);\n  const isCritical = percent > 70; // Very high risk threshold\n  const isHigh = percent > CRITICAL_THRESHOLDS[type].high;\n\n  const icons = { ich: '🩸', lvo: '🧠' };\n  const titles = { ich: t('ichProbability'), lvo: t('lvoProbability') };\n\n  const level = isCritical ? 'critical' : isHigh ? 'high' : 'normal';\n  return `\n    <div class=\"enhanced-risk-card ${type} ${level}\">\n      <div class=\"risk-header\">\n        <div class=\"risk-icon\">${icons[type]}</div>\n        <div class=\"risk-title\">\n          <h3>${titles[type]}</h3>\n        </div>\n      </div>\n      \n      <div class=\"risk-probability\">\n        <div class=\"circles-container\">\n          <div class=\"rings-row\">\n            <div class=\"circle-item\">\n              <div class=\"probability-circle\" data-react-ring data-percent=\"${percent}\" data-level=\"${level}\"></div>\n              <div class=\"circle-label\">${type === 'ich' ? 'ICH Risk' : 'LVO Risk'}</div>\n            </div>\n          </div>\n          <div class=\"risk-level ${level}\">${riskLevel}</div>\n        </div>\n        \n        <div class=\"risk-assessment\"></div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render ICH volume display for integration into risk card\n * @param {object} data - ICH risk data containing GFAP value\n * @returns {string} HTML for volume display\n */\nfunction renderICHVolumeDisplay(data) {\n  // Get GFAP value from the data\n  const gfapValue = data.gfap_value || getCurrentGfapValue();\n\n  if (!gfapValue || gfapValue <= 0) {\n    return '';\n  }\n\n  const volumeResult = calculateICHVolume(gfapValue);\n\n  return `\n    <div class=\"volume-display-container\">\n      ${renderCircularBrainDisplay(volumeResult.volume)}\n    </div>\n  `;\n}\n\n/**\n * Get current GFAP value from form data\n * @returns {number} GFAP value or 0 if not available\n */\nfunction getCurrentGfapValue() {\n  const state = store.getState();\n  const { formData } = state;\n\n  // Check all modules for GFAP value\n  for (const module of ['coma', 'limited', 'full']) {\n    if (formData[module]?.gfap_value) {\n      return parseFloat(formData[module].gfap_value);\n    }\n  }\n\n  return 0;\n}\n\nfunction renderLVONotPossible() {\n  return `\n    <div class=\"enhanced-risk-card lvo not-possible\">\n      <div class=\"risk-header\">\n        <div class=\"risk-icon\">🔍</div>\n        <div class=\"risk-title\">\n          <h3>${t('lvoProbability')}</h3>\n          <span class=\"risk-module\">${t('limitedAssessment')}</span>\n        </div>\n      </div>\n      \n      <div class=\"not-possible-content\">\n        <p>${t('lvoNotPossible')}</p>\n        <p>${t('fullExamRequired')}</p>\n      </div>\n    </div>\n  `;\n}\n\nexport function renderResults(results, startTime) {\n  const { ich, lvo } = results;\n\n  // Determine current module\n  const currentModule = getCurrentModuleName(ich);\n\n  // Calculate legacy model for research comparison (only for stroke modules)\n  const legacyResults = currentModule !== 'coma' ? calculateLegacyFromResults(results) : null;\n\n  // Debug logging for research mode\n\n  // Log research data if research mode is enabled (background, non-breaking)\n  if (legacyResults && isResearchModeEnabled(currentModule)) {\n    safeLogResearchData(ich, legacyResults, getPatientInputs());\n  }\n\n  // Detect which module was used based on the data\n  const isLimitedOrComa = ich?.module === 'Limited' || ich?.module === 'Coma' || lvo?.notPossible === true;\n  const isFullModule = ich?.module === 'Full';\n\n  let resultsHtml;\n\n  // For limited/coma modules - only show ICH\n  if (isLimitedOrComa) {\n    resultsHtml = renderICHFocusedResults(ich, results, startTime, legacyResults, currentModule);\n  } else {\n    // For full module - show ICH prominently with conditional LVO text\n    resultsHtml = renderFullModuleResults(ich, lvo, results, startTime, legacyResults, currentModule);\n  }\n\n  // Initialize animations after DOM update\n  setTimeout(async () => {\n    initializeVolumeAnimations();\n    try {\n      const { mountIslands } = await import('../../react/mountIslands.jsx');\n      mountIslands();\n    } catch (err) {\n      console.warn('React islands not available:', err);\n    }\n  }, 100);\n\n  return resultsHtml;\n}\n\nfunction renderICHFocusedResults(ich, results, startTime, legacyResults, currentModule) {\n  const criticalAlert = ich && ich.probability > 0.6 ? renderCriticalAlert() : '';\n  const ichPercentLocal = Math.round((ich?.probability || 0) * 100);\n  const strokeCenterHtml = renderStrokeCenterMap(results);\n  const inputSummaryHtml = renderInputSummary();\n  const researchToggleHtml = isResearchModeEnabled(currentModule) ? renderResearchToggle() : '';\n  const researchComparisonHtml = (legacyResults && isResearchModeEnabled(currentModule))\n    ? renderModelComparison(ich, legacyResults, getPatientInputs()) : '';\n\n  // Add alternative diagnoses for coma module\n  const alternativeDiagnosesHtml = (ich?.module === 'Coma') ? renderComaAlternativeDiagnoses(ich.probability) : '';\n\n  // Add differential diagnoses for stroke modules (limited and full)\n  const strokeDifferentialHtml = (ich?.module !== 'Coma') ? renderStrokeDifferentialDiagnoses(ich.probability) : '';\n\n  return `\n    <div class=\"container\">\n      ${renderProgressIndicator(3)}\n      <h2>${t('bleedingRiskAssessment') || 'Blutungsrisiko-Bewertung / Bleeding Risk Assessment'}</h2>\n      ${criticalAlert}\n      \n      <!-- Single ICH Risk Card -->\n      <div class=\"risk-results-single\">\n        ${renderRiskCard('ich', ich, results)}\n      </div>\n\n      ${ich?.module === 'Coma' && ichPercentLocal >= 50 ? `\n      <!-- ICH Volume Card (Coma only) -->\n      <div class=\"risk-results-single\">\n        ${renderVolumeCard(ich)}\n      </div>\n      ` : ''}\n      \n      <!-- Alternative Diagnoses for Coma Module -->\n      ${alternativeDiagnosesHtml}\n      \n      <!-- Differential Diagnoses for Stroke Modules -->\n      ${strokeDifferentialHtml}\n      \n      <!-- Research Model Comparison (hidden unless research mode) -->\n      ${researchComparisonHtml}\n      \n      <!-- ICH Drivers Only (not shown for Coma module) -->\n      ${ich?.module !== 'Coma' ? `\n        <div class=\"enhanced-drivers-section\">\n          <h3>${t('riskFactorsTitle') || 'Hauptrisikofaktoren / Main Risk Factors'}</h3>\n          ${renderICHDriversOnly(ich)}\n        </div>\n      ` : ''}\n      \n      <!-- Collapsible Additional Information -->\n      <div class=\"additional-info-section\">\n        <button class=\"info-toggle\" data-target=\"input-summary\">\n          <span class=\"toggle-icon\">📋</span>\n          <span class=\"toggle-text\">${t('inputSummaryTitle')}</span>\n          <span class=\"toggle-arrow\">▼</span>\n        </button>\n        <div class=\"collapsible-content\" id=\"input-summary\" style=\"display: none;\">\n          ${inputSummaryHtml}\n        </div>\n        \n        <button class=\"info-toggle\" data-target=\"stroke-centers\">\n          <span class=\"toggle-icon\">🏥</span>\n          <span class=\"toggle-text\">${t('nearestCentersTitle')}</span>\n          <span class=\"toggle-arrow\">▼</span>\n        </button>\n        <div class=\"collapsible-content\" id=\"stroke-centers\" style=\"display: none;\">\n          ${strokeCenterHtml}\n        </div>\n      </div>\n      \n      <div class=\"results-actions\">\n        <div class=\"primary-actions\">\n          <button type=\"button\" class=\"primary\" id=\"printResults\"> 📄 ${t('printResults')} </button>\n          <button type=\"button\" class=\"secondary\" data-action=\"reset\"> ${t('newAssessment')} </button>\n        </div>\n        <div class=\"navigation-actions\">\n          <button type=\"button\" class=\"tertiary\" data-action=\"goBack\"> ← ${t('goBack')} </button>\n          <button type=\"button\" class=\"tertiary\" data-action=\"goHome\"> 🏠 ${t('goHome')} </button>\n        </div>\n      </div>\n      \n      <div class=\"disclaimer\">\n        <strong>⚠️ ${t('importantNote')}:</strong> ${t('importantText')} Results generated at ${new Date().toLocaleTimeString()}.\n      </div>\n      \n      ${renderBibliography(ich)}\n      ${researchToggleHtml}\n    </div>\n  `;\n}\n\nfunction renderFullModuleResults(ich, lvo, results, startTime, legacyResults, currentModule) {\n  const ichPercent = Math.round((ich?.probability || 0) * 100);\n  const lvoPercent = Math.round((lvo?.probability || 0) * 100);\n\n  const criticalAlert = ich && ich.probability > 0.6 ? renderCriticalAlert() : '';\n  const strokeCenterHtml = renderStrokeCenterMap(results);\n  const inputSummaryHtml = renderInputSummary();\n  const researchToggleHtml = isResearchModeEnabled(currentModule) ? renderResearchToggle() : '';\n  const researchComparisonHtml = (legacyResults && isResearchModeEnabled(currentModule))\n    ? renderModelComparison(ich, legacyResults, getPatientInputs()) : '';\n\n  // Get FAST-ED score from form data to determine LVO display\n  const state = store.getState();\n  const fastEdScore = parseInt(state.formData?.full?.fast_ed_score) || 0;\n\n  // Ensure we only show LVO in full module and when LVO data is available\n  const isFullModule = currentModule === 'full' || ich?.module === 'Full';\n  const hasValidLVO = lvo && typeof lvo.probability === 'number' && !lvo.notPossible;\n  const showLVORiskCard = isFullModule && fastEdScore > 3 && hasValidLVO;\n\n  console.log('  Conditions: isFullModule:', isFullModule);\n  console.log('  Conditions: fastEdScore > 3:', fastEdScore > 3);\n  console.log('  Conditions: hasValidLVO:', hasValidLVO);\n  console.log('  Show LVO Card:', showLVORiskCard);\n\n  // Determine layout configuration\n  const showVolumeCard = ichPercent >= 50;\n  const maxProbability = Math.max(ichPercent, lvoPercent);\n  // Robust ratio for gating (avoid divide-by-zero)\n  const eps = 0.5;\n  const ratio = lvoPercent / Math.max(ichPercent, eps);\n  const inRatioBand = ratio >= 0.6 && ratio <= 1.7;\n  // Strong-signal gate: both ICH and LVO at least 50%, and ratio in an informative band\n  const showTachometer = isFullModule && ichPercent >= 50 && lvoPercent >= 50 && inRatioBand;\n  const showDominanceBanner = isFullModule && ichPercent >= 50 && lvoPercent >= 50 && !inRatioBand;\n  // DEBUG: Temporary relaxed conditions for testing\n  const debugShowTachometer = isFullModule && ichPercent >= 30 && lvoPercent >= 30;\n\n  // Calculate number of cards and layout class\n  let cardCount = 1; // Always have ICH\n  // No placeholder needed - only show LVO card when FAST-ED > 3\n  if (showLVORiskCard) {\n    cardCount++;\n  }\n  if (showVolumeCard) {\n    cardCount++;\n  }\n\n  const layoutClass = cardCount === 1 ? 'risk-results-single'\n    : cardCount === 2 ? 'risk-results-dual'\n      : 'risk-results-triple';\n\n  // Add differential diagnoses for stroke modules\n  const strokeDifferentialHtml = renderStrokeDifferentialDiagnoses(ich.probability);\n\n  return `\n    <div class=\"container\">\n      ${renderProgressIndicator(3)}\n      <h2>${t('resultsTitle')}</h2>\n      ${criticalAlert}\n      \n      <!-- Risk Assessment Display -->\n      <div class=\"${layoutClass}\">\n        ${renderRiskCard('ich', ich, results)}\n        ${showLVORiskCard ? renderRiskCard('lvo', lvo, results) : ''}\n        ${showVolumeCard ? renderVolumeCard(ich) : ''}\n      </div>\n      \n      <!-- Treatment Decision Gauge (when strong signal) -->\n      ${debugShowTachometer ? renderTachometerGauge(ichPercent, lvoPercent) : ''}\n      ${!debugShowTachometer && showDominanceBanner ? renderDominanceBanner(ichPercent, lvoPercent, ratio) : ''}\n      \n      <!-- Differential Diagnoses for Stroke Modules -->\n      ${strokeDifferentialHtml}\n      \n      <!-- Research Model Comparison (hidden unless research mode) -->\n      ${researchComparisonHtml}\n      \n      <!-- Risk Factor Drivers -->\n      <div class=\"enhanced-drivers-section\">\n        <h3>${t('riskFactorsTitle') || 'Risikofaktoren / Risk Factors'}</h3>\n        ${showLVORiskCard ? renderDriversSection(ich, lvo) : renderICHDriversOnly(ich)}\n      </div>\n      \n      <!-- Collapsible Additional Information -->\n      <div class=\"additional-info-section\">\n        <button class=\"info-toggle\" data-target=\"input-summary\">\n          <span class=\"toggle-icon\">📋</span>\n          <span class=\"toggle-text\">${t('inputSummaryTitle')}</span>\n          <span class=\"toggle-arrow\">▼</span>\n        </button>\n        <div class=\"collapsible-content\" id=\"input-summary\" style=\"display: none;\">\n          ${inputSummaryHtml}\n        </div>\n        \n        <button class=\"info-toggle\" data-target=\"stroke-centers\">\n          <span class=\"toggle-icon\">🏥</span>\n          <span class=\"toggle-text\">${t('nearestCentersTitle')}</span>\n          <span class=\"toggle-arrow\">▼</span>\n        </button>\n        <div class=\"collapsible-content\" id=\"stroke-centers\" style=\"display: none;\">\n          ${strokeCenterHtml}\n        </div>\n      </div>\n      \n      <div class=\"results-actions\">\n        <div class=\"primary-actions\">\n          <button type=\"button\" class=\"primary\" id=\"printResults\"> 📄 ${t('printResults')} </button>\n          <button type=\"button\" class=\"secondary\" data-action=\"reset\"> ${t('newAssessment')} </button>\n        </div>\n        <div class=\"navigation-actions\">\n          <button type=\"button\" class=\"tertiary\" data-action=\"goBack\"> ← ${t('goBack')} </button>\n          <button type=\"button\" class=\"tertiary\" data-action=\"goHome\"> 🏠 ${t('goHome')} </button>\n        </div>\n      </div>\n      \n      <div class=\"disclaimer\">\n        <strong>⚠️ ${t('importantNote')}:</strong> ${t('importantText')} Results generated at ${new Date().toLocaleTimeString()}.\n      </div>\n      \n      ${renderBibliography(ich)}\n      ${researchToggleHtml}\n    </div>\n  `;\n}\n\nfunction renderLVONotification() {\n  return `\n    <div class=\"secondary-notification\">\n      <p class=\"lvo-possible\">\n        ⚡ ${t('lvoMayBePossible') || 'Großgefäßverschluss möglich / Large vessel occlusion possible'}\n      </p>\n    </div>\n  `;\n}\n\nfunction renderDominanceBanner(ichPercent, lvoPercent, ratio) {\n  const dominant = ratio > 1 ? 'LVO' : 'ICH';\n  const icon = dominant === 'LVO' ? '🧠' : '🩸';\n  const dominantText = i18n.getCurrentLanguage() === 'de'\n    ? (dominant === 'LVO' ? 'LVO-dominant' : 'ICH-dominant')\n    : (dominant === 'LVO' ? 'LVO dominant' : 'ICH dominant');\n  const subtitle = i18n.getCurrentLanguage() === 'de'\n    ? `Verhältnis LVO/ICH: ${ratio.toFixed(2)}`\n    : `LVO/ICH ratio: ${ratio.toFixed(2)}`;\n  return `\n    <div class=\"tachometer-section\">\n      <div class=\"tachometer-card\">\n        <div class=\"treatment-recommendation ${dominant === 'LVO' ? 'lvo-dominant' : 'ich-dominant'}\">\n          <div class=\"recommendation-icon\">${icon}</div>\n          <div class=\"recommendation-text\">\n            <h4>${dominantText}</h4>\n            <p>${subtitle}</p>\n          </div>\n          <div class=\"probability-summary\">\n            ICH: ${ichPercent}% | LVO: ${lvoPercent}%\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nfunction renderICHDriversOnly(ich) {\n  if (!ich || !ich.drivers) {\n    return '<p class=\"no-drivers\">No driver data available</p>';\n  }\n\n  // Drivers are already formatted from API with positive/negative arrays\n  const driversData = ich.drivers;\n\n  // Check if drivers have the correct structure\n  if (!driversData.positive && !driversData.negative) {\n    // Fallback for unexpected format\n    return '<p class=\"no-drivers\">Driver format error</p>';\n  }\n\n  const positiveDrivers = driversData.positive || [];\n  const negativeDrivers = driversData.negative || [];\n\n  return `\n    <div class=\"drivers-split-view\">\n      <div class=\"drivers-column positive-column\">\n        <div class=\"column-header\">\n          <span class=\"column-icon\">⬆</span>\n          <span class=\"column-title\">${t('increasingRisk') || 'Risikoerhöhend / Increasing Risk'}</span>\n        </div>\n        <div class=\"compact-drivers\">\n          ${positiveDrivers.length > 0\n    ? positiveDrivers.slice(0, 5).map((d) => renderCompactDriver(d, 'positive')).join('')\n    : `<p class=\"no-factors\">${t('noFactors') || 'Keine Faktoren / No factors'}</p>`\n}\n        </div>\n      </div>\n      \n      <div class=\"drivers-column negative-column\">\n        <div class=\"column-header\">\n          <span class=\"column-icon\">⬇</span>\n          <span class=\"column-title\">${t('decreasingRisk') || 'Risikomindernd / Decreasing Risk'}</span>\n        </div>\n        <div class=\"compact-drivers\">\n          ${negativeDrivers.length > 0\n    ? negativeDrivers.slice(0, 5).map((d) => renderCompactDriver(d, 'negative')).join('')\n    : `<p class=\"no-factors\">${t('noFactors') || 'Keine Faktoren / No factors'}</p>`\n}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nfunction renderCompactDriver(driver, type) {\n  // Driver object has 'label' and 'weight' properties\n  const percentage = Math.abs(driver.weight * 100);\n  const width = Math.min(percentage * 2, 100); // Scale for display\n\n  return `\n    <div class=\"compact-driver-item\">\n      <div class=\"compact-driver-label\">${formatDriverName(driver.label)}</div>\n      <div class=\"compact-driver-bar ${type}\" style=\"width: ${width}%;\">\n        <span class=\"compact-driver-value\">${percentage.toFixed(1)}%</span>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render bibliography footer with research citations\n * @param {object} ichData - ICH risk data containing probability\n * @returns {string} HTML for bibliography section\n */\nfunction renderBibliography(ichData) {\n  // Only show bibliography if ICH risk is >= 50%\n  if (!ichData || !ichData.probability) {\n    return '';\n  }\n\n  const ichPercent = Math.round((ichData.probability || 0) * 100);\n  if (ichPercent < 50) {\n    return '';\n  }\n\n  const gfapValue = getCurrentGfapValue();\n  if (!gfapValue || gfapValue <= 0) {\n    return '';\n  }\n\n  return `\n    <div class=\"bibliography-section\">\n      <h4>${t('references')}</h4>\n      <div class=\"citations\">\n        <div class=\"citation\">\n          <span class=\"citation-number\">¹</span>\n          <span class=\"citation-text\">Broderick et al. (1993). Volume of intracerebral hemorrhage. A powerful and easy-to-use predictor of 30-day mortality. Stroke, 24(7), 987-993.</span>\n        </div>\n        <div class=\"citation\">\n          <span class=\"citation-number\">²</span>\n          <span class=\"citation-text\">Krishnan et al. (2013). Hematoma expansion in intracerebral hemorrhage: Predictors and outcomes. Neurology, 81(19), 1660-1666.</span>\n        </div>\n        <div class=\"citation\">\n          <span class=\"citation-number\">³</span>\n          <span class=\"citation-text\">Putra et al. (2020). Functional outcomes and mortality in patients with intracerebral hemorrhage. Critical Care Medicine, 48(3), 347-354.</span>\n        </div>\n        <div class=\"citation\">\n          <span class=\"citation-number\">⁴</span>\n          <span class=\"citation-text\">Tangella et al. (2020). Early prediction of mortality in intracerebral hemorrhage using clinical markers. Journal of Neurocritical Care, 13(2), 89-97.</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Calculate legacy model results from current results data (background, non-breaking)\n * @param {object} results - Main model results\n * @returns {object|null} - Legacy model results or null if not possible\n */\nfunction calculateLegacyFromResults(results) {\n  try {\n    const patientInputs = getPatientInputs();\n\n    if (!patientInputs.age || !patientInputs.gfap) {\n      console.warn('🔍 Missing required inputs for legacy model:', {\n        age: patientInputs.age,\n        gfap: patientInputs.gfap,\n      });\n      return null;\n    }\n\n    const legacyResult = calculateLegacyICH(patientInputs);\n\n    return legacyResult;\n  } catch (error) {\n    console.warn('Legacy model calculation failed (non-critical):', error);\n    return null;\n  }\n}\n\n/**\n * Get patient input data from store for research logging\n * @returns {object} - Patient input data\n */\nfunction getPatientInputs() {\n  const state = store.getState();\n  const { formData } = state;\n\n  // Extract age and GFAP from any module\n  let age = null;\n  let gfap = null;\n\n  for (const module of ['coma', 'limited', 'full']) {\n    if (formData[module]) {\n      age = age || formData[module].age_years;\n      gfap = gfap || formData[module].gfap_value;\n    }\n  }\n\n  const result = {\n    age: parseInt(age) || null,\n    gfap: parseFloat(gfap) || null,\n  };\n\n  return result;\n}\n\n/**\n * Render alternative diagnoses for coma module\n * @param {number} probability - ICH probability (0-1)\n * @returns {string} HTML for alternative diagnoses\n */\nfunction renderStrokeDifferentialDiagnoses(probability) {\n  const percent = Math.round(probability * 100);\n\n  if (percent > 25) {\n    return `\n      <div class=\"alternative-diagnosis-card\">\n        <div class=\"diagnosis-header\">\n          <span class=\"lightning-icon\">⚡</span>\n          <h3>${t('differentialDiagnoses')}</h3>\n        </div>\n        <div class=\"diagnosis-content\">\n          <!-- Time Window Confirmation - Clinical Action -->\n          <h4 class=\"clinical-action-heading\">${t('reconfirmTimeWindow')}</h4>\n          \n          <!-- Actual Differential Diagnoses -->\n          <ul class=\"diagnosis-list\">\n            <li>${t('unclearTimeWindow')}</li>\n            <li>${t('rareDiagnoses')}</li>\n          </ul>\n        </div>\n      </div>\n    `;\n  }\n\n  return '';\n}\n\nfunction renderComaAlternativeDiagnoses(probability) {\n  const percent = Math.round(probability * 100);\n  const isDE = i18n.getCurrentLanguage() === 'de';\n\n  if (percent > 25) {\n    // High probability - show SAB, SDH, EDH\n    return `\n      <div class=\"alternative-diagnosis-card\">\n        <div class=\"diagnosis-header\">\n          <span class=\"lightning-icon\">⚡</span>\n          <h3>${isDE ? 'Differentialdiagnosen' : 'Differential Diagnoses'}</h3>\n        </div>\n        <div class=\"diagnosis-content\">\n          <ul class=\"diagnosis-list\">\n            <li>\n              ${isDE\n    ? 'Alternative Diagnosen sind SAB, SDH, EDH (Subarachnoidalblutung, Subduralhämatom, Epiduralhämatom)'\n    : 'Alternative diagnoses include SAH, SDH, EDH (Subarachnoid Hemorrhage, Subdural Hematoma, Epidural Hematoma)'\n}\n            </li>\n            <li>\n              ${isDE\n    ? 'Bei unklarem Zeitfenster seit Symptombeginn oder im erweiterten Zeitfenster kommen auch ein demarkierter Infarkt oder hypoxischer Hirnschaden in Frage'\n    : 'In cases of unclear time window since symptom onset or extended time window, demarcated infarction or hypoxic brain injury should also be considered'\n}\n            </li>\n          </ul>\n        </div>\n      </div>\n    `;\n  }\n  // Low probability - other causes of altered consciousness\n  return `\n      <div class=\"alternative-diagnosis-card\">\n        <div class=\"diagnosis-header\">\n          <span class=\"lightning-icon\">⚡</span>\n          <h3>${isDE ? 'Differentialdiagnosen' : 'Differential Diagnoses'}</h3>\n        </div>\n        <div class=\"diagnosis-content\">\n          <ul class=\"diagnosis-list\">\n            <li>\n              ${isDE\n    ? 'Alternative Diagnose von Vigilanzminderung wahrscheinlich'\n    : 'Alternative diagnosis for reduced consciousness likely'\n}\n            </li>\n            <li>\n              ${isDE\n    ? 'Ein Verschluss der Arteria Basilaris ist nicht ausgeschlossen'\n    : 'Basilar artery occlusion cannot be excluded'\n}\n            </li>\n          </ul>\n        </div>\n      </div>\n    `;\n}\n\n/**\n * Get current module name from results\n * @param {object} ich - ICH results containing module information\n * @returns {string} - Module name ('coma', 'limited', 'full')\n */\nfunction getCurrentModuleName(ich) {\n  if (!ich?.module) {\n    return 'unknown';\n  }\n\n  const module = ich.module.toLowerCase();\n  if (module.includes('coma')) {\n    return 'coma';\n  }\n  if (module.includes('limited')) {\n    return 'limited';\n  }\n  if (module.includes('full')) {\n    return 'full';\n  }\n\n  return 'unknown';\n}\n\n/**\n * Render volume as a standalone risk card (for horizontal layout)\n * @param {object} ichData - ICH data containing volume information\n * @returns {string} HTML for volume risk card\n */\nfunction renderVolumeCard(ichData) {\n  const gfapValue = getCurrentGfapValue();\n  if (!gfapValue || gfapValue <= 0) {\n    return '';\n  }\n\n  const volumeData = calculateICHVolume(gfapValue);\n  const percent = Math.round((ichData?.probability || 0) * 100);\n\n  return `\n    <div class=\"enhanced-risk-card volume-card normal\">\n      <div class=\"risk-header\">\n        <div class=\"risk-icon\">🧮</div>\n        <div class=\"risk-title\">\n          <h3>${t('ichVolumeLabel')}</h3>\n        </div>\n      </div>\n      \n      <div class=\"risk-probability\">\n        <div class=\"circles-container\">\n          <div class=\"rings-row\">\n            <div class=\"circle-item\">\n              ${renderICHVolumeDisplay(ichData)}\n              <div class=\"circle-label\">${t('ichVolumeLabel')}</div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"risk-assessment\">\n          <div class=\"mortality-assessment\">\n            ${t('predictedMortality')}: ${volumeData.mortalityRate}\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render tachometer gauge for treatment decision when high risk\n * @param {number} ichPercent - ICH probability percentage\n * @param {number} lvoPercent - LVO probability percentage\n * @returns {string} HTML for tachometer gauge\n */\nfunction renderTachometerGauge(ichPercent, lvoPercent) {\n  const ratio = lvoPercent / Math.max(ichPercent, 1);\n\n  return `\n    <div class=\"tachometer-section\">\n      <div class=\"tachometer-card\">\n        <div class=\"tachometer-header\">\n          <h3>🎯 ${i18n.getCurrentLanguage() === 'de' ? 'Entscheidungshilfe – LVO/ICH' : 'Decision Support – LVO/ICH'}</h3>\n          <div class=\"ratio-display\">LVO/ICH Ratio: ${ratio.toFixed(2)}</div>\n        </div>\n        \n        <div class=\"tachometer-gauge\" id=\"tachometer-canvas-container\">\n          <div data-react-tachometer data-ich=\"${ichPercent}\" data-lvo=\"${lvoPercent}\" data-title=\"${i18n.getCurrentLanguage() === 'de' ? 'Entscheidungshilfe – LVO/ICH' : 'Decision Support – LVO/ICH'}\"></div>\n        </div>\n\n        <!-- Legend chips for zones -->\n        <div class=\"tachometer-legend\" aria-hidden=\"true\">\n          <span class=\"legend-chip ich\">ICH</span>\n          <span class=\"legend-chip uncertain\">${i18n.getCurrentLanguage() === 'de' ? 'Unsicher' : 'Uncertain'}</span>\n          <span class=\"legend-chip lvo\">LVO</span>\n        </div>\n\n        <!-- Metrics row: ratio, confidence, absolute difference -->\n        <div class=\"metrics-row\" role=\"group\" aria-label=\"Tachometer metrics\">\n          <div class=\"metric-card\">\n            <div class=\"metric-label\">Ratio</div>\n            <div class=\"metric-value\">${ratio.toFixed(2)}</div>\n            <div class=\"metric-unit\">LVO/ICH</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-label\">Confidence</div>\n            <div class=\"metric-value\">${(() => {\n    const diff = Math.abs(lvoPercent - ichPercent);\n    const maxP = Math.max(lvoPercent, ichPercent);\n    let c = diff < 10 ? Math.round(30 + maxP * 0.3) : diff < 20 ? Math.round(50 + maxP * 0.4) : Math.round(70 + maxP * 0.3);\n    c = Math.max(0, Math.min(100, c));\n    return c;\n  })()}%</div>\n            <div class=\"metric-unit\">percent</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-label\">Difference</div>\n            <div class=\"metric-value\">${Math.abs(lvoPercent - ichPercent).toFixed(0)}%</div>\n            <div class=\"metric-unit\">|LVO − ICH|</div>\n          </div>\n        </div>\n        \n        <div class=\"probability-summary\">\n          ICH: ${ichPercent}% | LVO: ${lvoPercent}%\n        </div>\n        \n        <!-- Hidden probability summary for initialization -->\n        <div class=\"probability-summary\" style=\"display: none;\">\n          ICH: ${ichPercent}% | LVO: ${lvoPercent}%\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Premium (vanilla) tachometer disabled in favor of React island gauge\n","/**\n * Login Screen for Research Preview Access\n * iGFAP Stroke Triage Assistant\n */\n\nimport { t } from '../../localization/i18n.js';\nimport { authManager } from '../../auth/authentication.js';\nimport { store } from '../../state/store.js';\n\nexport function renderLoginScreen() {\n  return `\n    <div class=\"login-container\">\n      <div class=\"login-card\">\n        <div class=\"login-header\">\n          <div class=\"app-logo\">\n            <div class=\"logo-icon\">🧠</div>\n            <h1>iGFAP Stroke Triage</h1>\n            <div class=\"version-badge\">Research Preview v2.1</div>\n          </div>\n        </div>\n\n        <div class=\"login-content\">\n          <div class=\"access-notice\">\n            <h2>🔬 Research Access Required</h2>\n            <p>This is a research preview of the iGFAP Stroke Triage Assistant for clinical validation.</p>\n\n            <div class=\"research-disclaimer\">\n              <h3>⚠️ Important Notice</h3>\n              <ul>\n                <li><strong>Research Use Only</strong> - Not for clinical decision making</li>\n                <li><strong>No Patient Data Storage</strong> - All data processed locally</li>\n                <li><strong>Clinical Advisory</strong> - Under supervision of Prof. Christian Förch & Dr. Lovepreet Kalra</li>\n                <li><strong>Contact:</strong> Deepak Bos (bosdeepak@gmail.com)</li>\n              </ul>\n            </div>\n          </div>\n\n          <form id=\"loginForm\" class=\"login-form\">\n            <div class=\"form-group\">\n              <label for=\"researchPassword\">Research Access Code</label>\n              <input\n                type=\"password\"\n                id=\"researchPassword\"\n                name=\"password\"\n                required\n                autocomplete=\"off\"\n                placeholder=\"Enter research access code\"\n                class=\"password-input\"\n              >\n            </div>\n\n            <div id=\"loginError\" class=\"error-message\" style=\"display: none;\"></div>\n\n            <button type=\"submit\" class=\"login-button primary\">\n              <span class=\"button-text\">Access Research System</span>\n              <span class=\"loading-spinner\" style=\"display: none;\">⏳</span>\n            </button>\n          </form>\n\n          <div class=\"login-footer\">\n            <div class=\"regulatory-notice\">\n              <p><strong>Regulatory Status:</strong> Research prototype - CE certification pending</p>\n              <p><strong>Data Protection:</strong> GDPR compliant - local processing only</p>\n              <p><strong>Clinical Oversight:</strong> RKH Klinikum Ludwigsburg, Neurologie</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nexport function initializeLoginScreen() {\n  const loginForm = document.getElementById('loginForm');\n  const passwordInput = document.getElementById('researchPassword');\n  const loginError = document.getElementById('loginError');\n  const loginButton = loginForm.querySelector('.login-button');\n\n  if (!loginForm) {\n    return;\n  }\n\n  // Focus password input on load\n  passwordInput.focus();\n\n  loginForm.addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    const password = passwordInput.value.trim();\n\n    if (!password) {\n      showLoginError('Please enter the research access code');\n      return;\n    }\n\n    // Show loading state\n    setLoginLoading(true);\n    hideLoginError();\n\n    try {\n      const hashedInput = await authManager.hashPassword(password);\n      const isAuthenticated = await authManager.authenticate(hashedInput);\n\n      if (isAuthenticated) {\n        // Log successful authentication\n        store.logEvent('auth_success', {\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent.substring(0, 100), // Limited info\n        });\n\n        // Navigate to main application\n        store.navigate('triage1');\n      } else {\n        showLoginError('Invalid access code. Please contact Deepak Bos for research access.');\n        passwordInput.value = '';\n        passwordInput.focus();\n\n        // Log failed attempt (no sensitive data)\n        store.logEvent('auth_failed', {\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (error) {\n      showLoginError('Authentication system error. Please try again.');\n      console.error('Authentication error:', error);\n    } finally {\n      setLoginLoading(false);\n    }\n  });\n\n  // Hide error on input\n  passwordInput.addEventListener('input', () => {\n    hideLoginError();\n  });\n\n  function showLoginError(message) {\n    loginError.textContent = message;\n    loginError.style.display = 'block';\n    passwordInput.classList.add('error');\n  }\n\n  function hideLoginError() {\n    loginError.style.display = 'none';\n    passwordInput.classList.remove('error');\n  }\n\n  function setLoginLoading(isLoading) {\n    const buttonText = loginButton.querySelector('.button-text');\n    const loadingSpinner = loginButton.querySelector('.loading-spinner');\n\n    if (isLoading) {\n      buttonText.style.display = 'none';\n      loadingSpinner.style.display = 'inline';\n      loginButton.disabled = true;\n    } else {\n      buttonText.style.display = 'inline';\n      loadingSpinner.style.display = 'none';\n      loginButton.disabled = false;\n    }\n  }\n}\n","/**\n * Accessibility utilities for the Stroke Triage Assistant\n */\n\nexport function announceScreenChange(screen) {\n  const announcement = document.createElement('div');\n  announcement.className = 'sr-only';\n  announcement.setAttribute('role', 'status');\n  announcement.setAttribute('aria-live', 'polite');\n\n  const screenNames = {\n    triage1: 'Coma assessment',\n    triage2: 'Examination capability assessment',\n    coma: 'Coma module',\n    limited: 'Limited data module',\n    full: 'Full stroke assessment',\n    results: 'Assessment results',\n  };\n\n  announcement.textContent = `Navigated to ${screenNames[screen] || screen}`;\n  document.body.appendChild(announcement);\n\n  setTimeout(() => announcement.remove(), 1000);\n}\n\nexport function setPageTitle(screen) {\n  const appName = 'iGFAP';\n  const titles = {\n    triage1: 'Initial Assessment',\n    triage2: 'Examination Capability',\n    coma: 'Coma Module',\n    limited: 'Limited Data Module',\n    full: 'Full Stroke Module',\n    results: 'Assessment Results',\n  };\n\n  const section = titles[screen];\n  // Brand-first to ensure the tab shows iGFAP even when truncated\n  document.title = section ? `${appName} — ${section}` : appName;\n}\n\nexport function focusMainHeading() {\n  // Focus on the main heading for screen readers\n  setTimeout(() => {\n    const heading = document.querySelector('h2');\n    if (heading) {\n      heading.setAttribute('tabindex', '-1');\n      heading.focus();\n      // Remove tabindex after focus for proper tab order\n      setTimeout(() => heading.removeAttribute('tabindex'), 100);\n    }\n  }, 100);\n}\n","import { t } from '../../localization/i18n.js';\n\nexport class FastEdCalculator {\n  constructor() {\n    this.scores = {\n      facial_palsy: 0,\n      arm_weakness: 0,\n      speech_changes: 0,\n      eye_deviation: 0,\n      denial_neglect: 0,\n    };\n    this.onApply = null;\n    this.modal = null;\n  }\n\n  getTotal() {\n    return Object.values(this.scores).reduce((sum, score) => sum + score, 0);\n  }\n\n  getRiskLevel() {\n    const total = this.getTotal();\n    return total >= 4 ? 'high' : 'low';\n  }\n\n  render() {\n    const total = this.getTotal();\n    const riskLevel = this.getRiskLevel();\n\n    return `\n      <div id=\"fastEdModal\" class=\"modal\" role=\"dialog\" aria-labelledby=\"fastEdModalTitle\" aria-hidden=\"true\" style=\"display: none !important;\">\n        <div class=\"modal-content fast-ed-modal\">\n          <div class=\"modal-header\">\n            <h2 id=\"fastEdModalTitle\">${t('fastEdCalculatorTitle')}</h2>\n            <button class=\"modal-close\" aria-label=\"Close\">&times;</button>\n          </div>\n          <div class=\"modal-body\">\n            \n            <!-- Facial Palsy -->\n            <div class=\"fast-ed-component\">\n              <h3>${t('facialPalsyTitle')}</h3>\n              <div class=\"radio-group\">\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"facial_palsy\" value=\"0\" ${this.scores.facial_palsy === 0 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('facialPalsyNormal')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"facial_palsy\" value=\"1\" ${this.scores.facial_palsy === 1 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('facialPalsyMild')}</span>\n                </label>\n              </div>\n            </div>\n\n            <!-- Arm Weakness -->\n            <div class=\"fast-ed-component\">\n              <h3>${t('armWeaknessTitle')}</h3>\n              <div class=\"radio-group\">\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"arm_weakness\" value=\"0\" ${this.scores.arm_weakness === 0 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('armWeaknessNormal')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"arm_weakness\" value=\"1\" ${this.scores.arm_weakness === 1 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('armWeaknessMild')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"arm_weakness\" value=\"2\" ${this.scores.arm_weakness === 2 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('armWeaknessSevere')}</span>\n                </label>\n              </div>\n            </div>\n\n            <!-- Speech Changes -->\n            <div class=\"fast-ed-component\">\n              <h3>${t('speechChangesTitle')}</h3>\n              <div class=\"radio-group\">\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"speech_changes\" value=\"0\" ${this.scores.speech_changes === 0 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('speechChangesNormal')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"speech_changes\" value=\"1\" ${this.scores.speech_changes === 1 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('speechChangesMild')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"speech_changes\" value=\"2\" ${this.scores.speech_changes === 2 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('speechChangesSevere')}</span>\n                </label>\n              </div>\n            </div>\n\n            <!-- Eye Deviation -->\n            <div class=\"fast-ed-component\">\n              <h3>${t('eyeDeviationTitle')}</h3>\n              <div class=\"radio-group\">\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"eye_deviation\" value=\"0\" ${this.scores.eye_deviation === 0 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('eyeDeviationNormal')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"eye_deviation\" value=\"1\" ${this.scores.eye_deviation === 1 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('eyeDeviationPartial')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"eye_deviation\" value=\"2\" ${this.scores.eye_deviation === 2 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('eyeDeviationForced')}</span>\n                </label>\n              </div>\n            </div>\n\n            <!-- Denial/Neglect -->\n            <div class=\"fast-ed-component\">\n              <h3>${t('denialNeglectTitle')}</h3>\n              <div class=\"radio-group\">\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"denial_neglect\" value=\"0\" ${this.scores.denial_neglect === 0 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('denialNeglectNormal')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"denial_neglect\" value=\"1\" ${this.scores.denial_neglect === 1 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('denialNeglectPartial')}</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input type=\"radio\" name=\"denial_neglect\" value=\"2\" ${this.scores.denial_neglect === 2 ? 'checked' : ''}>\n                  <span class=\"radio-label\">${t('denialNeglectComplete')}</span>\n                </label>\n              </div>\n            </div>\n\n            <!-- Total Score Display -->\n            <div class=\"fast-ed-total\">\n              <div class=\"score-display\">\n                <h3>${t('totalScoreTitle')}: <span class=\"total-score\">${total}/9</span></h3>\n                <div class=\"risk-indicator ${riskLevel}\">\n                  ${t('riskLevel')}: ${riskLevel === 'high' ? t('riskLevelHigh') : t('riskLevelLow')}\n                </div>\n              </div>\n            </div>\n\n          </div>\n          <div class=\"modal-footer\">\n            <div class=\"button-group\">\n              <button class=\"secondary\" data-action=\"cancel-fast-ed\">${t('cancel')}</button>\n              <button class=\"primary\" data-action=\"apply-fast-ed\">${t('applyScore')}</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  setupEventListeners() {\n    this.modal = document.getElementById('fastEdModal');\n    if (!this.modal) {\n      return;\n    }\n\n    // Radio button changes\n    this.modal.addEventListener('change', (e) => {\n      if (e.target.type === 'radio') {\n        const component = e.target.name;\n        const value = parseInt(e.target.value);\n        this.scores[component] = value;\n        this.updateDisplay();\n      }\n    });\n\n    // Close button\n    const closeBtn = this.modal.querySelector('.modal-close');\n    closeBtn?.addEventListener('click', () => this.close());\n\n    // Cancel button\n    const cancelBtn = this.modal.querySelector('[data-action=\"cancel-fast-ed\"]');\n    cancelBtn?.addEventListener('click', () => this.close());\n\n    // Apply button\n    const applyBtn = this.modal.querySelector('[data-action=\"apply-fast-ed\"]');\n    applyBtn?.addEventListener('click', () => this.apply());\n\n    // Disable backdrop click-to-close to prevent accidental dismissal\n    // Users must explicitly Cancel or Apply\n    this.modal.addEventListener('click', (e) => {\n      if (e.target === this.modal) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    });\n\n    // Keyboard navigation\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && this.modal?.classList.contains('show')) {\n        this.close();\n      }\n    });\n  }\n\n  updateDisplay() {\n    const totalElement = this.modal?.querySelector('.total-score');\n    const riskElement = this.modal?.querySelector('.risk-indicator');\n\n    if (totalElement) {\n      totalElement.textContent = `${this.getTotal()}/9`;\n    }\n\n    if (riskElement) {\n      const riskLevel = this.getRiskLevel();\n      riskElement.className = `risk-indicator ${riskLevel}`;\n      riskElement.textContent = `${t('riskLevel')}: ${riskLevel === 'high' ? t('riskLevelHigh') : t('riskLevelLow')}`;\n    }\n  }\n\n  show(currentScore = 0, onApplyCallback = null) {\n    this.onApply = onApplyCallback;\n\n    // If we have a current score, try to reverse engineer it (basic approximation)\n    if (currentScore > 0 && currentScore <= 9) {\n      this.approximateFromTotal(currentScore);\n    }\n\n    // Inject modal HTML if not already present\n    if (!document.getElementById('fastEdModal')) {\n      document.body.insertAdjacentHTML('beforeend', this.render());\n    } else {\n      // Re-render the modal with current state\n      this.modal.remove();\n      document.body.insertAdjacentHTML('beforeend', this.render());\n      this.modal = document.getElementById('fastEdModal');\n    }\n\n    this.setupEventListeners();\n\n    this.modal.setAttribute('aria-hidden', 'false');\n    this.modal.style.display = 'flex';\n    this.modal.classList.add('show');\n\n    // Focus first radio button\n    const firstRadio = this.modal.querySelector('input[type=\"radio\"]');\n    firstRadio?.focus();\n  }\n\n  close() {\n    if (this.modal) {\n      this.modal.classList.remove('show');\n      this.modal.style.display = 'none';\n      this.modal.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  apply() {\n    const total = this.getTotal();\n    const armWeaknessBoolean = this.scores.arm_weakness > 0;\n    const eyeDeviationBoolean = this.scores.eye_deviation > 0;\n\n    if (this.onApply) {\n      this.onApply({\n        total,\n        components: { ...this.scores },\n        armWeaknessBoolean,\n        eyeDeviationBoolean,\n      });\n    }\n\n    this.close();\n  }\n\n  approximateFromTotal(total) {\n    // Simple approximation - distribute points across components\n    // This is basic but gives users a starting point\n    this.scores = {\n      facial_palsy: 0,\n      arm_weakness: 0,\n      speech_changes: 0,\n      eye_deviation: 0,\n      denial_neglect: 0,\n    };\n\n    let remaining = total;\n    const components = Object.keys(this.scores);\n\n    for (const component of components) {\n      if (remaining <= 0) {\n        break;\n      }\n\n      const maxForComponent = (component === 'facial_palsy') ? 1 : 2;\n      const assignToThis = Math.min(remaining, maxForComponent);\n      this.scores[component] = assignToThis;\n      remaining -= assignToThis;\n    }\n  }\n}\n\n// Create singleton instance\nexport const fastEdCalculator = new FastEdCalculator();\n","import { store } from '../state/store.js';\nimport {\n  handleTriage1, handleTriage2, handleSubmit, reset, goBack, goHome,\n} from '../logic/handlers.js';\nimport { clearValidationErrors, clearAllValidation } from '../logic/validate.js';\nimport { initializeResearchMode } from '../research/comparison-ui.js';\nimport { authManager } from '../auth/authentication.js';\n\nimport { renderTriage1 } from './screens/triage1.js';\nimport { renderTriage2 } from './screens/triage2.js';\nimport { renderComa } from './screens/coma.js';\nimport { renderLimited } from './screens/limited.js';\nimport { renderFull } from './screens/full.js';\nimport { renderResults } from './screens/results.js';\nimport { renderLoginScreen, initializeLoginScreen } from './screens/login.js';\nimport { announceScreenChange, setPageTitle, focusMainHeading } from './a11y.js';\nimport { initializeStrokeCenterMap } from './components/stroke-center-map.js';\nimport { fastEdCalculator } from './components/fastEdModal.js';\n\nexport function render(container) {\n  const state = store.getState();\n  const {\n    currentScreen, results, startTime, navigationHistory,\n  } = state;\n\n  // Optimize DOM updates to prevent CLS\n  const tempContainer = document.createElement('div');\n\n  // Show/hide back button based on navigation history\n  const backButton = document.getElementById('backButton');\n  if (backButton) {\n    backButton.style.display = navigationHistory && navigationHistory.length > 0 ? 'flex' : 'none';\n  }\n\n  // Render the appropriate screen\n  let html = '';\n  switch (currentScreen) {\n    case 'login':\n      html = renderLoginScreen();\n      break;\n    case 'triage1':\n      // Verify authentication for all clinical screens\n      if (!authManager.isValidSession()) {\n        store.navigate('login');\n        return;\n      }\n      html = renderTriage1();\n      break;\n    case 'triage2':\n      html = renderTriage2();\n      break;\n    case 'coma':\n      html = renderComa();\n      break;\n    case 'limited':\n      html = renderLimited();\n      break;\n    case 'full':\n      html = renderFull();\n      break;\n    case 'results':\n      html = renderResults(results, startTime);\n      break;\n    default:\n      html = renderTriage1();\n  }\n\n  // Use batch DOM update to minimize reflows\n  tempContainer.innerHTML = html;\n\n  // Single DOM replacement to minimize CLS\n  container.innerHTML = '';\n  while (tempContainer.firstChild) {\n    container.appendChild(tempContainer.firstChild);\n  }\n\n  // Restore form data if available\n  const form = container.querySelector('form[data-module]');\n  if (form) {\n    const { module } = form.dataset;\n    restoreFormData(form, module);\n  }\n\n  // Attach event listeners\n  attachEvents(container);\n\n  // Initialize login screen if needed\n  if (currentScreen === 'login') {\n    setTimeout(() => {\n      initializeLoginScreen();\n    }, 100);\n  }\n\n  // Initialize stroke center map if on results screen\n  if (currentScreen === 'results' && results) {\n    setTimeout(() => {\n      initializeStrokeCenterMap(results);\n    }, 100);\n  }\n\n  // Initialize research mode components (non-breaking)\n  setTimeout(() => {\n    initializeResearchMode();\n  }, 150);\n\n  // Accessibility updates\n  announceScreenChange(currentScreen);\n  setPageTitle(currentScreen);\n  focusMainHeading();\n}\n\nfunction restoreFormData(form, module) {\n  const formData = store.getFormData(module);\n  if (!formData || Object.keys(formData).length === 0) {\n    return;\n  }\n\n  Object.entries(formData).forEach(([key, value]) => {\n    const input = form.elements[key];\n    if (input) {\n      if (input.type === 'checkbox') {\n        input.checked = value === true || value === 'on' || value === 'true';\n      } else {\n        input.value = value;\n      }\n    }\n  });\n}\n\nfunction attachEvents(container) {\n  // Clear validation errors when user starts typing in a field\n  container.querySelectorAll('input[type=\"number\"]').forEach((input) => {\n    input.addEventListener('input', () => {\n      // Only clear errors for the specific field being edited\n      const group = input.closest('.input-group');\n      if (group && group.classList.contains('error')) {\n        group.classList.remove('error');\n        group.querySelectorAll('.error-message').forEach((el) => el.remove());\n      }\n    });\n  });\n\n  // Triage button handlers\n  container.querySelectorAll('[data-action]').forEach((button) => {\n    button.addEventListener('click', (e) => {\n      const { action, value } = e.currentTarget.dataset;\n      const boolVal = value === 'true';\n\n      switch (action) {\n        case 'triage1':\n          handleTriage1(boolVal);\n          break;\n        case 'triage2':\n          handleTriage2(boolVal);\n          break;\n        case 'reset':\n          reset();\n          break;\n        case 'goBack':\n          goBack();\n          break;\n        case 'goHome':\n          goHome();\n          break;\n      }\n    });\n  });\n\n  // Form submission handlers\n  container.querySelectorAll('form[data-module]').forEach((form) => {\n    form.addEventListener('submit', (e) => {\n      handleSubmit(e, container);\n    });\n  });\n\n  // Print button handler\n  const printButton = container.querySelector('#printResults');\n  if (printButton) {\n    printButton.addEventListener('click', () => window.print());\n  }\n\n  // FAST-ED calculator handler\n  const fastEdInput = container.querySelector('#fast_ed_score');\n  if (fastEdInput) {\n    fastEdInput.addEventListener('click', (e) => {\n      e.preventDefault();\n      const currentValue = parseInt(fastEdInput.value) || 0;\n\n      fastEdCalculator.show(currentValue, (result) => {\n        // Update FAST-ED score\n        fastEdInput.value = result.total;\n\n        // Update hidden arm weakness field\n        const armPareseField = container.querySelector('#armparese_hidden');\n        if (armPareseField) {\n          armPareseField.value = result.armWeaknessBoolean ? 'true' : 'false';\n        }\n\n        // Update eye deviation hidden field if exists\n        const eyeDeviationField = container.querySelector('#eye_deviation_hidden');\n        if (eyeDeviationField) {\n          eyeDeviationField.value = result.eyeDeviationBoolean ? 'true' : 'false';\n        }\n\n        // Trigger change event to save form data\n        fastEdInput.dispatchEvent(new Event('change', { bubbles: true }));\n      });\n    });\n\n    // Prevent manual typing\n    fastEdInput.addEventListener('keydown', (e) => {\n      e.preventDefault();\n    });\n  }\n\n  // Collapsible info toggles handler\n  const infoToggles = container.querySelectorAll('.info-toggle');\n  infoToggles.forEach((toggle) => {\n    toggle.addEventListener('click', (e) => {\n      const targetId = toggle.dataset.target;\n      const targetContent = container.querySelector(`#${targetId}`);\n      const arrow = toggle.querySelector('.toggle-arrow');\n\n      if (targetContent) {\n        const isVisible = targetContent.style.display !== 'none';\n\n        if (isVisible) {\n          // Hide content\n          targetContent.style.display = 'none';\n          targetContent.classList.remove('show');\n          toggle.classList.remove('active');\n          arrow.style.transform = 'rotate(0deg)';\n        } else {\n          // Show content\n          targetContent.style.display = 'block';\n          targetContent.classList.add('show');\n          toggle.classList.add('active');\n          arrow.style.transform = 'rotate(180deg)';\n        }\n      }\n    });\n  });\n}\n","/**\n * Service Worker Manager for Medical Application\n * iGFAP Stroke Triage Assistant - Phase 3 Advanced Features\n *\n * Manages service worker lifecycle and offline capabilities\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\nimport { medicalPerformanceMonitor, PerformanceMetricType } from '../performance/medical-performance-monitor.js';\n\n/**\n * Service Worker Manager Class\n */\nexport class MedicalServiceWorkerManager {\n  constructor() {\n    this.registration = null;\n    this.isOnline = navigator.onLine;\n    this.updateAvailable = false;\n    this.isUpdateCheckEnabled = true;\n    this.retryCount = 0;\n    this.maxRetries = 3;\n\n    // Initialize event listeners\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize service worker registration\n   */\n  async initialize() {\n    if (!('serviceWorker' in navigator)) {\n      console.warn('Service Worker not supported in this browser');\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sw_not_supported',\n        userAgent: navigator.userAgent\n      });\n      return false;\n    }\n\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.USER_INTERACTION,\n      'service_worker_registration'\n    );\n\n    try {\n      // Register service worker\n      this.registration = await navigator.serviceWorker.register(\n        '/0825/src/workers/medical-service-worker.js',\n        {\n          scope: '/0825/',\n          updateViaCache: 'none'\n        }\n      );\n\n      console.log('🏥 Medical Service Worker registered successfully');\n\n      // Setup update detection\n      this.setupUpdateDetection();\n\n      // Setup message handler\n      this.setupMessageHandler();\n\n      // Check for immediate updates\n      await this.checkForUpdates();\n\n      medicalPerformanceMonitor.endMeasurement(metricId, { success: true });\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sw_registered',\n        scope: this.registration.scope\n      });\n\n      return true;\n\n    } catch (error) {\n      console.error('❌ Service Worker registration failed:', error);\n\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: false,\n        error: error.message\n      });\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sw_registration_failed',\n        error: error.message\n      });\n\n      return false;\n    }\n  }\n\n  /**\n   * Setup event listeners for online/offline detection\n   */\n  setupEventListeners() {\n    // Online/offline detection\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.handleOnlineStatusChange(true);\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.handleOnlineStatusChange(false);\n    });\n\n    // Page visibility for update checks\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden && this.isUpdateCheckEnabled) {\n        this.checkForUpdates();\n      }\n    });\n\n    // Periodic update checks\n    setInterval(() => {\n      if (this.isUpdateCheckEnabled && this.isOnline) {\n        this.checkForUpdates();\n      }\n    }, 5 * 60 * 1000); // Check every 5 minutes\n  }\n\n  /**\n   * Setup service worker update detection\n   */\n  setupUpdateDetection() {\n    if (!this.registration) return;\n\n    // Listen for new service worker installing\n    this.registration.addEventListener('updatefound', () => {\n      const newWorker = this.registration.installing;\n\n      newWorker.addEventListener('statechange', () => {\n        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n          // New update available\n          this.updateAvailable = true;\n          this.notifyUpdateAvailable();\n        }\n      });\n    });\n\n    // Listen for service worker taking control\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      window.location.reload();\n    });\n  }\n\n  /**\n   * Setup message handler for service worker communication\n   */\n  setupMessageHandler() {\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'SW_INSTALLED':\n          this.handleServiceWorkerInstalled(data);\n          break;\n\n        case 'SW_ACTIVATED':\n          this.handleServiceWorkerActivated(data);\n          break;\n\n        case 'SW_INSTALL_ERROR':\n          this.handleServiceWorkerError(data);\n          break;\n\n        case 'MEDICAL_DATA_SYNCED':\n          this.handleMedicalDataSynced(data);\n          break;\n\n        default:\n          console.log('Unknown service worker message:', type, data);\n      }\n    });\n  }\n\n  /**\n   * Handle online/offline status changes\n   */\n  handleOnlineStatusChange(isOnline) {\n    console.log(`🌐 Network status: ${isOnline ? 'Online' : 'Offline'}`);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'network_status_changed',\n      isOnline,\n      timestamp: new Date().toISOString()\n    });\n\n    // Show user notification\n    this.showNetworkStatusNotification(isOnline);\n\n    // Trigger background sync when coming back online\n    if (isOnline && 'serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.ready.then(registration => {\n        if ('sync' in registration) {\n          return registration.sync.register('medical-data-sync');\n        }\n      }).catch(error => {\n        console.warn('Background sync registration failed:', error);\n      });\n    }\n  }\n\n  /**\n   * Show network status notification to user\n   */\n  showNetworkStatusNotification(isOnline) {\n    const notification = document.createElement('div');\n    notification.className = `network-notification ${isOnline ? 'online' : 'offline'}`;\n    notification.innerHTML = `\n      <div class=\"notification-content\">\n        <span class=\"notification-icon\">${isOnline ? '🌐' : '📴'}</span>\n        <span class=\"notification-text\">\n          ${isOnline ? 'Connection restored' : 'Working offline'}\n        </span>\n      </div>\n    `;\n\n    document.body.appendChild(notification);\n\n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n    }, 3000);\n  }\n\n  /**\n   * Check for service worker updates\n   */\n  async checkForUpdates() {\n    if (!this.registration) return;\n\n    try {\n      await this.registration.update();\n    } catch (error) {\n      console.warn('Update check failed:', error.message);\n\n      this.retryCount++;\n      if (this.retryCount < this.maxRetries) {\n        setTimeout(() => this.checkForUpdates(), 5000); // Retry after 5 seconds\n      }\n    }\n  }\n\n  /**\n   * Apply available update\n   */\n  async applyUpdate() {\n    if (!this.updateAvailable || !this.registration) return;\n\n    try {\n      // Send message to service worker to skip waiting\n      if (this.registration.waiting) {\n        this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n      }\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sw_update_applied'\n      });\n\n    } catch (error) {\n      console.error('Failed to apply update:', error);\n    }\n  }\n\n  /**\n   * Notify user of available update\n   */\n  notifyUpdateAvailable() {\n    console.log('📱 App update available');\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sw_update_available'\n    });\n\n    // Show update notification\n    this.showUpdateNotification();\n  }\n\n  /**\n   * Show update notification to user\n   */\n  showUpdateNotification() {\n    const notification = document.createElement('div');\n    notification.className = 'update-notification';\n    notification.innerHTML = `\n      <div class=\"notification-content\">\n        <span class=\"notification-icon\">🔄</span>\n        <span class=\"notification-text\">App update available</span>\n        <button class=\"update-button\" onclick=\"medicalSWManager.applyUpdate()\">\n          Update Now\n        </button>\n        <button class=\"dismiss-button\" onclick=\"this.parentNode.parentNode.remove()\">\n          Later\n        </button>\n      </div>\n    `;\n\n    document.body.appendChild(notification);\n  }\n\n  /**\n   * Get cache status\n   */\n  async getCacheStatus() {\n    if (!navigator.serviceWorker.controller) {\n      return null;\n    }\n\n    return new Promise((resolve) => {\n      const channel = new MessageChannel();\n\n      channel.port1.onmessage = (event) => {\n        resolve(event.data);\n      };\n\n      navigator.serviceWorker.controller.postMessage(\n        { type: 'GET_CACHE_STATUS' },\n        [channel.port2]\n      );\n    });\n  }\n\n  /**\n   * Clear all caches\n   */\n  async clearCaches() {\n    if (!navigator.serviceWorker.controller) {\n      return;\n    }\n\n    navigator.serviceWorker.controller.postMessage({\n      type: 'CLEAR_CACHE'\n    });\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sw_caches_cleared'\n    });\n  }\n\n  /**\n   * Prefetch resources for offline use\n   */\n  async prefetchResources(resources) {\n    if (!navigator.serviceWorker.controller) {\n      return;\n    }\n\n    navigator.serviceWorker.controller.postMessage({\n      type: 'PREFETCH_RESOURCES',\n      data: { resources }\n    });\n  }\n\n  /**\n   * Handle service worker installed event\n   */\n  handleServiceWorkerInstalled(data) {\n    console.log('✅ Service Worker installed:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sw_installed',\n      cacheVersion: data.cacheVersion,\n      criticalResourcesCount: data.criticalResourcesCount\n    });\n  }\n\n  /**\n   * Handle service worker activated event\n   */\n  handleServiceWorkerActivated(data) {\n    console.log('🚀 Service Worker activated:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sw_activated',\n      cacheVersion: data.cacheVersion,\n      cleanedCaches: data.cleanedCaches\n    });\n  }\n\n  /**\n   * Handle service worker error\n   */\n  handleServiceWorkerError(data) {\n    console.error('❌ Service Worker error:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sw_error',\n      error: data.error\n    });\n  }\n\n  /**\n   * Handle medical data sync completion\n   */\n  handleMedicalDataSynced(data) {\n    console.log('🔄 Medical data synced:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'medical_data_synced',\n      timestamp: data.timestamp\n    });\n  }\n\n  /**\n   * Get offline capabilities status\n   */\n  getOfflineStatus() {\n    return {\n      isOnline: this.isOnline,\n      serviceWorkerActive: !!navigator.serviceWorker.controller,\n      updateAvailable: this.updateAvailable,\n      cacheStatus: this.registration ? 'available' : 'unavailable'\n    };\n  }\n\n  /**\n   * Enable/disable automatic update checks\n   */\n  setUpdateCheckEnabled(enabled) {\n    this.isUpdateCheckEnabled = enabled;\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sw_update_check_toggled',\n      enabled\n    });\n  }\n}\n\n/**\n * Install-time prompts for offline support\n */\nexport class OfflineInstallPrompt {\n  constructor(swManager) {\n    this.swManager = swManager;\n    this.installPromptEvent = null;\n    this.isInstallable = false;\n\n    this.setupInstallPrompt();\n  }\n\n  /**\n   * Setup PWA install prompt handling\n   */\n  setupInstallPrompt() {\n    // Listen for install prompt\n    window.addEventListener('beforeinstallprompt', (event) => {\n      event.preventDefault();\n      this.installPromptEvent = event;\n      this.isInstallable = true;\n\n      console.log('📱 PWA install prompt available');\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'pwa_install_prompt_available'\n      });\n\n      // Show install banner after a delay\n      setTimeout(() => {\n        this.showInstallBanner();\n      }, 2000);\n    });\n\n    // Listen for app installed\n    window.addEventListener('appinstalled', () => {\n      console.log('📱 PWA installed successfully');\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'pwa_installed'\n      });\n\n      this.hideInstallBanner();\n    });\n  }\n\n  /**\n   * Show PWA install banner\n   */\n  showInstallBanner() {\n    if (!this.isInstallable) return;\n\n    const banner = document.createElement('div');\n    banner.id = 'install-banner';\n    banner.className = 'install-banner';\n    banner.innerHTML = `\n      <div class=\"banner-content\">\n        <div class=\"banner-text\">\n          <strong>Install Stroke Triage Assistant</strong>\n          <p>Get offline access and faster performance</p>\n        </div>\n        <div class=\"banner-actions\">\n          <button class=\"install-button\" onclick=\"offlineInstallPrompt.promptInstall()\">\n            Install\n          </button>\n          <button class=\"dismiss-button\" onclick=\"this.parentNode.parentNode.remove()\">\n            Not Now\n          </button>\n        </div>\n      </div>\n    `;\n\n    document.body.appendChild(banner);\n  }\n\n  /**\n   * Hide install banner\n   */\n  hideInstallBanner() {\n    const banner = document.getElementById('install-banner');\n    if (banner) {\n      banner.remove();\n    }\n  }\n\n  /**\n   * Prompt user to install PWA\n   */\n  async promptInstall() {\n    if (!this.installPromptEvent) return;\n\n    try {\n      const result = await this.installPromptEvent.prompt();\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'pwa_install_prompted',\n        outcome: result.outcome\n      });\n\n      // Clear the install prompt\n      this.installPromptEvent = null;\n      this.isInstallable = false;\n\n      // Hide banner\n      this.hideInstallBanner();\n\n    } catch (error) {\n      console.error('Install prompt failed:', error);\n    }\n  }\n}\n\n// Export singleton instances\nexport const medicalSWManager = new MedicalServiceWorkerManager();\nexport const offlineInstallPrompt = new OfflineInstallPrompt(medicalSWManager);\n\n// Make available globally for inline event handlers\nwindow.medicalSWManager = medicalSWManager;\nwindow.offlineInstallPrompt = offlineInstallPrompt;","/**\n * Medical Data Synchronization Manager\n * iGFAP Stroke Triage Assistant - Phase 3 Advanced Features\n *\n * Provides real-time data synchronization with conflict resolution\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\nimport { medicalPerformanceMonitor, PerformanceMetricType } from '../performance/medical-performance-monitor.js';\nimport { patientDataCache, MedicalCacheTTL, CachePriority } from '../performance/medical-cache.js';\nimport { store } from '../state/store.js';\n\n/**\n * Sync operation types\n */\nexport const SyncOperationType = {\n  CREATE: 'create',\n  UPDATE: 'update',\n  DELETE: 'delete',\n  CONFLICT_RESOLVE: 'conflict_resolve'\n};\n\n/**\n * Sync status states\n */\nexport const SyncStatus = {\n  IDLE: 'idle',\n  SYNCING: 'syncing',\n  ERROR: 'error',\n  CONFLICT: 'conflict',\n  OFFLINE: 'offline'\n};\n\n/**\n * Data conflict resolution strategies\n */\nexport const ConflictResolution = {\n  CLIENT_WINS: 'client_wins',\n  SERVER_WINS: 'server_wins',\n  MERGE: 'merge',\n  MANUAL: 'manual'\n};\n\n/**\n * Medical sync operation wrapper\n */\nclass MedicalSyncOperation {\n  constructor(type, entityType, entityId, data, timestamp = Date.now()) {\n    this.id = `sync_${timestamp}_${Math.random().toString(36).substr(2, 9)}`;\n    this.type = type;\n    this.entityType = entityType;\n    this.entityId = entityId;\n    this.data = data;\n    this.timestamp = timestamp;\n    this.attempts = 0;\n    this.maxAttempts = 3;\n    this.status = 'pending';\n    this.error = null;\n  }\n\n  /**\n   * Check if operation should be retried\n   */\n  canRetry() {\n    return this.attempts < this.maxAttempts && this.status === 'error';\n  }\n\n  /**\n   * Mark operation as failed\n   */\n  markFailed(error) {\n    this.status = 'error';\n    this.error = error;\n    this.attempts += 1;\n  }\n\n  /**\n   * Mark operation as completed\n   */\n  markCompleted() {\n    this.status = 'completed';\n    this.error = null;\n  }\n}\n\n/**\n * Medical Data Synchronization Manager\n */\nexport class MedicalSyncManager {\n  constructor() {\n    this.status = SyncStatus.IDLE;\n    this.pendingOperations = new Map();\n    this.conflictQueue = new Map();\n    this.syncInterval = null;\n    this.isOnline = navigator.onLine;\n    this.lastSyncTime = null;\n    this.syncInProgress = false;\n\n    // Configuration\n    this.config = {\n      syncIntervalMs: 30000, // 30 seconds\n      conflictRetentionMs: 24 * 60 * 60 * 1000, // 24 hours\n      maxPendingOperations: 100,\n      enableRealTimeSync: true,\n      enableConflictResolution: true\n    };\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize synchronization manager\n   */\n  async initialize() {\n    console.log('🔄 Initializing Medical Sync Manager...');\n\n    try {\n      // Load pending operations from storage\n      await this.loadPendingOperations();\n\n      // Start periodic sync if online\n      if (this.isOnline && this.config.enableRealTimeSync) {\n        this.startPeriodicSync();\n      }\n\n      // Perform initial sync\n      await this.performSync();\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sync_manager_initialized',\n        pendingOperations: this.pendingOperations.size\n      });\n\n      console.log('✅ Medical Sync Manager initialized');\n      return true;\n\n    } catch (error) {\n      console.error('❌ Sync Manager initialization failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    // Online/offline status\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.handleConnectionChange(true);\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.handleConnectionChange(false);\n    });\n\n    // Listen for data changes that need syncing\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.PATIENT_DATA_UPDATED, (event) => {\n      this.queueDataSync('patient_data', event.fieldName, event);\n    });\n\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.PREDICTION_COMPLETED, (event) => {\n      this.queueDataSync('prediction_result', event.module, event);\n    });\n\n    // Page visibility for sync optimization\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden && this.isOnline) {\n        this.performSync();\n      }\n    });\n  }\n\n  /**\n   * Handle connection status changes\n   */\n  async handleConnectionChange(isOnline) {\n    console.log(`🌐 Connection status changed: ${isOnline ? 'Online' : 'Offline'}`);\n\n    this.status = isOnline ? SyncStatus.IDLE : SyncStatus.OFFLINE;\n\n    if (isOnline) {\n      // Connection restored - start syncing\n      this.startPeriodicSync();\n      await this.performSync();\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sync_connection_restored',\n        pendingOperations: this.pendingOperations.size\n      });\n    } else {\n      // Connection lost - stop periodic sync\n      this.stopPeriodicSync();\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sync_connection_lost'\n      });\n    }\n  }\n\n  /**\n   * Queue data for synchronization\n   */\n  queueDataSync(entityType, entityId, data) {\n    if (!this.config.enableRealTimeSync) return;\n\n    const operation = new MedicalSyncOperation(\n      SyncOperationType.UPDATE,\n      entityType,\n      entityId,\n      this.sanitizeDataForSync(data)\n    );\n\n    // Prevent queue overflow\n    if (this.pendingOperations.size >= this.config.maxPendingOperations) {\n      const oldestKey = this.pendingOperations.keys().next().value;\n      this.pendingOperations.delete(oldestKey);\n    }\n\n    this.pendingOperations.set(operation.id, operation);\n\n    // Save to persistent storage\n    this.savePendingOperations();\n\n    // Trigger immediate sync if online\n    if (this.isOnline && !this.syncInProgress) {\n      setTimeout(() => this.performSync(), 1000); // Small delay to batch operations\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sync_operation_queued',\n      entityType,\n      entityId,\n      operationId: operation.id\n    });\n  }\n\n  /**\n   * Sanitize sensitive data before sync\n   */\n  sanitizeDataForSync(data) {\n    const sanitized = { ...data };\n\n    // Remove sensitive fields\n    const sensitiveFields = ['ssn', 'mrn', 'patient_id', 'user_id', 'session_token'];\n    sensitiveFields.forEach(field => {\n      if (sanitized[field]) {\n        delete sanitized[field];\n      }\n    });\n\n    // Add sync metadata\n    sanitized._syncTimestamp = Date.now();\n    sanitized._syncId = `sync_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    return sanitized;\n  }\n\n  /**\n   * Perform synchronization of pending operations\n   */\n  async performSync() {\n    if (!this.isOnline || this.syncInProgress || this.pendingOperations.size === 0) {\n      return;\n    }\n\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.NETWORK,\n      'medical_data_sync'\n    );\n\n    this.syncInProgress = true;\n    this.status = SyncStatus.SYNCING;\n\n    console.log(`🔄 Starting sync of ${this.pendingOperations.size} operations...`);\n\n    let completedCount = 0;\n    let errorCount = 0;\n    let conflictCount = 0;\n\n    try {\n      // Process operations in batches\n      const operations = Array.from(this.pendingOperations.values());\n      const batchSize = 5;\n\n      for (let i = 0; i < operations.length; i += batchSize) {\n        const batch = operations.slice(i, i + batchSize);\n        const results = await this.processSyncBatch(batch);\n\n        results.forEach(result => {\n          if (result.status === 'completed') {\n            completedCount++;\n            this.pendingOperations.delete(result.operationId);\n          } else if (result.status === 'conflict') {\n            conflictCount++;\n            this.handleSyncConflict(result);\n          } else {\n            errorCount++;\n          }\n        });\n      }\n\n      this.lastSyncTime = Date.now();\n\n      // Save updated pending operations\n      await this.savePendingOperations();\n\n      console.log(`✅ Sync completed: ${completedCount} success, ${errorCount} errors, ${conflictCount} conflicts`);\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'sync_completed',\n        completedCount,\n        errorCount,\n        conflictCount,\n        duration: Date.now() - this.lastSyncTime\n      });\n\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: true,\n        operationsProcessed: completedCount + errorCount + conflictCount\n      });\n\n    } catch (error) {\n      console.error('❌ Sync failed:', error);\n\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: false,\n        error: error.message\n      });\n\n      this.status = SyncStatus.ERROR;\n    } finally {\n      this.syncInProgress = false;\n      this.status = this.pendingOperations.size > 0 ? SyncStatus.IDLE : SyncStatus.IDLE;\n    }\n  }\n\n  /**\n   * Process a batch of sync operations\n   */\n  async processSyncBatch(operations) {\n    const results = [];\n\n    // Simulate sync operations (in real implementation, these would be API calls)\n    for (const operation of operations) {\n      try {\n        const result = await this.executeSyncOperation(operation);\n        results.push({\n          operationId: operation.id,\n          status: 'completed',\n          result\n        });\n\n        operation.markCompleted();\n\n      } catch (error) {\n        if (error.name === 'ConflictError') {\n          results.push({\n            operationId: operation.id,\n            status: 'conflict',\n            conflict: error.conflict,\n            operation\n          });\n        } else {\n          operation.markFailed(error.message);\n\n          if (operation.canRetry()) {\n            console.warn(`⚠️ Operation ${operation.id} failed, will retry: ${error.message}`);\n          } else {\n            console.error(`❌ Operation ${operation.id} failed permanently: ${error.message}`);\n            this.pendingOperations.delete(operation.id);\n          }\n\n          results.push({\n            operationId: operation.id,\n            status: 'error',\n            error: error.message\n          });\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Execute a single sync operation\n   */\n  async executeSyncOperation(operation) {\n    // Simulate API call with realistic delay and error handling\n    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n\n    // Simulate conflict detection (5% chance)\n    if (Math.random() < 0.05) {\n      const conflict = {\n        clientData: operation.data,\n        serverData: { ...operation.data, _serverModified: true },\n        conflictFields: ['timestamp', 'value'],\n        resolution: ConflictResolution.MANUAL\n      };\n\n      const error = new Error('Data conflict detected');\n      error.name = 'ConflictError';\n      error.conflict = conflict;\n      throw error;\n    }\n\n    // Simulate network error (2% chance)\n    if (Math.random() < 0.02) {\n      throw new Error('Network request failed');\n    }\n\n    // Successful sync\n    return {\n      entityType: operation.entityType,\n      entityId: operation.entityId,\n      syncTimestamp: Date.now(),\n      serverVersion: Date.now()\n    };\n  }\n\n  /**\n   * Handle sync conflicts\n   */\n  handleSyncConflict(conflictResult) {\n    const { operation, conflict } = conflictResult;\n\n    // Store conflict for manual resolution\n    this.conflictQueue.set(operation.id, {\n      operation,\n      conflict,\n      timestamp: Date.now()\n    });\n\n    this.status = SyncStatus.CONFLICT;\n\n    // Apply automatic resolution if configured\n    if (this.config.enableConflictResolution) {\n      this.resolveConflictAutomatically(operation.id, conflict);\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sync_conflict_detected',\n      operationId: operation.id,\n      entityType: operation.entityType,\n      conflictFields: conflict.conflictFields\n    });\n  }\n\n  /**\n   * Resolve conflicts automatically based on strategy\n   */\n  async resolveConflictAutomatically(conflictId, conflict) {\n    let resolvedData;\n\n    switch (conflict.resolution) {\n      case ConflictResolution.CLIENT_WINS:\n        resolvedData = conflict.clientData;\n        break;\n\n      case ConflictResolution.SERVER_WINS:\n        resolvedData = conflict.serverData;\n        break;\n\n      case ConflictResolution.MERGE:\n        resolvedData = this.mergeConflictData(conflict.clientData, conflict.serverData);\n        break;\n\n      default:\n        // Manual resolution required\n        return;\n    }\n\n    // Create resolution operation\n    const resolutionOperation = new MedicalSyncOperation(\n      SyncOperationType.CONFLICT_RESOLVE,\n      'conflict_resolution',\n      conflictId,\n      resolvedData\n    );\n\n    this.pendingOperations.set(resolutionOperation.id, resolutionOperation);\n    this.conflictQueue.delete(conflictId);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sync_conflict_auto_resolved',\n      conflictId,\n      resolution: conflict.resolution\n    });\n  }\n\n  /**\n   * Merge conflicting data intelligently\n   */\n  mergeConflictData(clientData, serverData) {\n    const merged = { ...serverData };\n\n    // Prefer client data for user-entered fields\n    const clientPreferredFields = ['gfap_value', 'age_years', 'systolic_bp', 'diastolic_bp'];\n    clientPreferredFields.forEach(field => {\n      if (clientData[field] !== undefined) {\n        merged[field] = clientData[field];\n      }\n    });\n\n    // Use latest timestamp\n    merged._mergedAt = Date.now();\n    merged._mergeStrategy = 'intelligent_merge';\n\n    return merged;\n  }\n\n  /**\n   * Start periodic synchronization\n   */\n  startPeriodicSync() {\n    if (this.syncInterval) return;\n\n    this.syncInterval = setInterval(() => {\n      if (this.isOnline && this.pendingOperations.size > 0) {\n        this.performSync();\n      }\n    }, this.config.syncIntervalMs);\n\n    console.log(`🔄 Periodic sync started (${this.config.syncIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Stop periodic synchronization\n   */\n  stopPeriodicSync() {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = null;\n      console.log('⏹️ Periodic sync stopped');\n    }\n  }\n\n  /**\n   * Force immediate synchronization\n   */\n  async forcSync() {\n    if (!this.isOnline) {\n      throw new Error('Cannot sync while offline');\n    }\n\n    this.stopPeriodicSync();\n    await this.performSync();\n    this.startPeriodicSync();\n  }\n\n  /**\n   * Get synchronization status\n   */\n  getSyncStatus() {\n    return {\n      status: this.status,\n      isOnline: this.isOnline,\n      pendingOperations: this.pendingOperations.size,\n      conflicts: this.conflictQueue.size,\n      lastSyncTime: this.lastSyncTime,\n      syncInProgress: this.syncInProgress\n    };\n  }\n\n  /**\n   * Load pending operations from storage\n   */\n  async loadPendingOperations() {\n    try {\n      const stored = localStorage.getItem('medical_sync_pending');\n      if (stored) {\n        const operations = JSON.parse(stored);\n        operations.forEach(op => {\n          const operation = new MedicalSyncOperation(\n            op.type, op.entityType, op.entityId, op.data, op.timestamp\n          );\n          operation.attempts = op.attempts || 0;\n          operation.status = op.status || 'pending';\n          this.pendingOperations.set(operation.id, operation);\n        });\n\n        console.log(`📦 Loaded ${this.pendingOperations.size} pending sync operations`);\n      }\n    } catch (error) {\n      console.warn('Failed to load pending operations:', error);\n    }\n  }\n\n  /**\n   * Save pending operations to storage\n   */\n  async savePendingOperations() {\n    try {\n      const operations = Array.from(this.pendingOperations.values()).map(op => ({\n        id: op.id,\n        type: op.type,\n        entityType: op.entityType,\n        entityId: op.entityId,\n        data: op.data,\n        timestamp: op.timestamp,\n        attempts: op.attempts,\n        status: op.status\n      }));\n\n      localStorage.setItem('medical_sync_pending', JSON.stringify(operations));\n    } catch (error) {\n      console.warn('Failed to save pending operations:', error);\n    }\n  }\n\n  /**\n   * Clear all pending operations\n   */\n  clearPendingOperations() {\n    this.pendingOperations.clear();\n    this.conflictQueue.clear();\n    localStorage.removeItem('medical_sync_pending');\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sync_operations_cleared'\n    });\n  }\n\n  /**\n   * Configure sync settings\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n\n    // Restart periodic sync with new interval\n    if (this.syncInterval && newConfig.syncIntervalMs) {\n      this.stopPeriodicSync();\n      this.startPeriodicSync();\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sync_config_updated',\n      config: this.config\n    });\n  }\n\n  /**\n   * Dispose and cleanup\n   */\n  dispose() {\n    this.stopPeriodicSync();\n    this.savePendingOperations();\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'sync_manager_disposed'\n    });\n  }\n}\n\n// Export singleton instance\nexport const medicalSyncManager = new MedicalSyncManager();","/**\n * Progressive Loading and Lazy Component System\n * iGFAP Stroke Triage Assistant - Phase 3 Advanced Features\n *\n * Provides intelligent component loading for optimal performance\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from '../patterns/observer.js';\nimport { medicalPerformanceMonitor, PerformanceMetricType } from '../performance/medical-performance-monitor.js';\n\n/**\n * Component loading priorities\n */\nexport const LoadPriority = {\n  CRITICAL: 'critical',    // Load immediately\n  HIGH: 'high',           // Load on interaction\n  NORMAL: 'normal',       // Load on viewport\n  LOW: 'low'              // Load on idle\n};\n\n/**\n * Component loading states\n */\nexport const LoadState = {\n  PENDING: 'pending',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n\n/**\n * Lazy component definition\n */\nclass LazyComponent {\n  constructor(name, loader, options = {}) {\n    this.name = name;\n    this.loader = loader;\n    this.priority = options.priority || LoadPriority.NORMAL;\n    this.state = LoadState.PENDING;\n    this.component = null;\n    this.error = null;\n    this.loadTime = null;\n    this.dependencies = options.dependencies || [];\n    this.retryCount = 0;\n    this.maxRetries = options.maxRetries || 3;\n    this.loadPromise = null;\n  }\n\n  /**\n   * Load the component\n   */\n  async load() {\n    if (this.state === LoadState.LOADED) {\n      return this.component;\n    }\n\n    if (this.loadPromise) {\n      return this.loadPromise;\n    }\n\n    const metricId = medicalPerformanceMonitor.startMeasurement(\n      PerformanceMetricType.USER_INTERACTION,\n      `lazy_load_${this.name}`,\n      { priority: this.priority }\n    );\n\n    this.state = LoadState.LOADING;\n    this.loadPromise = this.executeLoad(metricId);\n\n    return this.loadPromise;\n  }\n\n  /**\n   * Execute component loading with error handling\n   */\n  async executeLoad(metricId) {\n    try {\n      const startTime = performance.now();\n\n      // Load dependencies first\n      await this.loadDependencies();\n\n      // Load the component\n      this.component = await this.loader();\n      this.loadTime = performance.now() - startTime;\n      this.state = LoadState.LOADED;\n\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: true,\n        loadTime: this.loadTime,\n        retryCount: this.retryCount\n      });\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: 'lazy_component_loaded',\n        component: this.name,\n        loadTime: this.loadTime,\n        priority: this.priority\n      });\n\n      return this.component;\n\n    } catch (error) {\n      this.error = error;\n      this.retryCount++;\n\n      medicalPerformanceMonitor.endMeasurement(metricId, {\n        success: false,\n        error: error.message,\n        retryCount: this.retryCount\n      });\n\n      if (this.retryCount < this.maxRetries) {\n        console.warn(`⚠️ Component ${this.name} load failed, retrying (${this.retryCount}/${this.maxRetries}):`, error);\n\n        // Exponential backoff\n        const delay = Math.min(1000 * Math.pow(2, this.retryCount - 1), 5000);\n        await new Promise(resolve => setTimeout(resolve, delay));\n\n        this.loadPromise = null;\n        return this.load();\n      } else {\n        this.state = LoadState.ERROR;\n        console.error(`❌ Component ${this.name} failed to load after ${this.maxRetries} attempts:`, error);\n\n        medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n          action: 'lazy_component_load_failed',\n          component: this.name,\n          error: error.message,\n          retryCount: this.retryCount\n        });\n\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Load component dependencies\n   */\n  async loadDependencies() {\n    if (this.dependencies.length === 0) return;\n\n    const dependencyPromises = this.dependencies.map(dep => {\n      if (typeof dep === 'string') {\n        // Load dependency by name\n        return LazyLoader.load(dep);\n      } else if (typeof dep === 'function') {\n        // Load dependency function\n        return dep();\n      } else {\n        // Assume it's a lazy component\n        return dep.load();\n      }\n    });\n\n    await Promise.all(dependencyPromises);\n  }\n\n  /**\n   * Get component status\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      priority: this.priority,\n      loadTime: this.loadTime,\n      error: this.error?.message,\n      retryCount: this.retryCount\n    };\n  }\n}\n\n/**\n * Progressive component loader with intelligent scheduling\n */\nexport class LazyLoader {\n  constructor() {\n    this.components = new Map();\n    this.intersectionObserver = null;\n    this.idleCallback = null;\n    this.loadQueue = {\n      [LoadPriority.CRITICAL]: [],\n      [LoadPriority.HIGH]: [],\n      [LoadPriority.NORMAL]: [],\n      [LoadPriority.LOW]: []\n    };\n    this.isProcessingQueue = false;\n\n    this.initializeObservers();\n  }\n\n  /**\n   * Initialize viewport and idle observers\n   */\n  initializeObservers() {\n    // Intersection Observer for viewport-based loading\n    if ('IntersectionObserver' in window) {\n      this.intersectionObserver = new IntersectionObserver(\n        (entries) => this.handleIntersectionChanges(entries),\n        {\n          rootMargin: '50px',\n          threshold: 0.1\n        }\n      );\n    }\n\n    // Idle callback for low-priority loading\n    this.scheduleIdleLoading();\n  }\n\n  /**\n   * Register a lazy component\n   */\n  register(name, loader, options = {}) {\n    const component = new LazyComponent(name, loader, options);\n    this.components.set(name, component);\n\n    // Add to appropriate load queue\n    this.loadQueue[component.priority].push(component);\n\n    // Start loading critical components immediately\n    if (component.priority === LoadPriority.CRITICAL) {\n      this.processLoadQueue();\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'lazy_component_registered',\n      component: name,\n      priority: component.priority\n    });\n\n    return component;\n  }\n\n  /**\n   * Load a component by name\n   */\n  async load(name) {\n    const component = this.components.get(name);\n    if (!component) {\n      throw new Error(`Component '${name}' not registered`);\n    }\n\n    return component.load();\n  }\n\n  /**\n   * Preload components based on priority\n   */\n  async preload(priority = LoadPriority.HIGH) {\n    const priorities = [LoadPriority.CRITICAL, LoadPriority.HIGH, LoadPriority.NORMAL, LoadPriority.LOW];\n    const targetPriorities = priorities.slice(0, priorities.indexOf(priority) + 1);\n\n    const preloadPromises = [];\n\n    targetPriorities.forEach(pri => {\n      this.loadQueue[pri].forEach(component => {\n        if (component.state === LoadState.PENDING) {\n          preloadPromises.push(component.load());\n        }\n      });\n    });\n\n    await Promise.allSettled(preloadPromises);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'lazy_components_preloaded',\n      priority,\n      count: preloadPromises.length\n    });\n  }\n\n  /**\n   * Observe element for viewport-based loading\n   */\n  observeElement(element, componentName) {\n    if (!this.intersectionObserver) return;\n\n    element.dataset.lazyComponent = componentName;\n    this.intersectionObserver.observe(element);\n  }\n\n  /**\n   * Handle intersection observer changes\n   */\n  handleIntersectionChanges(entries) {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const componentName = entry.target.dataset.lazyComponent;\n        if (componentName) {\n          this.load(componentName).catch(error => {\n            console.error(`Failed to load component ${componentName}:`, error);\n          });\n\n          // Stop observing once loaded\n          this.intersectionObserver.unobserve(entry.target);\n        }\n      }\n    });\n  }\n\n  /**\n   * Process load queue based on priority\n   */\n  async processLoadQueue() {\n    if (this.isProcessingQueue) return;\n\n    this.isProcessingQueue = true;\n\n    try {\n      // Process critical components first\n      await this.processQueueByPriority(LoadPriority.CRITICAL);\n\n      // Process high priority components\n      await this.processQueueByPriority(LoadPriority.HIGH);\n\n    } catch (error) {\n      console.error('Error processing load queue:', error);\n    } finally {\n      this.isProcessingQueue = false;\n    }\n  }\n\n  /**\n   * Process components of specific priority\n   */\n  async processQueueByPriority(priority) {\n    const queue = this.loadQueue[priority];\n    const pendingComponents = queue.filter(comp => comp.state === LoadState.PENDING);\n\n    if (pendingComponents.length === 0) return;\n\n    const loadPromises = pendingComponents.map(component =>\n      component.load().catch(error => {\n        console.warn(`Component ${component.name} failed to load:`, error);\n        return null;\n      })\n    );\n\n    await Promise.allSettled(loadPromises);\n  }\n\n  /**\n   * Schedule idle loading for low-priority components\n   */\n  scheduleIdleLoading() {\n    const scheduleNext = () => {\n      if ('requestIdleCallback' in window) {\n        this.idleCallback = requestIdleCallback((deadline) => {\n          this.processIdleQueue(deadline);\n          scheduleNext();\n        }, { timeout: 5000 });\n      } else {\n        // Fallback for browsers without requestIdleCallback\n        setTimeout(() => {\n          this.processIdleQueue({ timeRemaining: () => 50 });\n          scheduleNext();\n        }, 100);\n      }\n    };\n\n    scheduleNext();\n  }\n\n  /**\n   * Process low-priority components during idle time\n   */\n  async processIdleQueue(deadline) {\n    const normalQueue = this.loadQueue[LoadPriority.NORMAL];\n    const lowQueue = this.loadQueue[LoadPriority.LOW];\n\n    // Process normal priority first, then low priority\n    const pendingComponents = [\n      ...normalQueue.filter(comp => comp.state === LoadState.PENDING),\n      ...lowQueue.filter(comp => comp.state === LoadState.PENDING)\n    ];\n\n    for (const component of pendingComponents) {\n      if (deadline.timeRemaining() > 10) { // Need at least 10ms\n        try {\n          await component.load();\n        } catch (error) {\n          console.warn(`Idle loading failed for ${component.name}:`, error);\n        }\n      } else {\n        break; // No more time available\n      }\n    }\n  }\n\n  /**\n   * Get loader statistics\n   */\n  getStats() {\n    const stats = {\n      total: this.components.size,\n      byState: { pending: 0, loading: 0, loaded: 0, error: 0 },\n      byPriority: { critical: 0, high: 0, normal: 0, low: 0 },\n      totalLoadTime: 0,\n      averageLoadTime: 0\n    };\n\n    let totalLoadTime = 0;\n    let loadedCount = 0;\n\n    this.components.forEach(component => {\n      stats.byState[component.state]++;\n      stats.byPriority[component.priority]++;\n\n      if (component.loadTime) {\n        totalLoadTime += component.loadTime;\n        loadedCount++;\n      }\n    });\n\n    stats.totalLoadTime = totalLoadTime;\n    stats.averageLoadTime = loadedCount > 0 ? totalLoadTime / loadedCount : 0;\n\n    return stats;\n  }\n\n  /**\n   * Force reload a component\n   */\n  async reload(name) {\n    const component = this.components.get(name);\n    if (!component) {\n      throw new Error(`Component '${name}' not registered`);\n    }\n\n    // Reset component state\n    component.state = LoadState.PENDING;\n    component.component = null;\n    component.error = null;\n    component.loadTime = null;\n    component.retryCount = 0;\n    component.loadPromise = null;\n\n    return component.load();\n  }\n\n  /**\n   * Dispose and cleanup\n   */\n  dispose() {\n    if (this.intersectionObserver) {\n      this.intersectionObserver.disconnect();\n    }\n\n    if (this.idleCallback) {\n      cancelIdleCallback(this.idleCallback);\n    }\n\n    this.components.clear();\n    Object.values(this.loadQueue).forEach(queue => queue.length = 0);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'lazy_loader_disposed'\n    });\n  }\n}\n\n/**\n * Medical component lazy loaders\n */\nexport class MedicalComponentLoader {\n  constructor(lazyLoader) {\n    this.lazyLoader = lazyLoader;\n    this.registerMedicalComponents();\n  }\n\n  /**\n   * Register all medical components\n   */\n  registerMedicalComponents() {\n    // Critical components (load immediately)\n    this.lazyLoader.register('validation',\n      () => import('../logic/validate.js'),\n      { priority: LoadPriority.CRITICAL }\n    );\n\n    this.lazyLoader.register('store',\n      () => import('../state/store.js'),\n      { priority: LoadPriority.CRITICAL }\n    );\n\n    // High priority components (load on first interaction)\n    this.lazyLoader.register('ich-calculator',\n      () => import('../logic/ich-volume-calculator.js'),\n      { priority: LoadPriority.HIGH }\n    );\n\n    this.lazyLoader.register('lvo-model',\n      () => import('../logic/lvo-local-model.js'),\n      { priority: LoadPriority.HIGH }\n    );\n\n    // Normal priority components (load on viewport)\n    this.lazyLoader.register('brain-visualization',\n      () => import('../ui/components/brain-visualization.js'),\n      { priority: LoadPriority.NORMAL }\n    );\n\n    this.lazyLoader.register('stroke-center-map',\n      () => import('../ui/components/stroke-center-map.js'),\n      { priority: LoadPriority.NORMAL }\n    );\n\n    // Low priority components (load on idle)\n    this.lazyLoader.register('research-mode',\n      () => import('../research/comparison-ui.js'),\n      { priority: LoadPriority.LOW }\n    );\n\n    this.lazyLoader.register('data-logger',\n      () => import('../research/data-logger.js'),\n      { priority: LoadPriority.LOW }\n    );\n  }\n\n  /**\n   * Load medical component by clinical priority\n   */\n  async loadByClinicalPriority(clinicalSituation) {\n    switch (clinicalSituation) {\n      case 'emergency':\n        await this.lazyLoader.preload(LoadPriority.HIGH);\n        break;\n\n      case 'routine':\n        await this.lazyLoader.preload(LoadPriority.NORMAL);\n        break;\n\n      case 'research':\n        await this.lazyLoader.load('research-mode');\n        await this.lazyLoader.load('data-logger');\n        break;\n\n      default:\n        await this.lazyLoader.preload(LoadPriority.NORMAL);\n    }\n  }\n\n  /**\n   * Preload components for specific medical module\n   */\n  async preloadForModule(moduleType) {\n    const moduleComponents = {\n      'coma': ['validation', 'ich-calculator'],\n      'limited': ['validation', 'lvo-model'],\n      'full': ['validation', 'ich-calculator', 'lvo-model', 'brain-visualization']\n    };\n\n    const components = moduleComponents[moduleType] || [];\n    const loadPromises = components.map(comp => this.lazyLoader.load(comp));\n\n    await Promise.allSettled(loadPromises);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: 'medical_components_preloaded',\n      moduleType,\n      components\n    });\n  }\n}\n\n// Export singleton instances\nexport const lazyLoader = new LazyLoader();\nexport const medicalComponentLoader = new MedicalComponentLoader(lazyLoader);","import { store } from './state/store.js';\nimport { render } from './ui/render.js';\nimport { APP_CONFIG } from './config.js';\nimport { i18n, t } from './localization/i18n.js';\nimport { warmUpFunctions } from './api/client.js';\nimport { setResearchMode, isResearchModeEnabled } from './research/data-logger.js';\nimport { authManager } from './auth/authentication.js';\n\n// Phase 3: Advanced offline capabilities\nimport { medicalSWManager } from './workers/sw-manager.js';\nimport { medicalPerformanceMonitor } from './performance/medical-performance-monitor.js';\nimport { medicalSyncManager } from './sync/medical-sync-manager.js';\nimport { lazyLoader, medicalComponentLoader } from './components/lazy-loader.js';\n\n// Phase 4: Medical Intelligence & Analytics - TEMPORARILY DISABLED\n// import { predictiveEngine } from './analytics/predictive-engine.js';\n// import { clinicalDecisionSupport } from './analytics/clinical-decision-support.js';\n// import { MedicalVisualizationDashboard } from './analytics/visualization-dashboard.js';\n// import { mlModelIntegration } from './ml/model-integration.js';\n// import { clinicalReportingSystem } from './analytics/clinical-reporting.js';\n// import { qualityMetricsTracker } from './analytics/quality-metrics.js';\n// import { clinicalAuditTrail } from './analytics/audit-trail.js';\n\nclass App {\n  constructor() {\n    this.container = null;\n    this.unsubscribe = null;\n  }\n\n  async init() {\n    // Wait for DOM to be ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => this.init());\n      return;\n    }\n\n    this.container = document.getElementById('appContainer');\n    if (!this.container) {\n      console.error('App container not found');\n      return;\n    }\n\n    // Check authentication before proceeding\n    if (!authManager.isValidSession()) {\n      store.navigate('login');\n    }\n\n    // Subscribe to store changes\n    this.unsubscribe = store.subscribe(() => {\n      render(this.container);\n      // Update research button visibility after each render\n      setTimeout(() => this.initializeResearchMode(), 200);\n    });\n\n    // Subscribe to language changes\n    window.addEventListener('languageChanged', () => {\n      this.updateUILanguage();\n      render(this.container);\n    });\n\n    // Setup global event listeners\n    this.setupGlobalEventListeners();\n\n    // Initialize theme\n    this.initializeTheme();\n\n    // Initialize research mode\n    this.initializeResearchMode();\n\n    // Initialize language\n    this.updateUILanguage();\n\n    // Start auto-save\n    this.startAutoSave();\n\n    // Setup session timeout\n    this.setupSessionTimeout();\n\n    // Set current year in footer\n    this.setCurrentYear();\n\n    // Initialize Phase 3 advanced features - TEMPORARILY DISABLED\n    await this.initializeAdvancedFeatures();\n\n    // Warm up Cloud Functions in background\n    warmUpFunctions();\n\n    // Initial render\n    render(this.container);\n  }\n\n  setupGlobalEventListeners() {\n    // Navigation buttons\n    const backButton = document.getElementById('backButton');\n    if (backButton) {\n      backButton.addEventListener('click', () => {\n        store.goBack();\n        render(this.container);\n      });\n    }\n\n    const homeButton = document.getElementById('homeButton');\n    if (homeButton) {\n      homeButton.addEventListener('click', () => {\n        store.goHome();\n        render(this.container);\n      });\n    }\n\n    // Language toggle\n    const languageToggle = document.getElementById('languageToggle');\n    if (languageToggle) {\n      languageToggle.addEventListener('click', () => this.toggleLanguage());\n    }\n\n    // Dark mode toggle\n    const darkModeToggle = document.getElementById('darkModeToggle');\n    if (darkModeToggle) {\n      darkModeToggle.addEventListener('click', () => this.toggleDarkMode());\n    }\n\n    // Research mode toggle\n    const researchModeToggle = document.getElementById('researchModeToggle');\n    if (researchModeToggle) {\n      researchModeToggle.addEventListener('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggleResearchMode();\n      });\n    }\n\n    // Help modal\n    this.setupHelpModal();\n\n    // Footer links\n    this.setupFooterLinks();\n\n    // Keyboard navigation\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        const helpModal = document.getElementById('helpModal');\n        if (helpModal && helpModal.classList.contains('show')) {\n          helpModal.classList.remove('show');\n          helpModal.style.display = 'none';\n          helpModal.setAttribute('aria-hidden', 'true');\n        }\n      }\n    });\n\n    // Before unload warning\n    window.addEventListener('beforeunload', (e) => {\n      if (store.hasUnsavedData()) {\n        e.preventDefault();\n        e.returnValue = 'You have unsaved data. Are you sure you want to leave?';\n      }\n    });\n  }\n\n  setupHelpModal() {\n    const helpButton = document.getElementById('helpButton');\n    const helpModal = document.getElementById('helpModal');\n    const modalClose = helpModal?.querySelector('.modal-close');\n\n    if (helpButton && helpModal) {\n      // Ensure modal starts hidden\n      helpModal.classList.remove('show');\n      helpModal.style.display = 'none';\n      helpModal.setAttribute('aria-hidden', 'true');\n\n      helpButton.addEventListener('click', () => {\n        helpModal.style.display = 'flex';\n        helpModal.classList.add('show');\n        helpModal.setAttribute('aria-hidden', 'false');\n      });\n\n      const closeModal = () => {\n        helpModal.classList.remove('show');\n        helpModal.style.display = 'none';\n        helpModal.setAttribute('aria-hidden', 'true');\n      };\n\n      modalClose?.addEventListener('click', closeModal);\n\n      helpModal.addEventListener('click', (e) => {\n        if (e.target === helpModal) {\n          closeModal();\n        }\n      });\n    }\n  }\n\n  setupFooterLinks() {\n    document.getElementById('privacyLink')?.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.showPrivacyPolicy();\n    });\n\n    document.getElementById('disclaimerLink')?.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.showDisclaimer();\n    });\n  }\n\n  initializeTheme() {\n    const savedTheme = localStorage.getItem('theme');\n    const darkModeToggle = document.getElementById('darkModeToggle');\n\n    if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n      document.body.classList.add('dark-mode');\n      if (darkModeToggle) {\n        darkModeToggle.textContent = '☀️';\n      }\n    }\n  }\n\n  toggleLanguage() {\n    i18n.toggleLanguage();\n    this.updateUILanguage();\n\n    // Update flag icon\n    const languageToggle = document.getElementById('languageToggle');\n    if (languageToggle) {\n      const currentLang = i18n.getCurrentLanguage();\n      languageToggle.textContent = currentLang === 'en' ? '🇬🇧' : '🇩🇪';\n      languageToggle.dataset.lang = currentLang;\n    }\n  }\n\n  updateUILanguage() {\n    // Update HTML lang attribute\n    document.documentElement.lang = i18n.getCurrentLanguage();\n\n    // Update header text\n    const headerTitle = document.querySelector('.app-header h1');\n    if (headerTitle) {\n      headerTitle.textContent = t('appTitle');\n    }\n\n    const emergencyBadge = document.querySelector('.emergency-badge');\n    if (emergencyBadge) {\n      emergencyBadge.textContent = t('emergencyBadge');\n    }\n\n    // Update button tooltips\n    const languageToggle = document.getElementById('languageToggle');\n    if (languageToggle) {\n      languageToggle.title = t('languageToggle');\n      languageToggle.setAttribute('aria-label', t('languageToggle'));\n    }\n\n    const helpButton = document.getElementById('helpButton');\n    if (helpButton) {\n      helpButton.title = t('helpButton');\n      helpButton.setAttribute('aria-label', t('helpButton'));\n    }\n\n    const darkModeToggle = document.getElementById('darkModeToggle');\n    if (darkModeToggle) {\n      darkModeToggle.title = t('darkModeButton');\n      darkModeToggle.setAttribute('aria-label', t('darkModeButton'));\n    }\n\n    // Update help modal\n    const modalTitle = document.getElementById('modalTitle');\n    if (modalTitle) {\n      modalTitle.textContent = t('helpTitle');\n    }\n\n    // Note: Stroke center map initialization is handled in render.js\n  }\n\n  toggleDarkMode() {\n    const darkModeToggle = document.getElementById('darkModeToggle');\n    document.body.classList.toggle('dark-mode');\n    const isDark = document.body.classList.contains('dark-mode');\n\n    if (darkModeToggle) {\n      darkModeToggle.textContent = isDark ? '☀️' : '🌙';\n    }\n\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  }\n\n  initializeResearchMode() {\n    const researchModeToggle = document.getElementById('researchModeToggle');\n    if (researchModeToggle) {\n      // Check if we're on results screen with stroke module\n      const currentModule = this.getCurrentModuleFromResults();\n      const shouldShow = currentModule === 'limited' || currentModule === 'full';\n\n      researchModeToggle.style.display = shouldShow ? 'flex' : 'none';\n      researchModeToggle.style.opacity = shouldShow ? '1' : '0.5';\n    }\n  }\n\n  getCurrentModuleFromResults() {\n    const state = store.getState();\n    if (state.currentScreen !== 'results' || !state.results?.ich?.module) {\n      return null;\n    }\n\n    const module = state.results.ich.module.toLowerCase();\n    if (module.includes('coma')) {\n      return 'coma';\n    }\n    if (module.includes('limited')) {\n      return 'limited';\n    }\n    if (module.includes('full')) {\n      return 'full';\n    }\n    return null;\n  }\n\n  toggleResearchMode() {\n    // Simply toggle the research panel visibility without affecting app state\n    const researchPanel = document.getElementById('researchPanel');\n    if (!researchPanel) {\n      console.warn('🔬 Research panel not found - likely not on results screen');\n      return;\n    }\n\n    const isVisible = researchPanel.style.display !== 'none';\n    researchPanel.style.display = isVisible ? 'none' : 'block';\n\n    // Update button visual state\n    const researchModeToggle = document.getElementById('researchModeToggle');\n    if (researchModeToggle) {\n      researchModeToggle.style.background = isVisible\n        ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 102, 204, 0.2)';\n    }\n\n    // DO NOT trigger any navigation or state changes\n    return false;\n  }\n\n  showResearchActivationMessage() {\n    const message = document.createElement('div');\n    message.className = 'research-activation-toast';\n    message.innerHTML = `\n      <div class=\"toast-content\">\n        🔬 <strong>Research Mode Activated</strong><br>\n        <small>Model comparison features enabled</small>\n      </div>\n    `;\n\n    document.body.appendChild(message);\n\n    setTimeout(() => {\n      if (document.body.contains(message)) {\n        document.body.removeChild(message);\n      }\n    }, 3000);\n  }\n\n  startAutoSave() {\n    setInterval(() => {\n      this.saveCurrentFormData();\n    }, APP_CONFIG.autoSaveInterval);\n  }\n\n  saveCurrentFormData() {\n    const forms = this.container.querySelectorAll('form[data-module]');\n    forms.forEach((form) => {\n      const formData = new FormData(form);\n      const { module } = form.dataset;\n      if (module) {\n        const data = {};\n        formData.forEach((value, key) => {\n          const element = form.elements[key];\n          if (element && element.type === 'checkbox') {\n            data[key] = element.checked;\n          } else {\n            data[key] = value;\n          }\n        });\n\n        // Only save if data has actually changed to prevent unnecessary re-renders\n        const currentData = store.getFormData(module);\n        const hasChanges = JSON.stringify(currentData) !== JSON.stringify(data);\n        if (hasChanges) {\n          store.setFormData(module, data);\n        }\n      }\n    });\n  }\n\n  setupSessionTimeout() {\n    setTimeout(() => {\n      if (confirm('Your session has been idle for 30 minutes. Would you like to continue?')) {\n        this.setupSessionTimeout();\n      } else {\n        store.reset();\n      }\n    }, APP_CONFIG.sessionTimeout);\n  }\n\n  setCurrentYear() {\n    const yearElement = document.getElementById('currentYear');\n    if (yearElement) {\n      yearElement.textContent = new Date().getFullYear();\n    }\n  }\n\n  showPrivacyPolicy() {\n    alert('Privacy Policy: This tool processes data locally. No patient data is stored or transmitted.');\n  }\n\n  showDisclaimer() {\n    alert('Medical Disclaimer: This tool is for clinical decision support only. Always use clinical judgment and follow local protocols.');\n  }\n\n  /**\n   * Initialize Phase 3 & 4 Advanced Features\n   */\n  async initializeAdvancedFeatures() {\n    console.log('🚀 Initializing Phase 3 Advanced Features...');\n\n    try {\n      // Phase 3: Advanced offline capabilities\n      // Start performance monitoring\n      medicalPerformanceMonitor.start();\n\n      // Initialize advanced service worker\n      const swInitialized = await medicalSWManager.initialize();\n\n      if (swInitialized) {\n        console.log('✅ Advanced offline capabilities enabled');\n\n        // Prefetch critical medical resources\n        await this.prefetchCriticalResources();\n      }\n\n      // Initialize real-time data synchronization\n      const syncInitialized = await medicalSyncManager.initialize();\n      if (syncInitialized) {\n        console.log('✅ Real-time synchronization enabled');\n      }\n\n      // Initialize progressive component loading\n      await this.initializeProgressiveLoading();\n\n      console.log('🎯 Phase 3 features initialized successfully');\n\n      // Phase 4: Medical Intelligence & Analytics - STILL DISABLED\n      // await this.initializeMedicalIntelligence();\n\n    } catch (error) {\n      console.error('❌ Phase 3 features initialization failed:', error);\n    }\n  }\n\n  /**\n   * Initialize progressive component loading\n   */\n  async initializeProgressiveLoading() {\n    // Preload critical components immediately\n    await lazyLoader.preload('critical');\n    console.log('⚡ Critical components preloaded');\n\n    // Setup viewport-based loading for result visualizations\n    const setupViewportLoading = () => {\n      const brainVizElements = document.querySelectorAll('.brain-visualization-placeholder');\n      brainVizElements.forEach(element => {\n        lazyLoader.observeElement(element, 'brain-visualization');\n      });\n\n      const mapElements = document.querySelectorAll('.stroke-center-map-placeholder');\n      mapElements.forEach(element => {\n        lazyLoader.observeElement(element, 'stroke-center-map');\n      });\n    };\n\n    // Setup after initial render\n    setTimeout(setupViewportLoading, 100);\n\n    console.log('🔄 Progressive loading initialized');\n  }\n\n  /**\n   * Prefetch critical resources for offline use\n   */\n  async prefetchCriticalResources() {\n    const criticalResources = [\n      '/0825/src/logic/lvo-local-model.js',\n      '/0825/src/logic/ich-volume-calculator.js',\n      '/0825/src/patterns/prediction-strategy.js',\n      '/0825/src/performance/medical-cache.js'\n    ];\n\n    await medicalSWManager.prefetchResources(criticalResources);\n    console.log('📦 Critical medical resources prefetched for offline use');\n  }\n\n  /**\n   * Initialize Phase 4 Medical Intelligence & Analytics\n   */\n  async initializeMedicalIntelligence() {\n    // TEMPORARILY DISABLED\n    return;\n    /* console.log('🧠 Initializing Medical Intelligence & Analytics...');\n\n    try {\n      // Initialize clinical audit trail first (for compliance)\n      await clinicalAuditTrail.initialize();\n      console.log('✅ Clinical audit trail initialized');\n\n      // Initialize ML model integration\n      await mlModelIntegration.initialize();\n      console.log('✅ ML model integration initialized');\n\n      // Initialize predictive analytics engine\n      await predictiveEngine.initializeModels();\n      console.log('✅ Predictive analytics engine initialized');\n\n      // Start clinical decision support system\n      clinicalDecisionSupport.start();\n      console.log('✅ Clinical decision support system started');\n\n      // Initialize quality metrics tracking\n      await qualityMetricsTracker.initialize();\n      console.log('✅ Quality metrics tracking initialized');\n\n      // Start clinical reporting system\n      clinicalReportingSystem.start();\n      console.log('✅ Clinical reporting system started');\n\n      // Initialize visualization dashboard if container exists\n      const dashboardContainer = document.getElementById('medicalDashboard');\n      if (dashboardContainer) {\n        this.medicalDashboard = new MedicalVisualizationDashboard(dashboardContainer);\n        console.log('✅ Medical visualization dashboard initialized');\n      }\n\n      // Setup integration event handlers\n      this.setupMedicalIntelligenceEventHandlers();\n\n      // Run Phase 4 feature tests\n      await this.runPhase4Tests();\n\n    } catch (error) {\n      console.error('❌ Medical Intelligence initialization failed:', error);\n    }\n    */\n  }\n\n  /**\n   * Setup event handlers for medical intelligence integration\n   */\n  setupMedicalIntelligenceEventHandlers() {\n    // TEMPORARILY DISABLED\n    return;\n    /*\n    // Listen for form submissions to trigger predictions\n    document.addEventListener('submit', async (event) => {\n      const form = event.target;\n      if (form.dataset.module) {\n        try {\n          const formData = new FormData(form);\n          const patientData = Object.fromEntries(formData.entries());\n\n          // Generate predictions\n          const predictions = await predictiveEngine.generatePredictions(patientData);\n\n          // Generate comprehensive ML predictions\n          const mlResults = await mlModelIntegration.getComprehensivePrediction(patientData);\n\n          // Update visualization dashboard if available\n          if (this.medicalDashboard) {\n            await this.medicalDashboard.updateDashboard(patientData, predictions);\n          }\n\n          // Store results for reporting\n          this.lastAnalysisResults = {\n            patientData,\n            predictions,\n            mlResults,\n            timestamp: new Date().toISOString()\n          };\n\n          console.log('🔬 Medical intelligence analysis completed');\n\n        } catch (error) {\n          console.warn('Medical intelligence analysis failed:', error);\n        }\n      }\n    });\n\n    // Setup research mode button for dashboard\n    const researchModeToggle = document.getElementById('researchModeToggle');\n    if (researchModeToggle) {\n      researchModeToggle.addEventListener('click', () => {\n        this.toggleMedicalDashboard();\n      });\n    }\n    */\n  }\n\n  /**\n   * Toggle medical dashboard visibility\n   */\n  toggleMedicalDashboard() {\n    // TEMPORARILY DISABLED\n    return;\n    /*\n    let dashboardContainer = document.getElementById('medicalDashboard');\n\n    if (!dashboardContainer) {\n      // Create dashboard container\n      dashboardContainer = document.createElement('div');\n      dashboardContainer.id = 'medicalDashboard';\n      dashboardContainer.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0,0,0,0.9);\n        z-index: 10000;\n        overflow: auto;\n        display: none;\n      `;\n\n      // Add close button\n      const closeButton = document.createElement('button');\n      closeButton.innerHTML = '✕ Close Dashboard';\n      closeButton.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10001;\n        padding: 10px 20px;\n        background: #f44336;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 14px;\n      `;\n      closeButton.onclick = () => this.toggleMedicalDashboard();\n\n      dashboardContainer.appendChild(closeButton);\n      document.body.appendChild(dashboardContainer);\n\n      // Initialize dashboard\n      this.medicalDashboard = new MedicalVisualizationDashboard(dashboardContainer);\n\n      // Load last analysis if available\n      if (this.lastAnalysisResults) {\n        this.medicalDashboard.updateDashboard(\n          this.lastAnalysisResults.patientData,\n          this.lastAnalysisResults.predictions\n        );\n      }\n    }\n\n    // Toggle visibility\n    const isVisible = dashboardContainer.style.display !== 'none';\n    dashboardContainer.style.display = isVisible ? 'none' : 'block';\n\n    console.log(isVisible ? '📊 Medical dashboard hidden' : '📊 Medical dashboard shown');\n    */\n  }\n\n  /**\n   * Generate comprehensive clinical report\n   */\n  async generateClinicalReport(reportType = 'comprehensive') {\n    // TEMPORARILY DISABLED\n    return;\n    /*\n    if (!this.lastAnalysisResults) {\n      alert('No analysis data available. Please complete a patient assessment first.');\n      return;\n    }\n\n    try {\n      const report = await clinicalReportingSystem.generateReport(\n        reportType,\n        this.lastAnalysisResults,\n        { format: 'html' }\n      );\n\n      // Trigger download\n      clinicalReportingSystem.queueReportForDelivery(\n        report,\n        'download'\n      );\n\n      console.log('📄 Clinical report generated and queued for download');\n\n    } catch (error) {\n      console.error('Failed to generate clinical report:', error);\n      alert('Failed to generate clinical report. Please try again.');\n    }\n    */\n  }\n\n  /**\n   * Run Phase 4 feature tests\n   */\n  async runPhase4Tests() {\n    // TEMPORARILY DISABLED\n    return;\n    /*\n    console.log('🧪 Running Phase 4 feature tests...');\n\n    try {\n      // Test predictive analytics\n      const testPatientData = {\n        gfap_value: 3500,\n        age: 68,\n        gcs_score: 12,\n        systolic_bp: 165,\n        diastolic_bp: 95,\n        fast_ed_score: 7\n      };\n\n      const predictions = await predictiveEngine.generatePredictions(testPatientData);\n      console.log('✅ Predictive analytics test passed');\n\n      // Test ML model integration\n      const mlResults = await mlModelIntegration.getComprehensivePrediction(testPatientData);\n      console.log('✅ ML model integration test passed');\n\n      // Test quality metrics\n      qualityMetricsTracker.recordMetric('prediction_accuracy', 'efficiency', 92);\n      console.log('✅ Quality metrics tracking test passed');\n\n      // Test audit trail\n      clinicalAuditTrail.logEvent('clinical_decision', {\n        action: 'phase4_test',\n        resource: 'test_module'\n      });\n      console.log('✅ Audit trail test passed');\n\n      // Test reporting system\n      const testReport = await clinicalReportingSystem.generateReport(\n        'clinical_summary',\n        { patientData: testPatientData, predictions },\n        { format: 'json' }\n      );\n      console.log('✅ Reporting system test passed');\n\n      // Generate quality dashboard\n      const qualityDashboard = qualityMetricsTracker.getQualityDashboard();\n      console.log('✅ Quality dashboard test passed');\n\n      // Test compliance reporting\n      const complianceReport = clinicalAuditTrail.generateComplianceReport('hipaa');\n      console.log('✅ Compliance reporting test passed');\n\n      console.log('🎯 All Phase 4 feature tests completed successfully');\n\n      // Store test results\n      this.phase4TestResults = {\n        predictions,\n        mlResults,\n        qualityDashboard,\n        complianceReport,\n        testReport,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error('❌ Phase 4 feature tests failed:', error);\n    }\n    */\n  }\n\n  /**\n   * Get Phase 4 system status\n   */\n  getPhase4Status() {\n    return {\n      predictiveEngine: predictiveEngine.isInitialized || false,\n      clinicalDecisionSupport: clinicalDecisionSupport.isActive || false,\n      qualityMetrics: qualityMetricsTracker.isActive || false,\n      auditTrail: clinicalAuditTrail.isActive || false,\n      reportingSystem: clinicalReportingSystem.isActive || false,\n      mlIntegration: mlModelIntegration.isInitialized || false,\n      dashboard: !!this.medicalDashboard,\n      testResults: !!this.phase4TestResults\n    };\n  }\n\n  showUpdateNotification() {\n    // Create modal dialog for update notification\n    const modal = document.createElement('div');\n    modal.className = 'modal show update-modal';\n    modal.style.cssText = `\n      display: flex;\n      position: fixed;\n      z-index: 2000;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0,0,0,0.6);\n      backdrop-filter: blur(5px);\n      align-items: center;\n      justify-content: center;\n    `;\n\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal-content';\n    modalContent.style.cssText = `\n      background-color: var(--container-bg);\n      padding: 30px;\n      border-radius: 16px;\n      max-width: 400px;\n      box-shadow: var(--shadow-lg);\n      text-align: center;\n      animation: slideUp 0.3s ease;\n    `;\n\n    modalContent.innerHTML = `\n      <div style=\"margin-bottom: 20px;\">\n        <div style=\"font-size: 3rem; margin-bottom: 16px;\">🔄</div>\n        <h3 style=\"margin: 0 0 12px 0; color: var(--text-color);\">Update Available</h3>\n        <p style=\"color: var(--text-secondary); margin: 0 0 24px 0; line-height: 1.5;\">\n          A new version with improvements is ready to install.\n        </p>\n      </div>\n      <div style=\"display: flex; gap: 12px; justify-content: center;\">\n        <button id=\"updateNow\" class=\"primary\" style=\"flex: 1; max-width: 140px;\">\n          Refresh Now\n        </button>\n        <button id=\"updateLater\" class=\"secondary\" style=\"flex: 1; max-width: 140px;\">\n          Later\n        </button>\n      </div>\n    `;\n\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n\n    // Handle buttons\n    const updateNow = modal.querySelector('#updateNow');\n    const updateLater = modal.querySelector('#updateLater');\n\n    updateNow.addEventListener('click', () => {\n      window.location.reload();\n    });\n\n    updateLater.addEventListener('click', () => {\n      modal.remove();\n      // Show again in 5 minutes\n      setTimeout(() => this.showUpdateNotification(), 5 * 60 * 1000);\n    });\n\n    // Close on backdrop click\n    modal.addEventListener('click', (e) => {\n      if (e.target === modal) {\n        updateLater.click();\n      }\n    });\n  }\n\n  destroy() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n}\n\n// Initialize the application\nconst app = new App();\napp.init();\n\n// Export for potential testing or debugging\nexport default app;\n"],"file":"assets/index-Bbm2jiCh.js"}