import{D as g,A as u}from"./medical-core-BGk_aHbc.js";import"./enterprise-features-DIAO-rWl.js";const w=-.825559,y=-.408314,P=-.82645,A=1.651521,I=-0,_=1,k=3.701422,F=2.306173,v=1.11742,E=-1.032167,L=.333333,O=1e-15,S=0,M=16;function $(e,t){return Math.abs(t)<O?Math.log(e+1):((e+1)**t-1)/t}function d(e,t,r){return(e-t)/r}function V(e){return e>500?1:e<-500?0:1/(1+Math.exp(-e))}function R(e,t){if(e==null)throw new Error("gfap is required");if(t==null)throw new Error("fasted is required");const r=Number(e),o=Number(t);if(!Number.isFinite(r))throw new Error("gfap must be a finite number");if(!Number.isFinite(o))throw new Error("fasted must be a finite number");if(r<0)throw new Error("GFAP value must be non-negative");return{gfap:r,fasted:o}}function h(e,t){const r=R(e,t),o=Math.max(S,Math.min(M,r.fasted)),i=$(r.gfap,w),n=d(i,I,_),f=d(o,k,F),a=y+P*n+A*f,s=v*a+E;return V(s)}function C(e,t){return h(e,t)>=L?1:0}class N extends Error{constructor(t,r,o){super(t),this.name="APIError",this.status=r,this.url=o}}class c extends N{constructor(t,r,o){super(t,r,o),this.name="MedicalAPIError"}}function D(e,t){if(!e||typeof e!="object")return null;const r=[],o=[];return Object.entries(e).forEach(([i,n])=>{typeof n=="number"&&(n>0?r.push({label:i,weight:n}):n<0&&o.push({label:i,weight:Math.abs(n)}))}),r.sort((i,n)=>n.weight-i.weight),o.sort((i,n)=>n.weight-i.weight),{kind:"flat_dictionary",units:"logit",positive:r,negative:o,meta:{}}}const l={safeParseFloat:(e,t=0)=>{const r=parseFloat(e);return isNaN(r)?t:r},normalizeBooleans:e=>{const t={...e};return Object.keys(t).forEach(r=>{t[r]==="true"||t[r]===!0?t[r]=1:(t[r]==="false"||t[r]===!1)&&(t[r]=0)}),t},async makeApiCall(e,t,r="unknown"){console.log(`[API] Making ${r} request to:`,e),console.log("[API] Payload:",t);try{const o=new AbortController,i=e.includes("full_stroke")?15e3:8e3,n=setTimeout(()=>o.abort(),i),f=this.normalizeBooleans(t),a=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(f),signal:o.signal,mode:"cors"});if(clearTimeout(n),!a.ok){const b=await a.text().catch(()=>"Network error");throw new c(`API request failed: ${a.status} ${a.statusText} - ${b}`,a.status,e)}const s=await a.json();return console.log(`[API] ${r} response:`,s),console.log(`[API] ${r} response keys:`,Object.keys(s)),console.log(`[API] ${r} first key:`,Object.keys(s)[0]),console.log(`[API] ${r} first value:`,s[Object.keys(s)[0]]),console.log(`[API] ${r} probability:`,s.probability),console.log(`[API] ${r} ich_probability:`,s.ich_probability),!s.probability&&s.ich_probability!==void 0&&(s.probability=s.ich_probability,console.log(`[API] ${r} normalized probability from ich_probability:`,s.probability)),s}catch(o){throw o.name==="AbortError"?(console.warn(`[API] ${r} request timeout`),new c(`Request timeout after ${timeout/1e3}s`,408,e)):o instanceof c?o:(console.error(`[API] ${r} request failed:`,o),new c(`Network error: ${o.message}`,0,e))}},getRequestStats:()=>({requests:0,errors:0,avgResponseTime:0}),cancelAllRequests:()=>console.log("Cancel requests - not implemented"),async predict(e,t){const o={coma_ich:u.COMA_ICH,limited_ich:u.LDM_ICH,full_stroke:u.FULL_STROKE,lvo:u.LVO_PREDICTION}[e];if(!o)throw new c(`Unknown module type: ${e}`,400,"unknown");return await this.makeApiCall(o,t,e)}};async function U(e){try{return await l.predict("coma_ich",e)}catch(t){if(t instanceof c){const r=new Error(t.message);throw r.name="APIError",r.status=t.status,r.url=t.url,r}throw t}}async function z(e){try{return await l.predict("limited_ich",e)}catch(t){if(t instanceof c){const r=new Error(t.message);throw r.name="APIError",r.status=t.status,r.url=t.url,r}throw t}}async function p(e,t=0){if(console.log("[API] predictLVO called with payload:",e),!e.gfap_value||!e.fast_ed_score)throw new c("Missing required parameters: gfap_value and fast_ed_score",400,u.LVO_PREDICTION);console.log("[API] LVO payload preparation...");try{console.log("üå©Ô∏è Using LVO Cloud Function (primary)");const r=await l.predict("lvo",e);return console.log("[API] LVO Cloud Function response:",r),r}catch(r){console.warn("‚ö†Ô∏è LVO Cloud Function failed, falling back to local model:",r.message),console.log("üè† Using New LVO Model (fallback)");try{const o=parseFloat(e.gfap_value),i=parseInt(e.fast_ed_score);if(isNaN(o)||isNaN(i))throw new Error("Invalid GFAP or FAST-ED values");const n=h(o,i),f=C(o,i),a={kind:"new_model_fallback",units:"normalized_contribution",positive:[{label:"GFAP Biomarker",weight:o>100?.6:.3},{label:"FAST-ED Score",weight:i*.1}].sort((s,b)=>Math.abs(b.weight)-Math.abs(s.weight)),negative:[],meta:{riskLevel:n>.7?"high":n>.4?"moderate":"low",interpretation:`${(n*100).toFixed(1)}% LVO probability (${f===1?"Positive":"Negative"})`}};return{probability:n,drivers:a,confidence:n>.7?.9:n>.4?.7:.5,module:"New LVO Model (Scientifically Calibrated)",interpretation:`${(n*100).toFixed(1)}% LVO probability based on GFAP=${o} and FAST-ED=${i}`}}catch(o){throw console.warn("‚ö†Ô∏è New LVO Model fallback failed:",o.message),new c(`LVO prediction failed: ${r.message}`,r.status||500,u.LVO_PREDICTION)}}}async function T(e,t=0){console.log("[API] predictFullStroke called with payload:",e),console.log("[API] isLocalPreview():",m());try{const r=await l.predict("full_stroke",e);console.log("[API] Full stroke raw response:",r);const o=r.ich_prediction||{};console.log("[API] Extracted ICH data:",o);let i=null;try{console.log("üîÑ Using dedicated LVO prediction (cloud function + fallback)"),i=await p(e),console.log("‚úÖ LVO prediction successful via dedicated function")}catch(n){console.warn("‚ö†Ô∏è Dedicated LVO prediction failed:",n),o.lvo_prediction?i={probability:o.lvo_prediction.probability||0,drivers:o.lvo_prediction.drivers||null,confidence:o.lvo_prediction.confidence||.8,module:"Full Stroke (API Fallback)"}:i=await p(e)}return{ich:{probability:o.probability,drivers:o.drivers?D(o.drivers,"ICH"):o.drivers,confidence:o.confidence,module:o.module},lvo:i}}catch(r){if(console.error("Full Stroke prediction failed:",r),r.status===408&&t<1)return console.log("‚è±Ô∏è Retrying Full Stroke API (cold start detected)..."),T(e,t+1);if(m()){const o=g.mockApiResponses.full_stroke,i=o.ich_prediction||{},n=o.lvo_prediction||{};return{ich:{probability:l.safeParseFloat(i.probability,0),drivers:i.drivers||null,confidence:l.safeParseFloat(i.confidence,.85),module:"Full Stroke (Mock)"},lvo:{probability:l.safeParseFloat(n.probability,0),drivers:n.drivers||null,confidence:l.safeParseFloat(n.confidence,.85),module:"Full Stroke (Mock)"}}}throw new c(`Failed to get stroke predictions: ${r.message}`,r.status,u.FULL_STROKE)}}function m(){return["localhost","127.0.0.1","0.0.0.0"].includes(window.location.hostname)}function G(e){const t=[],r=[];return!e||typeof e!="object"?(t.push("Patient data must be an object"),{isValid:!1,errors:t,warnings:r}):((typeof e.age!="number"||e.age<0||e.age>120)&&t.push("Age must be a number between 0 and 120"),["male","female","other"].includes(e.gender)||t.push('Gender must be "male", "female", or "other"'),(typeof e.gfap!="number"||e.gfap<29||e.gfap>10001)&&t.push("GFAP must be a number between 29 and 10001 pg/mL"),e.nihss!==void 0&&(typeof e.nihss!="number"||e.nihss<0||e.nihss>42)&&t.push("NIHSS must be a number between 0 and 42"),e.gcs!==void 0&&(typeof e.gcs!="number"||e.gcs<3||e.gcs>15)&&t.push("GCS must be a number between 3 and 15"),e.sbp!==void 0&&(typeof e.sbp!="number"||e.sbp<50||e.sbp>300)&&r.push("Systolic BP should typically be between 50-300 mmHg"),e.dbp!==void 0&&(typeof e.dbp!="number"||e.dbp<30||e.dbp>200)&&r.push("Diastolic BP should typically be between 30-200 mmHg"),{isValid:t.length===0,errors:t,warnings:r})}function H(e){const t=[],r=[];return!e||typeof e!="object"?(t.push("ICH risk result must be an object"),{isValid:!1,errors:t,warnings:r}):((typeof e.probability!="number"||e.probability<0||e.probability>1)&&t.push("Probability must be a number between 0 and 1"),(typeof e.percentage!="number"||e.percentage<0||e.percentage>100)&&t.push("Percentage must be a number between 0 and 100"),["low","moderate","high","critical"].includes(e.riskLevel)||t.push('Risk level must be "low", "moderate", "high", or "critical"'),(!e.timestamp||!Date.parse(e.timestamp))&&t.push("Timestamp must be a valid ISO date string"),{isValid:t.length===0,errors:t,warnings:r})}function j(e){return G(e).isValid}function q(e){return H(e).isValid}class J{static ensureType(t,r,o){let i=!1,n=typeof t;switch(r){case"PatientData":i=j(t),n="Invalid PatientData";break;case"ICHRiskResult":i=q(t),n="Invalid ICHRiskResult";break;case"number":i=typeof t=="number"&&!isNaN(t);break;case"string":i=typeof t=="string";break;case"boolean":i=typeof t=="boolean";break;default:i=typeof t===r}if(!i)throw new TypeError(`Type error in ${o}: expected ${r}, got ${n}. This is a critical error in medical calculations.`)}static ensureRange(t,r,o){this.ensureType(t,"number",o);const[i,n]=r;if(t<i||t>n)throw new RangeError(`Range error in ${o}: value ${t} must be between ${i} and ${n}. This is a critical error in medical calculations.`)}}function K(e){try{const t=Math.max(0,10**(.0192+.4533*Math.log10(Math.max(1,Math.min(e,1e4)))));return Number.isFinite(t)?t:0}catch(t){return 0}}function X(e){return!Number.isFinite(e)||e<=0?"5-10%":e>=60?"91-100%":e>=50?"44-91%":e>=30?"19-44%":e>=10?"10-19%":"5-10%"}function Q(e){return e<1?"<1 ml":e<10?`${e.toFixed(1)} ml`:`${Math.round(e)} ml`}export{N as A,J as T,z as a,U as b,X as c,K as e,Q as f,T as p};
//# sourceMappingURL=prediction-models-DCU63o_D.js.map
