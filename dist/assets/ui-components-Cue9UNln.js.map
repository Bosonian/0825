{"version":3,"file":"ui-components-Cue9UNln.js","sources":["../../src/data/comprehensive-stroke-centers.js","../../src/data/stroke-centers.js","../../src/ui/components/stroke-center-map.js","../../src/ui/components/brain-visualization.js"],"sourcesContent":["// Comprehensive stroke center database for Germany\n// Covers Bayern, Baden-Württemberg, and Nordrhein-Westfalen\n// Total: 316 hospitals with hierarchical capabilities\n\nconst COMPREHENSIVE_HOSPITAL_DATABASE = {\n  bayern: {\n    neurosurgicalCenters: [\n      {\n        id: 'BY-NS-001',\n        name: 'LMU Klinikum München - Großhadern',\n        address: 'Marchioninistraße 15, 81377 München',\n        coordinates: { lat: 48.1106, lng: 11.4684 },\n        phone: '+49 89 4400-0',\n        emergency: '+49 89 4400-73331',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1440,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-002',\n        name: 'Klinikum rechts der Isar München (TUM)',\n        address: 'Ismaninger Str. 22, 81675 München',\n        coordinates: { lat: 48.1497, lng: 11.6052 },\n        phone: '+49 89 4140-0',\n        emergency: '+49 89 4140-2249',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1161,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-003',\n        name: 'Städtisches Klinikum München Schwabing',\n        address: 'Kölner Platz 1, 80804 München',\n        coordinates: { lat: 48.1732, lng: 11.5755 },\n        phone: '+49 89 3068-0',\n        emergency: '+49 89 3068-2050',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 648,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-004',\n        name: 'Städtisches Klinikum München Bogenhausen',\n        address: 'Englschalkinger Str. 77, 81925 München',\n        coordinates: { lat: 48.1614, lng: 11.6254 },\n        phone: '+49 89 9270-0',\n        emergency: '+49 89 9270-2050',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 689,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-005',\n        name: 'Universitätsklinikum Erlangen',\n        address: 'Maximiliansplatz 2, 91054 Erlangen',\n        coordinates: { lat: 49.5982, lng: 11.0037 },\n        phone: '+49 9131 85-0',\n        emergency: '+49 9131 85-39003',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1371,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-006',\n        name: 'Universitätsklinikum Regensburg',\n        address: 'Franz-Josef-Strauß-Allee 11, 93053 Regensburg',\n        coordinates: { lat: 49.0134, lng: 12.0991 },\n        phone: '+49 941 944-0',\n        emergency: '+49 941 944-7501',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1042,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-007',\n        name: 'Universitätsklinikum Würzburg',\n        address: 'Oberdürrbacher Str. 6, 97080 Würzburg',\n        coordinates: { lat: 49.7840, lng: 9.9721 },\n        phone: '+49 931 201-0',\n        emergency: '+49 931 201-24444',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1264,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-008',\n        name: 'Klinikum Nürnberg Nord',\n        address: 'Prof.-Ernst-Nathan-Str. 1, 90419 Nürnberg',\n        coordinates: { lat: 49.4521, lng: 11.0767 },\n        phone: '+49 911 398-0',\n        emergency: '+49 911 398-2369',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1368,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-009',\n        name: 'Universitätsklinikum Augsburg',\n        address: 'Stenglinstr. 2, 86156 Augsburg',\n        coordinates: { lat: 48.3668, lng: 10.9093 },\n        phone: '+49 821 400-01',\n        emergency: '+49 821 400-2356',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1740,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-010',\n        name: 'Klinikum Aschaffenburg-Alzenau',\n        address: 'Am Hasenkopf 1, 63739 Aschaffenburg',\n        coordinates: { lat: 49.9737, lng: 9.1570 },\n        phone: '+49 6021 32-0',\n        emergency: '+49 6021 32-2800',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 40,\n        network: 'TRANSIT',\n      },\n      {\n        id: 'BY-NS-011',\n        name: 'Klinikum Landshut',\n        address: 'Robert-Koch-Str. 1, 84034 Landshut',\n        coordinates: { lat: 48.5665, lng: 12.1512 },\n        phone: '+49 871 698-0',\n        emergency: '+49 871 698-3333',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 505,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-NS-012',\n        name: 'Klinikum Coburg',\n        address: 'Ketschendorfer Str. 33, 96450 Coburg',\n        coordinates: { lat: 50.2596, lng: 10.9644 },\n        phone: '+49 9561 22-0',\n        emergency: '+49 9561 22-6800',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 547,\n        network: 'STENO',\n      },\n      {\n        id: 'BY-NS-013',\n        name: 'Klinikum Passau',\n        address: 'Bischof-Pilgrim-Str. 1, 94032 Passau',\n        coordinates: { lat: 48.5665, lng: 13.4777 },\n        phone: '+49 851 5300-0',\n        emergency: '+49 851 5300-2222',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 696,\n        network: 'TEMPiS',\n      },\n    ],\n\n    comprehensiveStrokeCenters: [\n      {\n        id: 'BY-CS-001',\n        name: 'Klinikum Bamberg',\n        address: 'Buger Str. 80, 96049 Bamberg',\n        coordinates: { lat: 49.8988, lng: 10.9027 },\n        phone: '+49 951 503-0',\n        emergency: '+49 951 503-11101',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 630,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-CS-002',\n        name: 'Klinikum Bayreuth',\n        address: 'Preuschwitzer Str. 101, 95445 Bayreuth',\n        coordinates: { lat: 49.9459, lng: 11.5779 },\n        phone: '+49 921 400-0',\n        emergency: '+49 921 400-5401',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 848,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-CS-003',\n        name: 'Klinikum Coburg',\n        address: 'Ketschendorfer Str. 33, 96450 Coburg',\n        coordinates: { lat: 50.2596, lng: 10.9685 },\n        phone: '+49 9561 22-0',\n        emergency: '+49 9561 22-6300',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 522,\n        network: 'TEMPiS',\n      },\n    ],\n\n    regionalStrokeUnits: [\n      {\n        id: 'BY-RSU-001',\n        name: 'Goldberg-Klinik Kelheim',\n        address: 'Traubenweg 3, 93309 Kelheim',\n        coordinates: { lat: 48.9166, lng: 11.8742 },\n        phone: '+49 9441 702-0',\n        emergency: '+49 9441 702-6800',\n        thrombolysis: true,\n        beds: 200,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-002',\n        name: 'DONAUISAR Klinikum Deggendorf',\n        address: 'Perlasberger Str. 41, 94469 Deggendorf',\n        coordinates: { lat: 48.8372, lng: 12.9619 },\n        phone: '+49 991 380-0',\n        emergency: '+49 991 380-2201',\n        thrombolysis: true,\n        beds: 450,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-003',\n        name: 'Klinikum St. Elisabeth Straubing',\n        address: 'St.-Elisabeth-Str. 23, 94315 Straubing',\n        coordinates: { lat: 48.8742, lng: 12.5733 },\n        phone: '+49 9421 710-0',\n        emergency: '+49 9421 710-2000',\n        thrombolysis: true,\n        beds: 580,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-004',\n        name: 'Klinikum Freising',\n        address: 'Mainburger Str. 29, 85356 Freising',\n        coordinates: { lat: 48.4142, lng: 11.7461 },\n        phone: '+49 8161 24-0',\n        emergency: '+49 8161 24-2800',\n        thrombolysis: true,\n        beds: 380,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-005',\n        name: 'Klinikum Landkreis Erding',\n        address: 'Bajuwarenstr. 5, 85435 Erding',\n        coordinates: { lat: 48.3061, lng: 11.9067 },\n        phone: '+49 8122 59-0',\n        emergency: '+49 8122 59-2201',\n        thrombolysis: true,\n        beds: 350,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-006',\n        name: 'Helios Amper-Klinikum Dachau',\n        address: 'Krankenhausstr. 15, 85221 Dachau',\n        coordinates: { lat: 48.2599, lng: 11.4342 },\n        phone: '+49 8131 76-0',\n        emergency: '+49 8131 76-2201',\n        thrombolysis: true,\n        beds: 480,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-007',\n        name: 'Klinikum Fürstenfeldbruck',\n        address: 'Dachauer Str. 33, 82256 Fürstenfeldbruck',\n        coordinates: { lat: 48.1772, lng: 11.2578 },\n        phone: '+49 8141 99-0',\n        emergency: '+49 8141 99-2201',\n        thrombolysis: true,\n        beds: 420,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-008',\n        name: 'Klinikum Ingolstadt',\n        address: 'Krumenauerstraße 25, 85049 Ingolstadt',\n        coordinates: { lat: 48.7665, lng: 11.4364 },\n        phone: '+49 841 880-0',\n        emergency: '+49 841 880-2201',\n        thrombolysis: true,\n        beds: 665,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-009',\n        name: 'Klinikum Passau',\n        address: 'Bischof-Pilgrim-Str. 1, 94032 Passau',\n        coordinates: { lat: 48.5665, lng: 13.4513 },\n        phone: '+49 851 5300-0',\n        emergency: '+49 851 5300-2100',\n        thrombolysis: true,\n        beds: 540,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-010',\n        name: 'Klinikum Landshut',\n        address: 'Robert-Koch-Str. 1, 84034 Landshut',\n        coordinates: { lat: 48.5436, lng: 12.1619 },\n        phone: '+49 871 698-0',\n        emergency: '+49 871 698-3333',\n        thrombolysis: true,\n        beds: 790,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-011',\n        name: 'RoMed Klinikum Rosenheim',\n        address: 'Pettenkoferstr. 10, 83022 Rosenheim',\n        coordinates: { lat: 47.8567, lng: 12.1265 },\n        phone: '+49 8031 365-0',\n        emergency: '+49 8031 365-3711',\n        thrombolysis: true,\n        beds: 870,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-012',\n        name: 'Klinikum Memmingen',\n        address: 'Bismarckstr. 23, 87700 Memmingen',\n        coordinates: { lat: 47.9833, lng: 10.1833 },\n        phone: '+49 8331 70-0',\n        emergency: '+49 8331 70-2500',\n        thrombolysis: true,\n        beds: 520,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-013',\n        name: 'Klinikum Kempten-Oberallgäu',\n        address: 'Robert-Weixler-Str. 50, 87439 Kempten',\n        coordinates: { lat: 47.7261, lng: 10.3097 },\n        phone: '+49 831 530-0',\n        emergency: '+49 831 530-2201',\n        thrombolysis: true,\n        beds: 650,\n        network: 'TEMPiS',\n      },\n      {\n        id: 'BY-RSU-014',\n        name: 'Klinikum Aschaffenburg-Alzenau',\n        address: 'Am Hasenkopf 1, 63739 Aschaffenburg',\n        coordinates: { lat: 49.9747, lng: 9.1581 },\n        phone: '+49 6021 32-0',\n        emergency: '+49 6021 32-2700',\n        thrombolysis: true,\n        beds: 590,\n        network: 'TEMPiS',\n      },\n    ],\n\n    thrombolysisHospitals: [\n      // Add more smaller hospitals with thrombolysis capability\n      {\n        id: 'BY-TH-001',\n        name: 'Krankenhaus Vilsbiburg',\n        address: 'Sonnenstraße 10, 84137 Vilsbiburg',\n        coordinates: { lat: 48.6333, lng: 12.2833 },\n        phone: '+49 8741 60-0',\n        thrombolysis: true,\n        beds: 180,\n      },\n      {\n        id: 'BY-TH-002',\n        name: 'Krankenhaus Eggenfelden',\n        address: 'Pfarrkirchener Str. 5, 84307 Eggenfelden',\n        coordinates: { lat: 48.4000, lng: 12.7667 },\n        phone: '+49 8721 98-0',\n        thrombolysis: true,\n        beds: 220,\n      },\n      // ... more hospitals would be added here\n    ],\n  },\n\n  badenWuerttemberg: {\n    neurosurgicalCenters: [\n      {\n        id: 'BW-NS-001',\n        name: 'Universitätsklinikum Freiburg',\n        address: 'Hugstetter Str. 55, 79106 Freiburg',\n        coordinates: { lat: 48.0025, lng: 7.8347 },\n        phone: '+49 761 270-0',\n        emergency: '+49 761 270-34010',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1600,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-002',\n        name: 'Universitätsklinikum Heidelberg',\n        address: 'Im Neuenheimer Feld 400, 69120 Heidelberg',\n        coordinates: { lat: 49.4178, lng: 8.6706 },\n        phone: '+49 6221 56-0',\n        emergency: '+49 6221 56-36643',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1621,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-003',\n        name: 'Universitätsklinikum Tübingen',\n        address: 'Geissweg 3, 72076 Tübingen',\n        coordinates: { lat: 48.5378, lng: 9.0538 },\n        phone: '+49 7071 29-0',\n        emergency: '+49 7071 29-82211',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1550,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-004',\n        name: 'Universitätsklinikum Ulm',\n        address: 'Albert-Einstein-Allee 23, 89081 Ulm',\n        coordinates: { lat: 48.4196, lng: 9.9592 },\n        phone: '+49 731 500-0',\n        emergency: '+49 731 500-63001',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1264,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-005',\n        name: 'Klinikum Stuttgart - Katharinenhospital',\n        address: 'Kriegsbergstraße 60, 70174 Stuttgart',\n        coordinates: { lat: 48.7784, lng: 9.1682 },\n        phone: '+49 711 278-0',\n        emergency: '+49 711 278-32001',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 950,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-006',\n        name: 'Städtisches Klinikum Karlsruhe',\n        address: 'Moltkestraße 90, 76133 Karlsruhe',\n        coordinates: { lat: 49.0047, lng: 8.3858 },\n        phone: '+49 721 974-0',\n        emergency: '+49 721 974-2301',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1570,\n        network: 'FAST',\n      },\n      {\n        id: 'BW-NS-007',\n        name: 'Klinikum Ludwigsburg',\n        address: 'Posilipostraße 4, 71640 Ludwigsburg',\n        coordinates: { lat: 48.8901, lng: 9.1953 },\n        phone: '+49 7141 99-0',\n        emergency: '+49 7141 99-67201',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 720,\n        network: 'FAST',\n      },\n    ],\n\n    comprehensiveStrokeCenters: [\n      {\n        id: 'BW-CS-001',\n        name: 'Universitätsmedizin Mannheim',\n        address: 'Theodor-Kutzer-Ufer 1-3, 68167 Mannheim',\n        coordinates: { lat: 49.4828, lng: 8.4664 },\n        phone: '+49 621 383-0',\n        emergency: '+49 621 383-2251',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1400,\n        network: 'FAST',\n      },\n    ],\n\n    regionalStrokeUnits: [\n      // Regional stroke units in Baden-Württemberg\n      {\n        id: 'BW-RSU-001',\n        name: 'Robert-Bosch-Krankenhaus Stuttgart',\n        address: 'Auerbachstraße 110, 70376 Stuttgart',\n        coordinates: { lat: 48.7447, lng: 9.2294 },\n        phone: '+49 711 8101-0',\n        emergency: '+49 711 8101-3456',\n        thrombolysis: true,\n        beds: 850,\n        network: 'FAST',\n      },\n      // ... more would be added\n    ],\n\n    thrombolysisHospitals: [\n      // Smaller hospitals with thrombolysis capability\n      // ... would be populated from your database\n    ],\n  },\n\n  nordrheinWestfalen: {\n    neurosurgicalCenters: [\n      {\n        id: 'NRW-NS-001',\n        name: 'Universitätsklinikum Düsseldorf',\n        address: 'Moorenstraße 5, 40225 Düsseldorf',\n        coordinates: { lat: 51.1906, lng: 6.8064 },\n        phone: '+49 211 81-0',\n        emergency: '+49 211 81-17700',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1300,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-002',\n        name: 'Universitätsklinikum Köln',\n        address: 'Kerpener Str. 62, 50937 Köln',\n        coordinates: { lat: 50.9253, lng: 6.9187 },\n        phone: '+49 221 478-0',\n        emergency: '+49 221 478-32500',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1500,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-003',\n        name: 'Universitätsklinikum Essen',\n        address: 'Hufelandstraße 55, 45147 Essen',\n        coordinates: { lat: 51.4285, lng: 7.0073 },\n        phone: '+49 201 723-0',\n        emergency: '+49 201 723-84444',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1350,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-004',\n        name: 'Universitätsklinikum Münster',\n        address: 'Albert-Schweitzer-Campus 1, 48149 Münster',\n        coordinates: { lat: 51.9607, lng: 7.6261 },\n        phone: '+49 251 83-0',\n        emergency: '+49 251 83-47255',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1513,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-005',\n        name: 'Universitätsklinikum Bonn',\n        address: 'Venusberg-Campus 1, 53127 Bonn',\n        coordinates: { lat: 50.6916, lng: 7.1127 },\n        phone: '+49 228 287-0',\n        emergency: '+49 228 287-15107',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1200,\n        network: 'NEVANO+',\n      },\n      {\n        id: 'NRW-NS-006',\n        name: 'Klinikum Dortmund',\n        address: 'Beurhausstraße 40, 44137 Dortmund',\n        coordinates: { lat: 51.5036, lng: 7.4663 },\n        phone: '+49 231 953-0',\n        emergency: '+49 231 953-20050',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1200,\n        network: 'NVNR',\n      },\n      {\n        id: 'NRW-NS-007',\n        name: 'Rhein-Maas Klinikum Würselen',\n        address: 'Mauerfeldstraße 25, 52146 Würselen',\n        coordinates: { lat: 50.8178, lng: 6.1264 },\n        phone: '+49 2405 62-0',\n        emergency: '+49 2405 62-2222',\n        neurosurgery: true,\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 420,\n        network: 'NEVANO+',\n      },\n    ],\n\n    comprehensiveStrokeCenters: [\n      {\n        id: 'NRW-CS-001',\n        name: 'Universitätsklinikum Aachen',\n        address: 'Pauwelsstraße 30, 52074 Aachen',\n        coordinates: { lat: 50.7780, lng: 6.0614 },\n        phone: '+49 241 80-0',\n        emergency: '+49 241 80-89611',\n        thrombectomy: true,\n        thrombolysis: true,\n        beds: 1400,\n        network: 'NEVANO+',\n      },\n    ],\n\n    regionalStrokeUnits: [\n      // Regional stroke units in NRW\n      {\n        id: 'NRW-RSU-001',\n        name: 'Helios Universitätsklinikum Wuppertal',\n        address: 'Heusnerstraße 40, 42283 Wuppertal',\n        coordinates: { lat: 51.2467, lng: 7.1703 },\n        phone: '+49 202 896-0',\n        emergency: '+49 202 896-2180',\n        thrombolysis: true,\n        beds: 1050,\n        network: 'NEVANO+',\n      },\n      // ... more would be added\n    ],\n\n    thrombolysisHospitals: [\n      {\n        id: 'NRW-TH-009',\n        name: 'Elisabeth-Krankenhaus Essen',\n        address: 'Klara-Kopp-Weg 1, 45138 Essen',\n        coordinates: { lat: 51.4495, lng: 7.0137 },\n        phone: '+49 201 897-0',\n        thrombolysis: true,\n        beds: 583,\n      },\n      {\n        id: 'NRW-TH-010',\n        name: 'Klinikum Oberberg Gummersbach',\n        address: 'Wilhelm-Breckow-Allee 20, 51643 Gummersbach',\n        coordinates: { lat: 51.0277, lng: 7.5694 },\n        phone: '+49 2261 17-0',\n        thrombolysis: true,\n        beds: 431,\n      },\n      {\n        id: 'NRW-TH-011',\n        name: 'St. Vincenz-Krankenhaus Limburg',\n        address: 'Auf dem Schafsberg, 65549 Limburg',\n        coordinates: { lat: 50.3856, lng: 8.0584 },\n        phone: '+49 6431 292-0',\n        thrombolysis: true,\n        beds: 452,\n      },\n      {\n        id: 'NRW-TH-012',\n        name: 'Klinikum Lüdenscheid',\n        address: 'Paulmannshöher Straße 14, 58515 Lüdenscheid',\n        coordinates: { lat: 51.2186, lng: 7.6298 },\n        phone: '+49 2351 46-0',\n        thrombolysis: true,\n        beds: 869,\n      },\n      // ... more hospitals from your database\n    ],\n  },\n};\n\n// ==========================================\n// ENHANCED ROUTING ALGORITHM\n// ==========================================\n\nconst ROUTING_ALGORITHM = {\n\n  // Main routing function with enhanced ICH probability thresholds\n  routePatient(patientData) {\n    const {\n      location,\n      state,\n      ichProbability,\n      timeFromOnset,\n      clinicalFactors,\n    } = patientData;\n\n    // Auto-detect state if not provided\n    const detectedState = state || this.detectState(location);\n    const database = COMPREHENSIVE_HOSPITAL_DATABASE[detectedState];\n\n    // Enhanced decision tree based on ICH probability\n    if (ichProbability >= 0.50) {\n      // HIGH ICH RISK - Direct to neurosurgery\n      const destination = this.findNearest(location, database.neurosurgicalCenters);\n      if (!destination) {\n        throw new Error(`No neurosurgical centers available in ${detectedState}`);\n      }\n\n      return {\n        category: 'NEUROSURGICAL_CENTER',\n        destination,\n        urgency: 'IMMEDIATE',\n        reasoning: 'High bleeding probability (≥50%) - neurosurgical evaluation required',\n        preAlert: 'Activate neurosurgery team',\n        bypassLocal: true,\n        threshold: '≥50%',\n        state: detectedState,\n      };\n    }\n\n    if (ichProbability >= 0.30) {\n      // INTERMEDIATE ICH RISK - Comprehensive center preferred\n      const comprehensiveOptions = [\n        ...database.neurosurgicalCenters,\n        ...database.comprehensiveStrokeCenters,\n      ];\n\n      return {\n        category: 'COMPREHENSIVE_CENTER',\n        destination: this.findNearest(location, comprehensiveOptions),\n        urgency: 'URGENT',\n        reasoning: 'Intermediate bleeding risk (30-50%) - CT and possible intervention',\n        preAlert: 'Prepare for possible neurosurgical consultation',\n        transferPlan: this.findNearest(location, database.neurosurgicalCenters),\n        threshold: '30-50%',\n        state: detectedState,\n      };\n    }\n\n    if (timeFromOnset && timeFromOnset <= 270) { // Within 4.5 hour window\n      // LOW ICH RISK, WITHIN tPA WINDOW - Any thrombolysis center\n      const allThrombolysisCapable = [\n        ...database.neurosurgicalCenters,\n        ...database.comprehensiveStrokeCenters,\n        ...database.regionalStrokeUnits,\n        ...database.thrombolysisHospitals,\n      ];\n\n      return {\n        category: 'THROMBOLYSIS_CAPABLE',\n        destination: this.findNearest(location, allThrombolysisCapable),\n        urgency: 'TIME_CRITICAL',\n        reasoning: 'Low bleeding risk (<30%), within tPA window - nearest thrombolysis',\n        preAlert: 'Prepare for thrombolysis protocol',\n        bypassLocal: false,\n        threshold: '<30%',\n        timeWindow: '≤4.5h',\n        state: detectedState,\n      };\n    }\n\n    // LOW ICH RISK, OUTSIDE tPA WINDOW OR NO TIME - Regional stroke unit adequate\n    const strokeUnitsAndHigher = [\n      ...database.neurosurgicalCenters,\n      ...database.comprehensiveStrokeCenters,\n      ...database.regionalStrokeUnits,\n    ];\n\n    return {\n      category: 'STROKE_UNIT',\n      destination: this.findNearest(location, strokeUnitsAndHigher),\n      urgency: 'STANDARD',\n      reasoning: timeFromOnset > 270\n        ? 'Low bleeding risk, outside tPA window - standard stroke evaluation'\n        : 'Low bleeding risk - standard stroke evaluation',\n      preAlert: 'Standard stroke protocol',\n      bypassLocal: false,\n      threshold: '<30%',\n      timeWindow: timeFromOnset ? '>4.5h' : 'unknown',\n      state: detectedState,\n    };\n  },\n\n  // Auto-detect state based on coordinates (more precise boundaries)\n  detectState(location) {\n    // Baden-Württemberg: check first for western regions\n    if (location.lat >= 47.5 && location.lat <= 49.8\n        && location.lng >= 7.5 && location.lng <= 10.2) {\n      return 'badenWuerttemberg';\n    }\n\n    // NRW: northern regions\n    if (location.lat >= 50.3 && location.lat <= 52.5\n        && location.lng >= 5.9 && location.lng <= 9.5) {\n      return 'nordrheinWestfalen';\n    }\n\n    // Bayern: eastern regions (more restrictive western bound to avoid overlap)\n    if (location.lat >= 47.2 && location.lat <= 50.6\n        && location.lng >= 10.2 && location.lng <= 13.8) {\n      return 'bayern';\n    }\n\n    // Overlap region - use nearest state center\n    return this.findNearestState(location);\n  },\n\n  // Find nearest state for edge cases\n  findNearestState(location) {\n    const stateCenters = {\n      bayern: { lat: 49.0, lng: 11.5 },\n      badenWuerttemberg: { lat: 48.5, lng: 9.0 },\n      nordrheinWestfalen: { lat: 51.5, lng: 7.5 },\n    };\n\n    let nearestState = 'bayern';\n    let minDistance = Infinity;\n\n    for (const [state, center] of Object.entries(stateCenters)) {\n      const distance = this.calculateDistance(location, center);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestState = state;\n      }\n    }\n\n    return nearestState;\n  },\n\n  // Helper function to find nearest hospital\n  findNearest(userLocation, hospitals) {\n    if (!hospitals || hospitals.length === 0) {\n      // ('No hospitals available in database');\n      return null;\n    }\n\n    return hospitals\n      .map((hospital) => {\n        // Validate hospital has coordinates\n        if (!hospital.coordinates || typeof hospital.coordinates.lat !== 'number') {\n          // (`Hospital ${hospital.name} missing valid coordinates`);\n          return null;\n        }\n\n        return {\n          ...hospital,\n          distance: this.calculateDistance(userLocation, hospital.coordinates),\n        };\n      })\n      .filter((hospital) => hospital !== null) // Remove invalid hospitals\n      .sort((a, b) => a.distance - b.distance)[0];\n  },\n\n  // Calculate distance between two GPS points\n  calculateDistance(point1, point2) {\n    const R = 6371; // Earth radius in km\n    const dLat = this.toRad(point2.lat - point1.lat);\n    const dLng = this.toRad(point2.lng - point1.lng);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2)\n      + Math.cos(this.toRad(point1.lat)) * Math.cos(this.toRad(point2.lat))\n      * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  },\n\n  toRad(deg) {\n    return deg * (Math.PI / 180);\n  },\n};\n\nexport { COMPREHENSIVE_HOSPITAL_DATABASE, ROUTING_ALGORITHM };\n","// Stroke centers in Bayern (Bavaria), Germany\n// Data includes comprehensive stroke centers and stroke units with neurosurgical capabilities\n\nexport const strokeCenters = [\n  // Major comprehensive stroke centers in München\n  {\n    id: 'klinikum-grosshadern-muenchen',\n    name: 'LMU Klinikum München - Großhadern',\n    type: 'comprehensive',\n    address: 'Marchioninistraße 15, 81377 München',\n    coordinates: {\n      lat: 48.1106,\n      lng: 11.4684,\n    },\n    phone: '+49 89 4400-0',\n    emergency: '+49 89 4400-73331',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-rechts-der-isar-muenchen',\n    name: 'Klinikum rechts der Isar München (TUM)',\n    type: 'comprehensive',\n    address: 'Ismaninger Str. 22, 81675 München',\n    coordinates: {\n      lat: 48.1497,\n      lng: 11.6052,\n    },\n    phone: '+49 89 4140-0',\n    emergency: '+49 89 4140-2249',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-schwabing-muenchen',\n    name: 'Städtisches Klinikum München Schwabing',\n    type: 'comprehensive',\n    address: 'Kölner Platz 1, 80804 München',\n    coordinates: {\n      lat: 48.1732,\n      lng: 11.5755,\n    },\n    phone: '+49 89 3068-0',\n    emergency: '+49 89 3068-2050',\n    services: ['thrombectomy', 'neurosurgery', 'icu'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-bogenhausen-muenchen',\n    name: 'Städtisches Klinikum München Bogenhausen',\n    type: 'comprehensive',\n    address: 'Englschalkinger Str. 77, 81925 München',\n    coordinates: {\n      lat: 48.1614,\n      lng: 11.6254,\n    },\n    phone: '+49 89 9270-0',\n    emergency: '+49 89 9270-2050',\n    services: ['thrombectomy', 'neurosurgery', 'icu'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n\n  // Major centers in other Bayern cities\n  {\n    id: 'uniklinikum-erlangen',\n    name: 'Universitätsklinikum Erlangen',\n    type: 'comprehensive',\n    address: 'Maximiliansplatz 2, 91054 Erlangen',\n    coordinates: {\n      lat: 49.5982,\n      lng: 11.0037,\n    },\n    phone: '+49 9131 85-0',\n    emergency: '+49 9131 85-39003',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'uniklinikum-regensburg',\n    name: 'Universitätsklinikum Regensburg',\n    type: 'comprehensive',\n    address: 'Franz-Josef-Strauß-Allee 11, 93053 Regensburg',\n    coordinates: {\n      lat: 49.0134,\n      lng: 12.0991,\n    },\n    phone: '+49 941 944-0',\n    emergency: '+49 941 944-7501',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'uniklinikum-wuerzburg',\n    name: 'Universitätsklinikum Würzburg',\n    type: 'comprehensive',\n    address: 'Oberdürrbacher Str. 6, 97080 Würzburg',\n    coordinates: {\n      lat: 49.7840,\n      lng: 9.9721,\n    },\n    phone: '+49 931 201-0',\n    emergency: '+49 931 201-24444',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-nuernberg',\n    name: 'Klinikum Nürnberg Nord',\n    type: 'comprehensive',\n    address: 'Prof.-Ernst-Nathan-Str. 1, 90419 Nürnberg',\n    coordinates: {\n      lat: 49.4521,\n      lng: 11.0767,\n    },\n    phone: '+49 911 398-0',\n    emergency: '+49 911 398-2369',\n    services: ['thrombectomy', 'neurosurgery', 'icu'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-augsburg',\n    name: 'Universitätsklinikum Augsburg',\n    type: 'comprehensive',\n    address: 'Stenglinstr. 2, 86156 Augsburg',\n    coordinates: {\n      lat: 48.3668,\n      lng: 10.9093,\n    },\n    phone: '+49 821 400-01',\n    emergency: '+49 821 400-2356',\n    services: ['thrombectomy', 'neurosurgery', 'icu', 'telemedicine'],\n    certified: true,\n    certification: 'DSG/DGN',\n    lastUpdated: '2024-08-01',\n  },\n\n  // Primary stroke centers\n  {\n    id: 'klinikum-ingolstadt',\n    name: 'Klinikum Ingolstadt',\n    type: 'primary',\n    address: 'Krumenauerstraße 25, 85049 Ingolstadt',\n    coordinates: {\n      lat: 48.7665,\n      lng: 11.4364,\n    },\n    phone: '+49 841 880-0',\n    emergency: '+49 841 880-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-passau',\n    name: 'Klinikum Passau',\n    type: 'primary',\n    address: 'Bischof-Pilgrim-Str. 1, 94032 Passau',\n    coordinates: {\n      lat: 48.5665,\n      lng: 13.4513,\n    },\n    phone: '+49 851 5300-0',\n    emergency: '+49 851 5300-2100',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-bamberg',\n    name: 'Sozialstiftung Bamberg Klinikum',\n    type: 'primary',\n    address: 'Buger Str. 80, 96049 Bamberg',\n    coordinates: {\n      lat: 49.8988,\n      lng: 10.9027,\n    },\n    phone: '+49 951 503-0',\n    emergency: '+49 951 503-11101',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-bayreuth',\n    name: 'Klinikum Bayreuth',\n    type: 'primary',\n    address: 'Preuschwitzer Str. 101, 95445 Bayreuth',\n    coordinates: {\n      lat: 49.9459,\n      lng: 11.5779,\n    },\n    phone: '+49 921 400-0',\n    emergency: '+49 921 400-5401',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-landshut',\n    name: 'Klinikum Landshut',\n    type: 'primary',\n    address: 'Robert-Koch-Str. 1, 84034 Landshut',\n    coordinates: {\n      lat: 48.5436,\n      lng: 12.1619,\n    },\n    phone: '+49 871 698-0',\n    emergency: '+49 871 698-3333',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-rosenheim',\n    name: 'RoMed Klinikum Rosenheim',\n    type: 'primary',\n    address: 'Pettenkoferstr. 10, 83022 Rosenheim',\n    coordinates: {\n      lat: 47.8567,\n      lng: 12.1265,\n    },\n    phone: '+49 8031 365-0',\n    emergency: '+49 8031 365-3711',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-memmingen',\n    name: 'Klinikum Memmingen',\n    type: 'primary',\n    address: 'Bismarckstr. 23, 87700 Memmingen',\n    coordinates: {\n      lat: 47.9833,\n      lng: 10.1833,\n    },\n    phone: '+49 8331 70-0',\n    emergency: '+49 8331 70-2500',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-kempten',\n    name: 'Klinikum Kempten-Oberallgäu',\n    type: 'primary',\n    address: 'Robert-Weixler-Str. 50, 87439 Kempten',\n    coordinates: {\n      lat: 47.7261,\n      lng: 10.3097,\n    },\n    phone: '+49 831 530-0',\n    emergency: '+49 831 530-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-coburg',\n    name: 'Klinikum Coburg',\n    type: 'primary',\n    address: 'Ketschendorfer Str. 33, 96450 Coburg',\n    coordinates: {\n      lat: 50.2596,\n      lng: 10.9685,\n    },\n    phone: '+49 9561 22-0',\n    emergency: '+49 9561 22-6300',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-aschaffenburg',\n    name: 'Klinikum Aschaffenburg-Alzenau',\n    type: 'primary',\n    address: 'Am Hasenkopf 1, 63739 Aschaffenburg',\n    coordinates: {\n      lat: 49.9747,\n      lng: 9.1581,\n    },\n    phone: '+49 6021 32-0',\n    emergency: '+49 6021 32-2700',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n\n  // Additional smaller stroke units in Bayern\n  {\n    id: 'goldberg-klinik-kelheim',\n    name: 'Goldberg-Klinik Kelheim',\n    type: 'primary',\n    address: 'Traubenweg 3, 93309 Kelheim',\n    coordinates: {\n      lat: 48.9166,\n      lng: 11.8742,\n    },\n    phone: '+49 9441 702-0',\n    emergency: '+49 9441 702-6800',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-deggendorf',\n    name: 'DONAUISAR Klinikum Deggendorf',\n    type: 'primary',\n    address: 'Perlasberger Str. 41, 94469 Deggendorf',\n    coordinates: {\n      lat: 48.8372,\n      lng: 12.9619,\n    },\n    phone: '+49 991 380-0',\n    emergency: '+49 991 380-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-straubing',\n    name: 'Klinikum St. Elisabeth Straubing',\n    type: 'primary',\n    address: 'St.-Elisabeth-Str. 23, 94315 Straubing',\n    coordinates: {\n      lat: 48.8742,\n      lng: 12.5733,\n    },\n    phone: '+49 9421 710-0',\n    emergency: '+49 9421 710-2000',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-freising',\n    name: 'Klinikum Freising',\n    type: 'primary',\n    address: 'Mainburger Str. 29, 85356 Freising',\n    coordinates: {\n      lat: 48.4142,\n      lng: 11.7461,\n    },\n    phone: '+49 8161 24-0',\n    emergency: '+49 8161 24-2800',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-erding',\n    name: 'Klinikum Landkreis Erding',\n    type: 'primary',\n    address: 'Bajuwarenstr. 5, 85435 Erding',\n    coordinates: {\n      lat: 48.3061,\n      lng: 11.9067,\n    },\n    phone: '+49 8122 59-0',\n    emergency: '+49 8122 59-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'helios-dachau',\n    name: 'Helios Amper-Klinikum Dachau',\n    type: 'primary',\n    address: 'Krankenhausstr. 15, 85221 Dachau',\n    coordinates: {\n      lat: 48.2599,\n      lng: 11.4342,\n    },\n    phone: '+49 8131 76-0',\n    emergency: '+49 8131 76-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n  {\n    id: 'klinikum-fuerstenfeldbruck',\n    name: 'Klinikum Fürstenfeldbruck',\n    type: 'primary',\n    address: 'Dachauer Str. 33, 82256 Fürstenfeldbruck',\n    coordinates: {\n      lat: 48.1772,\n      lng: 11.2578,\n    },\n    phone: '+49 8141 99-0',\n    emergency: '+49 8141 99-2201',\n    services: ['stroke_unit', 'telemedicine'],\n    certified: true,\n    certification: 'DSG',\n    lastUpdated: '2024-08-01',\n  },\n];\n\n// Helper functions for stroke center data\nexport function getStrokeCentersByType(type) {\n  return strokeCenters.filter((center) => center.type === type);\n}\n\nexport function getComprehensiveStrokeCenters() {\n  return getStrokeCentersByType('comprehensive');\n}\n\nexport function getPrimaryStrokeCenters() {\n  return getStrokeCentersByType('primary');\n}\n\nexport function getStrokeCenterById(id) {\n  return strokeCenters.find((center) => center.id === id);\n}\n\n// Calculate distance between two coordinates using Haversine formula (fallback)\nexport function calculateDistance(lat1, lng1, lat2, lng2) {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRadians(lat2 - lat1);\n  const dLng = toRadians(lng2 - lng1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2)\n    + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2))\n    * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nfunction toRadians(degrees) {\n  return degrees * (Math.PI / 180);\n}\n\n// Calculate travel time using OpenRoute Service API\nexport async function calculateTravelTime(fromLat, fromLng, toLat, toLng, profile = 'driving-car') {\n  try {\n    // Using OpenRoute Service (free tier)\n    const url = `https://api.openrouteservice.org/v2/directions/${profile}`;\n    const body = {\n      coordinates: [[fromLng, fromLat], [toLng, toLat]],\n      radiuses: [1000, 1000], // Allow 1km radius for routing\n      format: 'json',\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8',\n        Authorization: '5b3ce3597851110001cf624868c4c27b63ae476c9c26c8bffbc35688', // Free tier key\n        'Content-Type': 'application/json; charset=utf-8',\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Routing API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data.routes && data.routes.length > 0) {\n      const route = data.routes[0];\n      return {\n        duration: Math.round(route.summary.duration / 60), // Convert to minutes\n        distance: Math.round(route.summary.distance / 1000), // Convert to km\n        source: 'routing',\n      };\n    }\n    throw new Error('No route found');\n  } catch (error) {\n    // Enhanced CORS-aware fallback to distance-based time estimation\n    let source = 'estimated';\n\n    // Detect CORS errors specifically\n    if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\n      console.info('[TravelTime] OpenRouteService blocked by CORS, using distance estimation');\n      source = 'cors-fallback';\n    } else if (error.message.includes('signal')) {\n      console.info('[TravelTime] OpenRouteService timeout, using distance estimation');\n      source = 'timeout-fallback';\n    } else {\n      console.info('[TravelTime] OpenRouteService error, using distance estimation:', error.message);\n      source = 'error-fallback';\n    }\n\n    // Fallback to distance-based time estimation\n    const distance = calculateDistance(fromLat, fromLng, toLat, toLng);\n    const estimatedTime = Math.round(distance / 0.8); // Assume 48 km/h average (urban + highway)\n\n    return {\n      duration: estimatedTime,\n      distance: Math.round(distance),\n      source,\n    };\n  }\n}\n\n// Enhanced travel time calculation for emergency vehicles\nexport async function calculateEmergencyTravelTime(fromLat, fromLng, toLat, toLng) {\n  try {\n    // For emergency vehicles, we can use a faster profile and adjust\n    const result = await calculateTravelTime(fromLat, fromLng, toLat, toLng, 'driving-car');\n\n    // Reduce time by 25% for emergency vehicle (sirens, priority routing)\n    const emergencyDuration = Math.round(result.duration * 0.75);\n\n    return {\n      duration: emergencyDuration,\n      distance: result.distance,\n      source: result.source === 'routing' ? 'emergency-routing' : 'emergency-estimated',\n    };\n  } catch (error) {\n    // Fallback calculation\n    const distance = calculateDistance(fromLat, fromLng, toLat, toLng);\n    const emergencyTime = Math.round(distance / 1.2); // Assume 72 km/h for emergency vehicles\n\n    return {\n      duration: emergencyTime,\n      distance: Math.round(distance),\n      source: 'emergency-estimated',\n    };\n  }\n}\n\n// Find nearest stroke centers with travel time calculation\nexport async function findNearestStrokeCentersWithTravelTime(lat, lng, maxResults = 5, maxTime = 120, useEmergencyRouting = true) {\n  // ('Calculating travel times to stroke centers...');\n\n  const centersWithTravelTime = await Promise.all(\n    strokeCenters.map(async (center) => {\n      try {\n        const travelInfo = useEmergencyRouting\n          ? await calculateEmergencyTravelTime(lat, lng, center.coordinates.lat, center.coordinates.lng)\n          : await calculateTravelTime(lat, lng, center.coordinates.lat, center.coordinates.lng);\n\n        return {\n          ...center,\n          travelTime: travelInfo.duration,\n          distance: travelInfo.distance,\n          travelSource: travelInfo.source,\n        };\n      } catch (error) {\n        // (`Failed to calculate travel time to ${center.name}:`, error);\n        // Fallback to distance calculation\n        const distance = calculateDistance(lat, lng, center.coordinates.lat, center.coordinates.lng);\n        return {\n          ...center,\n          travelTime: Math.round(distance / 0.8), // Estimate: 48 km/h average\n          distance: Math.round(distance),\n          travelSource: 'fallback',\n        };\n      }\n    }),\n  );\n\n  return centersWithTravelTime\n    .filter((center) => center.travelTime <= maxTime)\n    .sort((a, b) => a.travelTime - b.travelTime)\n    .slice(0, maxResults);\n}\n\n// Find nearest stroke centers using distance (fallback/fast method)\nexport function findNearestStrokeCenters(lat, lng, maxResults = 5, maxDistance = 100) {\n  const centersWithDistance = strokeCenters.map((center) => ({\n    ...center,\n    distance: calculateDistance(lat, lng, center.coordinates.lat, center.coordinates.lng),\n  }));\n\n  return centersWithDistance\n    .filter((center) => center.distance <= maxDistance)\n    .sort((a, b) => a.distance - b.distance)\n    .slice(0, maxResults);\n}\n\n// Get stroke center recommendations with travel time (async)\nexport async function getRecommendedStrokeCentersWithTravelTime(lat, lng, conditionType = 'stroke') {\n  const nearestCenters = await findNearestStrokeCentersWithTravelTime(lat, lng, 10, 120, true);\n\n  if (conditionType === 'lvo' || conditionType === 'thrombectomy') {\n    // For LVO cases, prioritize comprehensive stroke centers within 60 minutes\n    const comprehensive = nearestCenters.filter((center) => center.type === 'comprehensive'\n      && center.services.includes('thrombectomy')\n      && center.travelTime <= 60);\n\n    const primary = nearestCenters.filter((center) => center.type === 'primary');\n\n    return {\n      recommended: comprehensive.slice(0, 3),\n      alternative: primary.slice(0, 2),\n    };\n  }\n\n  // For ICH cases, prioritize neurosurgical capabilities\n  if (conditionType === 'ich') {\n    const neurosurgical = nearestCenters.filter((center) => center.services.includes('neurosurgery')\n      && center.travelTime <= 45);\n\n    return {\n      recommended: neurosurgical.slice(0, 3),\n      alternative: nearestCenters.filter((c) => !neurosurgical.includes(c)).slice(0, 2),\n    };\n  }\n\n  // For general stroke cases, return nearest centers regardless of type\n  return {\n    recommended: nearestCenters.slice(0, 5),\n    alternative: [],\n  };\n}\n\n// Get stroke center recommendations based on patient condition (fallback - distance only)\nexport function getRecommendedStrokeCenters(lat, lng, conditionType = 'stroke') {\n  const nearestCenters = findNearestStrokeCenters(lat, lng, 10);\n\n  if (conditionType === 'lvo' || conditionType === 'thrombectomy') {\n    // For LVO cases, prioritize comprehensive stroke centers\n    const comprehensive = nearestCenters.filter((center) => center.type === 'comprehensive'\n      && center.services.includes('thrombectomy'));\n\n    const primary = nearestCenters.filter((center) => center.type === 'primary');\n\n    return {\n      recommended: comprehensive.slice(0, 3),\n      alternative: primary.slice(0, 2),\n    };\n  }\n\n  // For general stroke cases, return nearest centers regardless of type\n  return {\n    recommended: nearestCenters.slice(0, 5),\n    alternative: [],\n  };\n}\n","// GPS-based stroke center map component\nimport { COMPREHENSIVE_HOSPITAL_DATABASE, ROUTING_ALGORITHM } from '../../data/comprehensive-stroke-centers.js';\nimport { calculateDistance, calculateTravelTime, calculateEmergencyTravelTime } from '../../data/stroke-centers.js';\nimport { t } from '../../localization/i18n.js';\nimport { safeSetInnerHTML } from '../../security/html-sanitizer.js';\n\nexport function renderStrokeCenterMap(results) {\n  return `\n    <div class=\"stroke-center-section\">\n      <h3>🏥 ${t('nearestCentersTitle')}</h3>\n      <div id=\"locationContainer\">\n        <div class=\"location-controls\">\n          <button type=\"button\" id=\"useGpsButton\" class=\"secondary\">\n            📍 ${t('useCurrentLocation')}\n          </button>\n          <div class=\"location-manual\" style=\"display: none;\">\n            <input type=\"text\" id=\"locationInput\" placeholder=\"${t('enterLocationPlaceholder') || 'e.g. München, Köln, Stuttgart, or 48.1351, 11.5820'}\" />\n            <button type=\"button\" id=\"searchLocationButton\" class=\"secondary\">${t('search')}</button>\n          </div>\n          <button type=\"button\" id=\"manualLocationButton\" class=\"secondary\">\n            ✏️ ${t('enterManually')}\n          </button>\n        </div>\n        <div id=\"strokeCenterResults\" class=\"stroke-center-results\"></div>\n      </div>\n    </div>\n  `;\n}\n\nexport function initializeStrokeCenterMap(results) {\n  console.log('[StrokeMap] Initializing stroke center map with results:', results);\n\n  const useGpsButton = document.getElementById('useGpsButton');\n  const manualLocationButton = document.getElementById('manualLocationButton');\n  const locationManual = document.querySelector('.location-manual');\n  const locationInput = document.getElementById('locationInput');\n  const searchLocationButton = document.getElementById('searchLocationButton');\n  const resultsContainer = document.getElementById('strokeCenterResults');\n\n  console.log('[StrokeMap] Found elements:', {\n    useGpsButton: !!useGpsButton,\n    manualLocationButton: !!manualLocationButton,\n    locationManual: !!locationManual,\n    locationInput: !!locationInput,\n    searchLocationButton: !!searchLocationButton,\n    resultsContainer: !!resultsContainer,\n  });\n\n  if (useGpsButton) {\n    useGpsButton.addEventListener('click', () => {\n      requestUserLocation(results, resultsContainer);\n    });\n  }\n\n  if (manualLocationButton) {\n    manualLocationButton.addEventListener('click', () => {\n      locationManual.style.display = locationManual.style.display === 'none' ? 'block' : 'none';\n    });\n  }\n\n  if (searchLocationButton) {\n    searchLocationButton.addEventListener('click', () => {\n      const location = locationInput.value.trim();\n      if (location) {\n        geocodeLocation(location, results, resultsContainer);\n      }\n    });\n  }\n\n  if (locationInput) {\n    locationInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        const location = locationInput.value.trim();\n        if (location) {\n          geocodeLocation(location, results, resultsContainer);\n        }\n      }\n    });\n  }\n}\n\nfunction requestUserLocation(results, resultsContainer) {\n  if (!navigator.geolocation) {\n    showLocationError(t('geolocationNotSupported'), resultsContainer);\n    return;\n  }\n\n  try {\n    safeSetInnerHTML(resultsContainer, `<div class=\"loading\">${t('gettingLocation')}...</div>`);\n  } catch (error) {\n    resultsContainer.textContent = 'Getting location...';\n    console.error('Sanitization failed:', error);\n  }\n\n  navigator.geolocation.getCurrentPosition(\n    (position) => {\n      const { latitude, longitude } = position.coords;\n      showNearestCenters(latitude, longitude, results, resultsContainer);\n    },\n    (error) => {\n      let errorMessage = t('locationError');\n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          errorMessage = t('locationPermissionDenied');\n          break;\n        case error.POSITION_UNAVAILABLE:\n          errorMessage = t('locationUnavailable');\n          break;\n        case error.TIMEOUT:\n          errorMessage = t('locationTimeout');\n          break;\n      }\n      showLocationError(errorMessage, resultsContainer);\n    },\n    {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 300000, // 5 minutes\n    },\n  );\n}\n\nasync function geocodeLocation(locationString, results, resultsContainer) {\n  try {\n    safeSetInnerHTML(resultsContainer, `<div class=\"loading\">${t('searchingLocation')}...</div>`);\n  } catch (error) {\n    resultsContainer.textContent = 'Searching location...';\n    console.error('Sanitization failed:', error);\n  }\n\n  // Check if user entered coordinates (format: lat, lng or lat,lng)\n  const coordPattern = /^(-?\\d+\\.?\\d*)\\s*,\\s*(-?\\d+\\.?\\d*)$/;\n  const coordMatch = locationString.trim().match(coordPattern);\n\n  if (coordMatch) {\n    // Direct coordinate input\n    const lat = parseFloat(coordMatch[1]);\n    const lng = parseFloat(coordMatch[2]);\n\n    // Validate coordinates are within supported German states (Bayern, BW, NRW)\n    if (lat >= 47.2 && lat <= 52.5 && lng >= 5.9 && lng <= 15.0) {\n      try {\n        safeSetInnerHTML(resultsContainer, `\n          <div class=\"location-success\">\n            <p>📍 Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n          </div>\n        `);\n      } catch (error) {\n        resultsContainer.textContent = `Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;\n        console.error('Sanitization failed:', error);\n      }\n      setTimeout(() => {\n        showNearestCenters(lat, lng, results, resultsContainer);\n      }, 500);\n      return;\n    }\n    showLocationError('Coordinates appear to be outside Germany. Please check the values.', resultsContainer);\n    return;\n  }\n\n  try {\n    // Clean up the location string\n    let searchLocation = locationString.trim();\n\n    // If it doesn't already include country info, add it\n    if (!searchLocation.toLowerCase().includes('deutschland')\n        && !searchLocation.toLowerCase().includes('germany')\n        && !searchLocation.toLowerCase().includes('bayern')\n        && !searchLocation.toLowerCase().includes('bavaria')\n        && !searchLocation.toLowerCase().includes('nordrhein')\n        && !searchLocation.toLowerCase().includes('baden')) {\n      searchLocation += ', Deutschland';\n    }\n\n    // Use Nominatim (OpenStreetMap) geocoding service - free and reliable\n    // Note: encodeURIComponent properly handles umlauts (ä, ö, ü, ß)\n    const encodedLocation = encodeURIComponent(searchLocation);\n    const url = `https://nominatim.openstreetmap.org/search?q=${encodedLocation}&countrycodes=de&format=json&limit=3&addressdetails=1`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': 'iGFAP-StrokeTriage/2.1.0', // Required by Nominatim\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Geocoding API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data && data.length > 0) {\n      // Prefer results from supported states (Bayern, Baden-Württemberg, NRW)\n      let location = data[0];\n      const supportedStates = ['Bayern', 'Baden-Württemberg', 'Nordrhein-Westfalen'];\n\n      for (const result of data) {\n        if (result.address && supportedStates.includes(result.address.state)) {\n          location = result;\n          break;\n        }\n      }\n\n      const lat = parseFloat(location.lat);\n      const lng = parseFloat(location.lon);\n      const locationName = location.display_name || locationString;\n\n      // Show success message and then proceed with location\n      try {\n        safeSetInnerHTML(resultsContainer, `\n          <div class=\"location-success\">\n            <p>📍 Found: ${locationName}</p>\n            <small style=\"color: #666;\">Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}</small>\n          </div>\n        `);\n      } catch (error) {\n        resultsContainer.textContent = `Found: ${locationName} (${lat.toFixed(4)}, ${lng.toFixed(4)})`;\n        console.error('Sanitization failed:', error);\n      }\n\n      // Wait a moment to show the found location, then show centers\n      setTimeout(() => {\n        showNearestCenters(lat, lng, results, resultsContainer);\n      }, 1000);\n    } else {\n      showLocationError(`\n        <strong>Location \"${locationString}\" not found.</strong><br>\n        <small>Try:</small>\n        <ul style=\"text-align: left; font-size: 0.9em; margin: 10px 0;\">\n          <li>City name: \"München\", \"Köln\", \"Stuttgart\"</li>\n          <li>Address: \"Marienplatz 1, München\"</li>\n          <li>Coordinates: \"48.1351, 11.5820\"</li>\n        </ul>\n      `, resultsContainer);\n    }\n  } catch (error) {\n    // ('Geocoding failed:', error);\n    showLocationError(`\n      <strong>Unable to search location.</strong><br>\n      <small>Please try entering coordinates directly (e.g., \"48.1351, 11.5820\")</small>\n    `, resultsContainer);\n  }\n}\n\nasync function showNearestCenters(lat, lng, results, resultsContainer) {\n  const location = { lat, lng };\n\n  // Use the enhanced routing algorithm\n  const routing = ROUTING_ALGORITHM.routePatient({\n    location,\n    ichProbability: results?.ich?.probability || 0,\n    timeFromOnset: results?.timeFromOnset || null,\n    clinicalFactors: results?.clinicalFactors || {},\n  });\n\n  if (!routing || !routing.destination) {\n    try {\n      safeSetInnerHTML(resultsContainer, `\n        <div class=\"location-error\">\n          <p>⚠️ No suitable stroke centers found in this area.</p>\n          <p><small>Please try a different location or contact emergency services directly.</small></p>\n        </div>\n      `);\n    } catch (error) {\n      resultsContainer.textContent = 'No suitable stroke centers found in this area. Please try a different location or contact emergency services directly.';\n      console.error('Sanitization failed:', error);\n    }\n    return;\n  }\n\n  // Generate routing explanation\n  const routingExplanation = getEnhancedRoutingExplanation(routing, results);\n\n  // Show loading state\n  try {\n    safeSetInnerHTML(resultsContainer, `\n      <div class=\"location-info\">\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        <p><strong>Detected State:</strong> ${getStateName(routing.state)}</p>\n      </div>\n      <div class=\"loading\">${t('calculatingTravelTimes')}...</div>\n    `);\n  } catch (error) {\n    resultsContainer.textContent = `Your Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}. Calculating travel times...`;\n    console.error('Sanitization failed:', error);\n  }\n\n  try {\n    // Get all relevant hospitals for this routing decision\n    const database = COMPREHENSIVE_HOSPITAL_DATABASE[routing.state];\n    const allHospitals = [\n      ...database.neurosurgicalCenters,\n      ...database.comprehensiveStrokeCenters,\n      ...database.regionalStrokeUnits,\n      ...(database.thrombolysisHospitals || []),\n    ];\n\n    // Add distance and travel time to primary destination\n    const { destination } = routing;\n    destination.distance = calculateDistance(lat, lng, destination.coordinates.lat, destination.coordinates.lng);\n\n    try {\n      const travelInfo = await calculateEmergencyTravelTime(lat, lng, destination.coordinates.lat, destination.coordinates.lng);\n      destination.travelTime = travelInfo.duration;\n      destination.travelSource = travelInfo.source;\n    } catch (error) {\n      destination.travelTime = Math.round(destination.distance / 0.8); // Estimate\n      destination.travelSource = 'estimated';\n    }\n\n    // Find 3-4 alternative hospitals nearby\n    const alternatives = allHospitals\n      .filter((h) => h.id !== destination.id)\n      .map((hospital) => ({\n        ...hospital,\n        distance: calculateDistance(lat, lng, hospital.coordinates.lat, hospital.coordinates.lng),\n      }))\n      .sort((a, b) => a.distance - b.distance)\n      .slice(0, 3);\n\n    console.log('🏥 Stroke Center Debug:', {\n      primaryDestination: destination.name,\n      alternativesCount: alternatives.length,\n      alternativeNames: alternatives.map((alt) => alt.name),\n      allHospitalsCount: allHospitals.length,\n      routingState: routing.state,\n    });\n\n    // Add travel times to alternatives\n    for (const alt of alternatives) {\n      try {\n        const travelInfo = await calculateEmergencyTravelTime(lat, lng, alt.coordinates.lat, alt.coordinates.lng);\n        alt.travelTime = travelInfo.duration;\n        alt.travelSource = travelInfo.source;\n      } catch (error) {\n        alt.travelTime = Math.round(alt.distance / 0.8);\n        alt.travelSource = 'estimated';\n      }\n    }\n\n    const html = `\n      <div class=\"location-info\">\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        <p><strong>State:</strong> ${getStateName(routing.state)}</p>\n        ${routingExplanation}\n      </div>\n      \n      <div class=\"recommended-centers\">\n        <h4>🏥 ${routing.urgency === 'IMMEDIATE' ? 'Emergency' : 'Recommended'} Destination</h4>\n        ${renderEnhancedStrokeCenterCard(destination, true, routing)}\n      </div>\n      \n      ${alternatives.length > 0 ? `\n        <div class=\"alternative-centers\">\n          <h4>Alternative Centers</h4>\n          ${alternatives.map((alt) => renderEnhancedStrokeCenterCard(alt, false, routing)).join('')}\n        </div>\n      ` : ''}\n      \n      <div class=\"travel-time-note\">\n        <small>${t('travelTimeNote') || 'Travel times estimated for emergency vehicles'}</small>\n      </div>\n    `;\n\n    try {\n      // Use safer DOM manipulation instead of innerHTML\n      resultsContainer.innerHTML = ''; // Clear first\n\n      // Create main container\n      const mainDiv = document.createElement('div');\n      mainDiv.className = 'stroke-center-enhanced';\n\n      // Add location info\n      const locationDiv = document.createElement('div');\n      locationDiv.className = 'location-info';\n      locationDiv.innerHTML = `\n        <p><strong>Your Location:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        <p><strong>State:</strong> ${getStateName(routing.state)}</p>\n        ${routingExplanation}\n      `;\n      mainDiv.appendChild(locationDiv);\n\n      // Add primary destination\n      const primaryDiv = document.createElement('div');\n      primaryDiv.className = 'recommended-centers';\n      primaryDiv.innerHTML = `<h4>🏥 ${routing.urgency === 'IMMEDIATE' ? 'Emergency' : 'Recommended'} Destination</h4>`;\n\n      const primaryCard = createStrokeCenterCard(destination, true, routing);\n      primaryDiv.appendChild(primaryCard);\n      mainDiv.appendChild(primaryDiv);\n\n      // Add alternatives if they exist\n      if (alternatives.length > 0) {\n        const altDiv = document.createElement('div');\n        altDiv.className = 'alternative-centers';\n        altDiv.innerHTML = '<h4>Alternative Centers</h4>';\n\n        alternatives.forEach((alt) => {\n          const altCard = createStrokeCenterCard(alt, false, routing);\n          altDiv.appendChild(altCard);\n        });\n\n        mainDiv.appendChild(altDiv);\n      }\n\n      // Add travel time note\n      const noteDiv = document.createElement('div');\n      noteDiv.className = 'travel-time-note';\n      noteDiv.innerHTML = '<small>Travel times estimated for emergency vehicles</small>';\n      mainDiv.appendChild(noteDiv);\n\n      resultsContainer.appendChild(mainDiv);\n\n      // Add event listeners after DOM creation\n      addStrokeCenterEventListeners(resultsContainer);\n    } catch (error) {\n      console.error('🚨 Stroke Center Display Error:', error);\n\n      // Fallback to simple display\n      resultsContainer.innerHTML = `\n        <div class=\"stroke-center-fallback\">\n          <h4>🏥 Recommended Center</h4>\n          <p><strong>${routing?.destination?.name || 'Unknown Hospital'}</strong></p>\n          <p>📍 ${routing?.destination?.address || 'Address not available'}</p>\n          <p>📞 ${routing?.destination?.emergency || routing?.destination?.phone || 'Phone not available'}</p>\n          <p>📏 Distance: ${routing?.destination?.distance?.toFixed(1) || '?'} km</p>\n          ${alternatives?.length > 0 ? `<p><strong>+ ${alternatives.length} alternative centers nearby</strong></p>` : ''}\n        </div>\n      `;\n    }\n  } catch (error) {\n    // ('Enhanced routing failed, using basic display:', error);\n\n    // Fallback to basic display\n    try {\n      safeSetInnerHTML(resultsContainer, `\n        <div class=\"location-info\">\n          <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n          ${routingExplanation}\n        </div>\n\n        <div class=\"recommended-centers\">\n          <h4>Recommended Center</h4>\n          <div class=\"stroke-center-card recommended\">\n            <div class=\"center-header\">\n              <h5>${routing.destination.name}</h5>\n              <span class=\"distance\">${routing.destination.distance?.toFixed(1) || '?'} km</span>\n            </div>\n            <div class=\"center-details\">\n              <p class=\"address\">📍 ${routing.destination.address}</p>\n              <p class=\"phone\">📞 ${routing.destination.emergency || routing.destination.phone}</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"routing-reasoning\">\n          <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\n        </div>\n      `);\n    } catch (error) {\n      resultsContainer.textContent = `Your Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}. Recommended Center: ${routing.destination.name} - ${routing.destination.distance?.toFixed(1) || '?'} km`;\n      console.error('Sanitization failed:', error);\n    }\n  }\n}\n\nfunction renderStrokeCenterList(centers, isRecommended = false) {\n  if (!centers || centers.length === 0) {\n    return `<p>${t('noCentersFound')}</p>`;\n  }\n\n  return centers.map((center) => `\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'}\">\n      <div class=\"center-header\">\n        <h5>${center.name}</h5>\n        <span class=\"center-type ${center.type}\">${t(`${center.type}Center`)}</span>\n        ${center.travelTime ? `\n          <span class=\"travel-time\">\n            <span class=\"time\">${center.travelTime} ${t('minutes')}</span>\n            <span class=\"distance\">(${center.distance} km)</span>\n          </span>\n        ` : `\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n        `}\n      </div>\n      \n      <div class=\"center-details\">\n        <p class=\"address\">📍 ${center.address}</p>\n        <p class=\"phone\">📞 ${t('emergency')}: ${center.emergency}</p>\n        \n        <div class=\"services\">\n          ${center.services.map((service) => `\n            <span class=\"service-badge\">${t(service)}</span>\n          `).join('')}\n        </div>\n        \n        ${center.certified ? `\n          <div class=\"certification\">\n            ✅ ${t('certified')}: ${center.certification}\n          </div>\n        ` : ''}\n      </div>\n      \n      <div class=\"center-actions\">\n        <button class=\"call-button\" data-phone=\"${center.emergency}\">\n          📞 ${t('call')}\n        </button>\n        <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\n          🧭 ${t('directions')}\n        </button>\n      </div>\n    </div>\n  `).join('');\n}\n\n// Helper functions for enhanced routing system\nfunction getStateName(stateCode) {\n  const stateNames = {\n    bayern: 'Bayern (Bavaria)',\n    badenWuerttemberg: 'Baden-Württemberg',\n    nordrheinWestfalen: 'Nordrhein-Westfalen (NRW)',\n  };\n  return stateNames[stateCode] || stateCode;\n}\n\nfunction getEnhancedRoutingExplanation(routing, results) {\n  const ichPercent = Math.round((results?.ich?.probability || 0) * 100);\n\n  let urgencyIcon = '🏥';\n  if (routing.urgency === 'IMMEDIATE') {\n    urgencyIcon = '🚨';\n  } else if (routing.urgency === 'TIME_CRITICAL') {\n    urgencyIcon = '⏰';\n  } else if (routing.urgency === 'URGENT') {\n    urgencyIcon = '⚠️';\n  }\n\n  return `\n    <div class=\"routing-explanation ${routing.category.toLowerCase()}\">\n      <div class=\"routing-header\">\n        <strong>${urgencyIcon} ${routing.category.replace('_', ' ')} - ${routing.urgency}</strong>\n      </div>\n      <div class=\"routing-details\">\n        <p><strong>ICH Risk:</strong> ${ichPercent}% ${routing.threshold ? `(${routing.threshold})` : ''}</p>\n        ${routing.timeWindow ? `<p><strong>Time Window:</strong> ${routing.timeWindow}</p>` : ''}\n        <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\n        <p><strong>Pre-Alert:</strong> ${routing.preAlert}</p>\n        ${routing.bypassLocal ? '<p class=\"bypass-warning\">⚠️ Bypassing local hospitals</p>' : ''}\n      </div>\n    </div>\n  `;\n}\n\nfunction renderEnhancedStrokeCenterCard(center, isRecommended, routing) {\n  const capabilities = [];\n  if (center.neurosurgery) {\n    capabilities.push('🧠 Neurosurgery');\n  }\n  if (center.thrombectomy) {\n    capabilities.push('🩸 Thrombectomy');\n  }\n  if (center.thrombolysis) {\n    capabilities.push('💉 Thrombolysis');\n  }\n\n  const networkBadge = center.network ? `<span class=\"network-badge\">${center.network}</span>` : '';\n\n  return `\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'} enhanced\">\n      <div class=\"center-header\">\n        <h5>${center.name}</h5>\n        <div class=\"center-badges\">\n          ${center.neurosurgery ? '<span class=\"capability-badge neurosurgery\">NS</span>' : ''}\n          ${center.thrombectomy ? '<span class=\"capability-badge thrombectomy\">TE</span>' : ''}\n          ${networkBadge}\n        </div>\n      </div>\n      \n      <div class=\"center-metrics\">\n        ${center.travelTime ? `\n          <div class=\"travel-info\">\n            <span class=\"travel-time\">${center.travelTime} min</span>\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n          </div>\n        ` : `\n          <div class=\"distance-only\">\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n          </div>\n        `}\n        <div class=\"bed-info\">\n          <span class=\"beds\">${center.beds} beds</span>\n        </div>\n      </div>\n      \n      <div class=\"center-details\">\n        <p class=\"address\">📍 ${center.address}</p>\n        <p class=\"phone\">📞 ${center.emergency || center.phone}</p>\n        \n        ${capabilities.length > 0 ? `\n          <div class=\"capabilities\">\n            ${capabilities.join(' • ')}\n          </div>\n        ` : ''}\n      </div>\n      \n      <div class=\"center-actions\">\n        <button class=\"call-button\" data-phone=\"${center.emergency || center.phone}\">\n          📞 Call\n        </button>\n        <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\n          🧭 Directions\n        </button>\n      </div>\n    </div>\n  `;\n}\n\nfunction createStrokeCenterCard(center, isRecommended, routing) {\n  const card = document.createElement('div');\n  card.className = `stroke-center-card ${isRecommended ? 'recommended' : 'alternative'} enhanced`;\n\n  const capabilities = [];\n  if (center.neurosurgery) {\n    capabilities.push('🧠 Neurosurgery');\n  }\n  if (center.thrombectomy) {\n    capabilities.push('🩸 Thrombectomy');\n  }\n  if (center.thrombolysis) {\n    capabilities.push('💉 Thrombolysis');\n  }\n\n  const networkBadge = center.network ? `<span class=\"network-badge\">${center.network}</span>` : '';\n\n  card.innerHTML = `\n    <div class=\"center-header\">\n      <h5>${center.name}</h5>\n      <div class=\"center-badges\">\n        ${center.neurosurgery ? '<span class=\"capability-badge neurosurgery\">NS</span>' : ''}\n        ${center.thrombectomy ? '<span class=\"capability-badge thrombectomy\">TE</span>' : ''}\n        ${networkBadge}\n      </div>\n    </div>\n\n    <div class=\"center-metrics\">\n      ${center.travelTime ? `\n        <div class=\"travel-info\">\n          <span class=\"travel-time\">${center.travelTime} min</span>\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n        </div>\n      ` : `\n        <div class=\"distance-only\">\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n        </div>\n      `}\n      <div class=\"bed-info\">\n        <span class=\"beds\">${center.beds} beds</span>\n      </div>\n    </div>\n\n    <div class=\"center-details\">\n      <p class=\"address\">📍 ${center.address}</p>\n      <p class=\"phone\">📞 ${center.emergency || center.phone}</p>\n\n      ${capabilities.length > 0 ? `\n        <div class=\"capabilities\">\n          ${capabilities.join(' • ')}\n        </div>\n      ` : ''}\n    </div>\n\n    <div class=\"center-actions\">\n      <button class=\"call-button\" data-phone=\"${center.emergency || center.phone}\">\n        📞 Call\n      </button>\n      <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\n        🧭 Directions\n      </button>\n    </div>\n  `;\n\n  return card;\n}\n\nfunction addStrokeCenterEventListeners(container) {\n  const callButtons = container.querySelectorAll('.call-button');\n  const directionsButtons = container.querySelectorAll('.directions-button');\n\n  callButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      const { phone } = button.dataset;\n      if (phone) {\n        window.open(`tel:${phone}`);\n      }\n    });\n  });\n\n  directionsButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      const { lat } = button.dataset;\n      const { lng } = button.dataset;\n      if (lat && lng) {\n        window.open(`https://maps.google.com/maps?daddr=${lat},${lng}`, '_blank');\n      }\n    });\n  });\n}\n\nfunction showLocationError(message, container) {\n  try {\n    safeSetInnerHTML(container, `\n      <div class=\"location-error\">\n        <p>⚠️ ${message}</p>\n        <p><small>${t('tryManualEntry')}</small></p>\n      </div>\n    `);\n  } catch (error) {\n    container.textContent = `Error: ${message}. ${t('tryManualEntry') || 'Try manual entry'}`;\n    console.error('Sanitization failed:', error);\n  }\n}\n","/**\n * Brain Visualization Component for ICH Volume Display\n * Creates an SVG-based brain hemorrhage visualization\n */\n\nimport {\n  calculateHemorrhageSizePercent, getVolumeColor, calculateICHVolume, formatVolumeDisplay,\n} from '../../logic/ich-volume-calculator.js';\n\n/**\n * Render brain visualization with hemorrhage overlay\n * @param {number} volume - ICH volume in ml\n * @param {string} size - 'compact' or 'detailed'\n * @returns {string} HTML string with SVG brain visualization\n */\nexport function renderBrainVisualization(volume, size = 'compact') {\n  const dimensions = size === 'compact' ? { width: 120, height: 120 } : { width: 200, height: 200 };\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  // Calculate hemorrhage appearance\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\n  const hemorrhageColor = getVolumeColor(volume);\n\n  // Scale hemorrhage radius based on volume (basal ganglia region, slightly off-center)\n  const maxRadius = dimensions.width * 0.25; // Maximum 25% of brain width\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius; // 70% is max brain area\n\n  // Position hemorrhage in basal ganglia region (slightly right of center)\n  const hemorrhageX = centerX + (dimensions.width * 0.1); // 10% right of center\n  const hemorrhageY = centerY + (dimensions.height * 0.05); // 5% below center\n\n  // 30ml reference circle (for detailed view)\n  const referenceRadius = (40 / 70) * maxRadius; // 40% brain area = 30ml threshold\n\n  // Animation for hemorrhage (subtle pulsing)\n  const animationId = `hemorrhage-pulse-${Math.random().toString(36).substr(2, 9)}`;\n\n  return `\n    <div class=\"brain-visualization ${size}\">\n      <svg \n        width=\"${dimensions.width}\" \n        height=\"${dimensions.height}\" \n        viewBox=\"0 0 ${dimensions.width} ${dimensions.height}\"\n        class=\"brain-svg\"\n        role=\"img\"\n        aria-label=\"Brain hemorrhage visualization showing ${volume.toFixed(1)}ml ICH volume\"\n      >\n        <!-- Brain outline with hemorrhage overlay -->\n        ${renderBrainOutlineWithHemorrhage(dimensions, volume)}\n        \n        <!-- 30ml reference indicator (detailed view only) -->\n        ${size === 'detailed' && volume > 0 ? `\n          <circle \n            cx=\"${hemorrhageX}\" \n            cy=\"${hemorrhageY}\" \n            r=\"${referenceRadius}\"\n            fill=\"none\" \n            stroke=\"#9ca3af\" \n            stroke-width=\"1\" \n            stroke-dasharray=\"3,3\"\n            opacity=\"0.5\"\n          />\n          <text \n            x=\"${hemorrhageX + referenceRadius + 5}\" \n            y=\"${hemorrhageY - referenceRadius}\" \n            font-size=\"10\" \n            fill=\"#6b7280\"\n            font-family=\"system-ui\"\n          >30ml</text>\n        ` : ''}\n        \n        <!-- Hemorrhage visualization -->\n        ${volume > 0 ? `\n          <circle \n            cx=\"${hemorrhageX}\" \n            cy=\"${hemorrhageY}\" \n            r=\"${hemorrhageRadius}\"\n            fill=\"${hemorrhageColor}\"\n            opacity=\"0.8\"\n            class=\"hemorrhage-circle\"\n          >\n            <!-- Subtle pulsing animation -->\n            <animate \n              attributeName=\"opacity\" \n              values=\"0.6;0.9;0.6\" \n              dur=\"2.5s\" \n              repeatCount=\"indefinite\"\n            />\n            ${hemorrhageRadius > 15 ? `\n            <animate \n              attributeName=\"r\" \n              values=\"${hemorrhageRadius * 0.95};${hemorrhageRadius};${hemorrhageRadius * 0.95}\" \n              dur=\"2.5s\" \n              repeatCount=\"indefinite\"\n            />\n            ` : ''}\n          </circle>\n          \n          <!-- Volume label (detailed view only) -->\n          ${size === 'detailed' ? `\n            <text \n              x=\"${centerX}\" \n              y=\"${dimensions.height - 10}\" \n              text-anchor=\"middle\" \n              font-size=\"12\" \n              font-weight=\"bold\"\n              fill=\"#374151\"\n              font-family=\"system-ui\"\n            >${volume < 1 ? '<1' : volume.toFixed(1)} ml</text>\n          ` : ''}\n        ` : ''}\n        \n        <style>\n          .hemorrhage-circle {\n            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));\n          }\n        </style>\n      </svg>\n    </div>\n  `;\n}\n\n/**\n * Load and render the provided brain SVG with hemorrhage overlay\n * @param {object} dimensions - Width and height for the brain\n * @returns {string} Brain SVG with embedded hemorrhage visualization\n */\nfunction renderBrainOutlineWithHemorrhage(dimensions, volume) {\n  // For performance, we'll use the SVG as a background image and overlay the hemorrhage\n  // This avoids loading the 530KB SVG content directly into the DOM\n\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  // Calculate hemorrhage position (basal ganglia region - slightly right and posterior)\n  const hemorrhageX = centerX + (dimensions.width * 0.08); // 8% right of center\n  const hemorrhageY = centerY + (dimensions.height * 0.03); // 3% below center\n\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\n  const hemorrhageColor = getVolumeColor(volume);\n  const maxRadius = dimensions.width * 0.25;\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius;\n\n  return `\n    <!-- 3D Brain image as background -->\n    <image \n      x=\"0\" \n      y=\"0\" \n      width=\"${dimensions.width}\" \n      height=\"${dimensions.height}\"\n      href=\"./src/assets/brain-3d.png\"\n      opacity=\"0.95\"\n      preserveAspectRatio=\"xMidYMid meet\"\n    />\n    \n    <!-- Hemorrhage overlay in basal ganglia region -->\n    ${volume > 0 ? `\n      <circle \n        cx=\"${hemorrhageX}\" \n        cy=\"${hemorrhageY}\" \n        r=\"${hemorrhageRadius}\"\n        fill=\"${hemorrhageColor}\"\n        opacity=\"0.85\"\n        class=\"hemorrhage-circle\"\n      >\n        <!-- Subtle pulsing animation -->\n        <animate \n          attributeName=\"opacity\" \n          values=\"0.7;0.95;0.7\" \n          dur=\"2.5s\" \n          repeatCount=\"indefinite\"\n        />\n        ${hemorrhageRadius > 8 ? `\n        <animate \n          attributeName=\"r\" \n          values=\"${hemorrhageRadius * 0.96};${hemorrhageRadius * 1.02};${hemorrhageRadius * 0.96}\" \n          dur=\"2.5s\" \n          repeatCount=\"indefinite\"\n        />\n        ` : ''}\n      </circle>\n      \n      <!-- Hemorrhage center highlight -->\n      <circle \n        cx=\"${hemorrhageX}\" \n        cy=\"${hemorrhageY}\" \n        r=\"${hemorrhageRadius * 0.3}\"\n        fill=\"${hemorrhageColor}\"\n        opacity=\"0.95\"\n        class=\"hemorrhage-center\"\n      />\n    ` : ''}\n  `;\n}\n\n/**\n * Temporary brain outline (for fallback when SVG file not available)\n */\nfunction renderTemporaryBrainOutline(dimensions) {\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  return `\n    <!-- Simplified brain outline -->\n    <ellipse \n      cx=\"${centerX}\" \n      cy=\"${centerY}\" \n      rx=\"${dimensions.width * 0.4}\" \n      ry=\"${dimensions.height * 0.35}\" \n      fill=\"#f1f5f9\" \n      stroke=\"#64748b\" \n      stroke-width=\"2\"\n      opacity=\"0.8\"\n    />\n    \n    <!-- Brain hemisphere division -->\n    <line \n      x1=\"${centerX}\" \n      y1=\"${centerY - dimensions.height * 0.25}\" \n      x2=\"${centerX}\" \n      y2=\"${centerY + dimensions.height * 0.25}\" \n      stroke=\"#9ca3af\" \n      stroke-width=\"1\" \n      opacity=\"0.5\"\n    />\n  `;\n}\n\n/**\n * Create compact brain icon for inline display\n * @param {number} volume - ICH volume in ml\n * @param {number} size - Icon size in pixels\n * @returns {string} Small brain icon with hemorrhage indicator\n */\nexport function renderCompactBrainIcon(volume, size = 24) {\n  const hemorrhageColor = getVolumeColor(volume);\n  const hemorrhageSize = volume > 0 ? Math.max(2, (volume / 50) * size * 0.3) : 0;\n\n  return `\n    <svg \n      width=\"${size}\" \n      height=\"${size}\" \n      viewBox=\"0 0 ${size} ${size}\"\n      class=\"brain-icon\"\n      style=\"display: inline-block; vertical-align: middle;\"\n    >\n      <!-- Simple brain outline -->\n      <ellipse \n        cx=\"${size / 2}\" \n        cy=\"${size / 2}\" \n        rx=\"${size * 0.4}\" \n        ry=\"${size * 0.35}\" \n        fill=\"#f1f5f9\" \n        stroke=\"#64748b\" \n        stroke-width=\"1\"\n      />\n      \n      <!-- Hemorrhage indicator -->\n      ${volume > 0 ? `\n        <circle \n          cx=\"${size / 2 + size * 0.1}\" \n          cy=\"${size / 2}\" \n          r=\"${hemorrhageSize}\"\n          fill=\"${hemorrhageColor}\"\n          opacity=\"0.9\"\n        />\n      ` : ''}\n    </svg>\n  `;\n}\n\n/**\n * Render circular brain display matching ICH risk circle style\n * @param {number} volume - ICH volume in ml\n * @returns {string} HTML for circular brain display\n */\nexport function renderCircularBrainDisplay(volume) {\n  if (!volume || volume <= 0) {\n    return `\n      <div class=\"volume-circle\" data-volume=\"0\">\n        <div class=\"volume-number\">0<span> ml</span></div>\n        <canvas class=\"volume-canvas\" width=\"120\" height=\"120\"></canvas>\n      </div>\n    `;\n  }\n\n  const formattedVolume = formatVolumeDisplay(volume);\n  const canvasId = `volume-canvas-${Math.random().toString(36).substr(2, 9)}`;\n\n  return `\n    <div class=\"volume-circle\" data-volume=\"${volume}\">\n      <div class=\"volume-number\">${formattedVolume}</div>\n      <canvas id=\"${canvasId}\" class=\"volume-canvas\" \n              data-volume=\"${volume}\" data-canvas-id=\"${canvasId}\"></canvas>\n    </div>\n  `;\n}\n\n/**\n * Initialize fluid fill animation for volume canvas\n * Call this after DOM is updated with new volume circles\n */\nexport function initializeVolumeAnimations() {\n  const canvases = document.querySelectorAll('.volume-canvas');\n\n  canvases.forEach((canvas) => {\n    // Set canvas internal size to match CSS size\n    const cssWidth = canvas.offsetWidth || 120;\n    const cssHeight = canvas.offsetHeight || 120;\n    canvas.width = cssWidth;\n    canvas.height = cssHeight;\n\n    const volume = parseFloat(canvas.dataset.volume) || 0;\n    if (volume > 0) {\n      drawVolumeFluid(canvas, volume);\n    }\n  });\n}\n\n/**\n * Draw fluid fill animation on canvas\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {number} volume - ICH volume in ml\n */\nfunction drawVolumeFluid(canvas, volume) {\n  const ctx = canvas.getContext('2d');\n  const centerX = canvas.width / 2;\n  const centerY = canvas.height / 2;\n  const radius = canvas.width * 0.45; // 45% of canvas width for the circle\n  let animationFrame = 0;\n  let isAnimating = true;\n\n  // Check dark mode once\n  const isDarkMode = document.body.classList.contains('dark-mode')\n                    || window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n  function draw() {\n    if (!isAnimating) {\n      return;\n    }\n\n    // Clear canvas completely\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Don't draw background - let CSS handle it\n    // Just draw the fluid and border\n    drawFluidLayer();\n  }\n\n  function drawFluidLayer() {\n    // Calculate fill level based on volume\n    const maxVolume = 80; // ml (practical maximum for visualization)\n    const fillPercentage = Math.min(volume / maxVolume, 0.9);\n    const fillHeight = fillPercentage * (radius * 1.8);\n    const baseLevel = centerY + radius - 4 - fillHeight;\n\n    // Draw fluid fill with waves\n    if (volume > 0) {\n      ctx.save();\n\n      // Clip to circle\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius - 4, 0, Math.PI * 2);\n      ctx.clip();\n\n      // Draw base fluid rectangle\n      ctx.fillStyle = '#dc2626';\n      ctx.globalAlpha = 0.7;\n      ctx.fillRect(0, baseLevel + 5, canvas.width, canvas.height);\n\n      // Draw animated wave surface\n      ctx.globalAlpha = 0.9;\n      ctx.fillStyle = '#dc2626';\n      ctx.beginPath();\n\n      // Create wave path\n      const startX = centerX - radius + 4;\n      ctx.moveTo(startX, baseLevel);\n\n      for (let x = startX; x <= centerX + radius - 4; x += 2) {\n        const waveOffset1 = Math.sin((x * 0.05) + animationFrame * 0.08) * 3;\n        const waveOffset2 = Math.sin((x * 0.08) + animationFrame * 0.12 + 1) * 2;\n        const y = baseLevel + waveOffset1 + waveOffset2;\n        ctx.lineTo(x, y);\n      }\n\n      // Complete wave fill\n      ctx.lineTo(centerX + radius - 4, canvas.height);\n      ctx.lineTo(startX, canvas.height);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.restore();\n    }\n\n    // Draw background border circle (like ICH risk ring)\n    const borderColor = getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim()\n                       || (isDarkMode ? '#8899a6' : '#6c757d');\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = 8;\n    ctx.globalAlpha = 0.4;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.globalAlpha = 1;\n\n    // Draw volume progress ring (like ICH risk circle)\n    const volumePercent = Math.min(volume / 100, 1); // Max 100ml = 100%\n    const circumference = 2 * Math.PI * radius;\n    const progressOffset = circumference * (1 - volumePercent);\n\n    // Progress ring (dark mode aware)\n    const progressColor = getComputedStyle(document.documentElement).getPropertyValue('--danger-color').trim()\n                         || '#dc2626';\n    ctx.strokeStyle = progressColor;\n    ctx.lineWidth = 8;\n    ctx.setLineDash([]);\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, -Math.PI / 2, -Math.PI / 2 + (volumePercent * 2 * Math.PI));\n    ctx.stroke();\n\n    // Continue animation\n    animationFrame += 1;\n    if (volume > 0) {\n      requestAnimationFrame(draw);\n    }\n  }\n\n  // Start animation\n  draw();\n\n  // Stop animation when canvas is removed from DOM\n  const observer = new MutationObserver(() => {\n    if (!document.contains(canvas)) {\n      isAnimating = false;\n      observer.disconnect();\n    }\n  });\n  observer.observe(document.body, { childList: true, subtree: true });\n}\n\n/**\n * Get brain visualization CSS classes\n * @param {string} size - 'compact' or 'detailed'\n * @returns {string} CSS classes\n */\nexport function getBrainVisualizationClasses(size) {\n  const baseClasses = 'brain-visualization';\n  const sizeClasses = size === 'compact' ? 'compact-brain' : 'detailed-brain';\n  return `${baseClasses} ${sizeClasses}`;\n}\n"],"names":["COMPREHENSIVE_HOSPITAL_DATABASE","ROUTING_ALGORITHM","patientData","location","state","ichProbability","timeFromOnset","clinicalFactors","detectedState","database","destination","comprehensiveOptions","allThrombolysisCapable","strokeUnitsAndHigher","stateCenters","nearestState","minDistance","center","distance","userLocation","hospitals","hospital","a","b","point1","point2","dLat","dLng","deg","calculateDistance","lat1","lng1","lat2","lng2","toRadians","degrees","calculateTravelTime","fromLat","fromLng","toLat","toLng","profile","url","response","data","route","error","source","calculateEmergencyTravelTime","result","renderStrokeCenterMap","results","t","initializeStrokeCenterMap","useGpsButton","manualLocationButton","locationManual","locationInput","searchLocationButton","resultsContainer","requestUserLocation","geocodeLocation","e","showLocationError","safeSetInnerHTML","position","latitude","longitude","showNearestCenters","errorMessage","locationString","coordPattern","coordMatch","lat","lng","searchLocation","supportedStates","locationName","routing","_a","routingExplanation","getEnhancedRoutingExplanation","getStateName","allHospitals","travelInfo","alternatives","h","alt","html","renderEnhancedStrokeCenterCard","mainDiv","locationDiv","primaryDiv","primaryCard","createStrokeCenterCard","altDiv","altCard","noteDiv","addStrokeCenterEventListeners","_b","_c","_d","_e","_g","_f","_h","_i","stateCode","ichPercent","urgencyIcon","isRecommended","capabilities","networkBadge","card","container","callButtons","directionsButtons","button","phone","message","renderCircularBrainDisplay","volume","formattedVolume","formatVolumeDisplay","canvasId","initializeVolumeAnimations","canvas","cssWidth","cssHeight","drawVolumeFluid","ctx","centerX","centerY","radius","animationFrame","isAnimating","isDarkMode","draw","drawFluidLayer","fillHeight","baseLevel","startX","x","waveOffset1","waveOffset2","y","borderColor","volumePercent","progressColor","observer"],"mappings":"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"}