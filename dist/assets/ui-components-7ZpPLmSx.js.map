{"version":3,"file":"ui-components-7ZpPLmSx.js","sources":["../../src/ui/components/stroke-center-map.js","../../src/ui/components/brain-visualization.js"],"sourcesContent":["// GPS-based stroke center map component\nimport { COMPREHENSIVE_HOSPITAL_DATABASE, ROUTING_ALGORITHM } from '../../data/comprehensive-stroke-centers.js';\nimport { calculateDistance, calculateTravelTime, calculateEmergencyTravelTime } from '../../data/stroke-centers.js';\nimport { t } from '../../localization/i18n.js';\nimport { safeSetInnerHTML } from '../../security/html-sanitizer.js';\n\nexport function renderStrokeCenterMap(results) {\n  return `\n    <div class=\"stroke-center-section\">\n      <h3>üè• ${t('nearestCentersTitle')}</h3>\n      <div id=\"locationContainer\">\n        <div class=\"location-controls\">\n          <button type=\"button\" id=\"useGpsButton\" class=\"secondary\">\n            üìç ${t('useCurrentLocation')}\n          </button>\n          <div class=\"location-manual\" style=\"display: none;\">\n            <input type=\"text\" id=\"locationInput\" placeholder=\"${t('enterLocationPlaceholder') || 'e.g. M√ºnchen, K√∂ln, Stuttgart, or 48.1351, 11.5820'}\" />\n            <button type=\"button\" id=\"searchLocationButton\" class=\"secondary\">${t('search')}</button>\n          </div>\n          <button type=\"button\" id=\"manualLocationButton\" class=\"secondary\">\n            ‚úèÔ∏è ${t('enterManually')}\n          </button>\n        </div>\n        <div id=\"strokeCenterResults\" class=\"stroke-center-results\"></div>\n      </div>\n    </div>\n  `;\n}\n\nexport function initializeStrokeCenterMap(results) {\n  console.log('[StrokeMap] Initializing stroke center map with results:', results);\n\n  const useGpsButton = document.getElementById('useGpsButton');\n  const manualLocationButton = document.getElementById('manualLocationButton');\n  const locationManual = document.querySelector('.location-manual');\n  const locationInput = document.getElementById('locationInput');\n  const searchLocationButton = document.getElementById('searchLocationButton');\n  const resultsContainer = document.getElementById('strokeCenterResults');\n\n  console.log('[StrokeMap] Found elements:', {\n    useGpsButton: !!useGpsButton,\n    manualLocationButton: !!manualLocationButton,\n    locationManual: !!locationManual,\n    locationInput: !!locationInput,\n    searchLocationButton: !!searchLocationButton,\n    resultsContainer: !!resultsContainer,\n  });\n\n  if (useGpsButton) {\n    useGpsButton.addEventListener('click', () => {\n      requestUserLocation(results, resultsContainer);\n    });\n  }\n\n  if (manualLocationButton) {\n    manualLocationButton.addEventListener('click', () => {\n      locationManual.style.display = locationManual.style.display === 'none' ? 'block' : 'none';\n    });\n  }\n\n  if (searchLocationButton) {\n    searchLocationButton.addEventListener('click', () => {\n      const location = locationInput.value.trim();\n      if (location) {\n        geocodeLocation(location, results, resultsContainer);\n      }\n    });\n  }\n\n  if (locationInput) {\n    locationInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        const location = locationInput.value.trim();\n        if (location) {\n          geocodeLocation(location, results, resultsContainer);\n        }\n      }\n    });\n  }\n}\n\nfunction requestUserLocation(results, resultsContainer) {\n  if (!navigator.geolocation) {\n    showLocationError(t('geolocationNotSupported'), resultsContainer);\n    return;\n  }\n\n  try {\n    safeSetInnerHTML(resultsContainer, `<div class=\"loading\">${t('gettingLocation')}...</div>`);\n  } catch (error) {\n    resultsContainer.textContent = 'Getting location...';\n    console.error('Sanitization failed:', error);\n  }\n\n  navigator.geolocation.getCurrentPosition(\n    (position) => {\n      const { latitude, longitude } = position.coords;\n      showNearestCenters(latitude, longitude, results, resultsContainer);\n    },\n    (error) => {\n      let errorMessage = t('locationError');\n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          errorMessage = t('locationPermissionDenied');\n          break;\n        case error.POSITION_UNAVAILABLE:\n          errorMessage = t('locationUnavailable');\n          break;\n        case error.TIMEOUT:\n          errorMessage = t('locationTimeout');\n          break;\n      }\n      showLocationError(errorMessage, resultsContainer);\n    },\n    {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 300000, // 5 minutes\n    },\n  );\n}\n\nasync function geocodeLocation(locationString, results, resultsContainer) {\n  try {\n    safeSetInnerHTML(resultsContainer, `<div class=\"loading\">${t('searchingLocation')}...</div>`);\n  } catch (error) {\n    resultsContainer.textContent = 'Searching location...';\n    console.error('Sanitization failed:', error);\n  }\n\n  // Check if user entered coordinates (format: lat, lng or lat,lng)\n  const coordPattern = /^(-?\\d+\\.?\\d*)\\s*,\\s*(-?\\d+\\.?\\d*)$/;\n  const coordMatch = locationString.trim().match(coordPattern);\n\n  if (coordMatch) {\n    // Direct coordinate input\n    const lat = parseFloat(coordMatch[1]);\n    const lng = parseFloat(coordMatch[2]);\n\n    // Validate coordinates are within supported German states (Bayern, BW, NRW)\n    if (lat >= 47.2 && lat <= 52.5 && lng >= 5.9 && lng <= 15.0) {\n      try {\n        safeSetInnerHTML(resultsContainer, `\n          <div class=\"location-success\">\n            <p>üìç Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n          </div>\n        `);\n      } catch (error) {\n        resultsContainer.textContent = `Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;\n        console.error('Sanitization failed:', error);\n      }\n      setTimeout(() => {\n        showNearestCenters(lat, lng, results, resultsContainer);\n      }, 500);\n      return;\n    }\n    showLocationError('Coordinates appear to be outside Germany. Please check the values.', resultsContainer);\n    return;\n  }\n\n  try {\n    // Clean up the location string\n    let searchLocation = locationString.trim();\n\n    // If it doesn't already include country info, add it\n    if (!searchLocation.toLowerCase().includes('deutschland')\n        && !searchLocation.toLowerCase().includes('germany')\n        && !searchLocation.toLowerCase().includes('bayern')\n        && !searchLocation.toLowerCase().includes('bavaria')\n        && !searchLocation.toLowerCase().includes('nordrhein')\n        && !searchLocation.toLowerCase().includes('baden')) {\n      searchLocation += ', Deutschland';\n    }\n\n    // Use Nominatim (OpenStreetMap) geocoding service - free and reliable\n    // Note: encodeURIComponent properly handles umlauts (√§, √∂, √º, √ü)\n    const encodedLocation = encodeURIComponent(searchLocation);\n    const url = `https://nominatim.openstreetmap.org/search?q=${encodedLocation}&countrycodes=de&format=json&limit=3&addressdetails=1`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': 'iGFAP-StrokeTriage/2.1.0', // Required by Nominatim\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Geocoding API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data && data.length > 0) {\n      // Prefer results from supported states (Bayern, Baden-W√ºrttemberg, NRW)\n      let location = data[0];\n      const supportedStates = ['Bayern', 'Baden-W√ºrttemberg', 'Nordrhein-Westfalen'];\n\n      for (const result of data) {\n        if (result.address && supportedStates.includes(result.address.state)) {\n          location = result;\n          break;\n        }\n      }\n\n      const lat = parseFloat(location.lat);\n      const lng = parseFloat(location.lon);\n      const locationName = location.display_name || locationString;\n\n      // Show success message and then proceed with location\n      try {\n        safeSetInnerHTML(resultsContainer, `\n          <div class=\"location-success\">\n            <p>üìç Found: ${locationName}</p>\n            <small style=\"color: #666;\">Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}</small>\n          </div>\n        `);\n      } catch (error) {\n        resultsContainer.textContent = `Found: ${locationName} (${lat.toFixed(4)}, ${lng.toFixed(4)})`;\n        console.error('Sanitization failed:', error);\n      }\n\n      // Wait a moment to show the found location, then show centers\n      setTimeout(() => {\n        showNearestCenters(lat, lng, results, resultsContainer);\n      }, 1000);\n    } else {\n      showLocationError(`\n        <strong>Location \"${locationString}\" not found.</strong><br>\n        <small>Try:</small>\n        <ul style=\"text-align: left; font-size: 0.9em; margin: 10px 0;\">\n          <li>City name: \"M√ºnchen\", \"K√∂ln\", \"Stuttgart\"</li>\n          <li>Address: \"Marienplatz 1, M√ºnchen\"</li>\n          <li>Coordinates: \"48.1351, 11.5820\"</li>\n        </ul>\n      `, resultsContainer);\n    }\n  } catch (error) {\n    // ('Geocoding failed:', error);\n    showLocationError(`\n      <strong>Unable to search location.</strong><br>\n      <small>Please try entering coordinates directly (e.g., \"48.1351, 11.5820\")</small>\n    `, resultsContainer);\n  }\n}\n\nasync function showNearestCenters(lat, lng, results, resultsContainer) {\n  const location = { lat, lng };\n\n  // Use the enhanced routing algorithm\n  const routing = ROUTING_ALGORITHM.routePatient({\n    location,\n    ichProbability: results?.ich?.probability || 0,\n    timeFromOnset: results?.timeFromOnset || null,\n    clinicalFactors: results?.clinicalFactors || {},\n  });\n\n  if (!routing || !routing.destination) {\n    try {\n      safeSetInnerHTML(resultsContainer, `\n        <div class=\"location-error\">\n          <p>‚ö†Ô∏è No suitable stroke centers found in this area.</p>\n          <p><small>Please try a different location or contact emergency services directly.</small></p>\n        </div>\n      `);\n    } catch (error) {\n      resultsContainer.textContent = 'No suitable stroke centers found in this area. Please try a different location or contact emergency services directly.';\n      console.error('Sanitization failed:', error);\n    }\n    return;\n  }\n\n  // Generate routing explanation\n  const routingExplanation = getEnhancedRoutingExplanation(routing, results);\n\n  // Show loading state\n  try {\n    safeSetInnerHTML(resultsContainer, `\n      <div class=\"location-info\">\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        <p><strong>Detected State:</strong> ${getStateName(routing.state)}</p>\n      </div>\n      <div class=\"loading\">${t('calculatingTravelTimes')}...</div>\n    `);\n  } catch (error) {\n    resultsContainer.textContent = `Your Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}. Calculating travel times...`;\n    console.error('Sanitization failed:', error);\n  }\n\n  try {\n    // Get all relevant hospitals for this routing decision\n    const database = COMPREHENSIVE_HOSPITAL_DATABASE[routing.state];\n    const allHospitals = [\n      ...database.neurosurgicalCenters,\n      ...database.comprehensiveStrokeCenters,\n      ...database.regionalStrokeUnits,\n      ...(database.thrombolysisHospitals || []),\n    ];\n\n    // Add distance and travel time to primary destination\n    const { destination } = routing;\n    destination.distance = calculateDistance(lat, lng, destination.coordinates.lat, destination.coordinates.lng);\n\n    try {\n      const travelInfo = await calculateEmergencyTravelTime(lat, lng, destination.coordinates.lat, destination.coordinates.lng);\n      destination.travelTime = travelInfo.duration;\n      destination.travelSource = travelInfo.source;\n    } catch (error) {\n      destination.travelTime = Math.round(destination.distance / 0.8); // Estimate\n      destination.travelSource = 'estimated';\n    }\n\n    // Find 3-4 alternative hospitals nearby\n    const alternatives = allHospitals\n      .filter((h) => h.id !== destination.id)\n      .map((hospital) => ({\n        ...hospital,\n        distance: calculateDistance(lat, lng, hospital.coordinates.lat, hospital.coordinates.lng),\n      }))\n      .sort((a, b) => a.distance - b.distance)\n      .slice(0, 3);\n\n    console.log('üè• Stroke Center Debug:', {\n      primaryDestination: destination.name,\n      alternativesCount: alternatives.length,\n      alternativeNames: alternatives.map((alt) => alt.name),\n      allHospitalsCount: allHospitals.length,\n      routingState: routing.state,\n    });\n\n    // Add travel times to alternatives\n    for (const alt of alternatives) {\n      try {\n        const travelInfo = await calculateEmergencyTravelTime(lat, lng, alt.coordinates.lat, alt.coordinates.lng);\n        alt.travelTime = travelInfo.duration;\n        alt.travelSource = travelInfo.source;\n      } catch (error) {\n        alt.travelTime = Math.round(alt.distance / 0.8);\n        alt.travelSource = 'estimated';\n      }\n    }\n\n    const html = `\n      <div class=\"location-info\">\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        <p><strong>State:</strong> ${getStateName(routing.state)}</p>\n        ${routingExplanation}\n      </div>\n      \n      <div class=\"recommended-centers\">\n        <h4>üè• ${routing.urgency === 'IMMEDIATE' ? 'Emergency' : 'Recommended'} Destination</h4>\n        ${renderEnhancedStrokeCenterCard(destination, true, routing)}\n      </div>\n      \n      ${alternatives.length > 0 ? `\n        <div class=\"alternative-centers\">\n          <h4>Alternative Centers</h4>\n          ${alternatives.map((alt) => renderEnhancedStrokeCenterCard(alt, false, routing)).join('')}\n        </div>\n      ` : ''}\n      \n      <div class=\"travel-time-note\">\n        <small>${t('travelTimeNote') || 'Travel times estimated for emergency vehicles'}</small>\n      </div>\n    `;\n\n    try {\n      // Use safer DOM manipulation instead of innerHTML\n      resultsContainer.innerHTML = ''; // Clear first\n\n      // Create main container\n      const mainDiv = document.createElement('div');\n      mainDiv.className = 'stroke-center-enhanced';\n\n      // Add location info\n      const locationDiv = document.createElement('div');\n      locationDiv.className = 'location-info';\n      locationDiv.innerHTML = `\n        <p><strong>Your Location:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n        <p><strong>State:</strong> ${getStateName(routing.state)}</p>\n        ${routingExplanation}\n      `;\n      mainDiv.appendChild(locationDiv);\n\n      // Add primary destination\n      const primaryDiv = document.createElement('div');\n      primaryDiv.className = 'recommended-centers';\n      primaryDiv.innerHTML = `<h4>üè• ${routing.urgency === 'IMMEDIATE' ? 'Emergency' : 'Recommended'} Destination</h4>`;\n\n      const primaryCard = createStrokeCenterCard(destination, true, routing);\n      primaryDiv.appendChild(primaryCard);\n      mainDiv.appendChild(primaryDiv);\n\n      // Add alternatives if they exist\n      if (alternatives.length > 0) {\n        const altDiv = document.createElement('div');\n        altDiv.className = 'alternative-centers';\n        altDiv.innerHTML = '<h4>Alternative Centers</h4>';\n\n        alternatives.forEach((alt) => {\n          const altCard = createStrokeCenterCard(alt, false, routing);\n          altDiv.appendChild(altCard);\n        });\n\n        mainDiv.appendChild(altDiv);\n      }\n\n      // Add travel time note\n      const noteDiv = document.createElement('div');\n      noteDiv.className = 'travel-time-note';\n      noteDiv.innerHTML = '<small>Travel times estimated for emergency vehicles</small>';\n      mainDiv.appendChild(noteDiv);\n\n      resultsContainer.appendChild(mainDiv);\n\n      // Add event listeners after DOM creation\n      addStrokeCenterEventListeners(resultsContainer);\n    } catch (error) {\n      console.error('üö® Stroke Center Display Error:', error);\n\n      // Fallback to simple display\n      resultsContainer.innerHTML = `\n        <div class=\"stroke-center-fallback\">\n          <h4>üè• Recommended Center</h4>\n          <p><strong>${routing?.destination?.name || 'Unknown Hospital'}</strong></p>\n          <p>üìç ${routing?.destination?.address || 'Address not available'}</p>\n          <p>üìû ${routing?.destination?.emergency || routing?.destination?.phone || 'Phone not available'}</p>\n          <p>üìè Distance: ${routing?.destination?.distance?.toFixed(1) || '?'} km</p>\n          ${alternatives?.length > 0 ? `<p><strong>+ ${alternatives.length} alternative centers nearby</strong></p>` : ''}\n        </div>\n      `;\n    }\n  } catch (error) {\n    // ('Enhanced routing failed, using basic display:', error);\n\n    // Fallback to basic display\n    try {\n      safeSetInnerHTML(resultsContainer, `\n        <div class=\"location-info\">\n          <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\n          ${routingExplanation}\n        </div>\n\n        <div class=\"recommended-centers\">\n          <h4>Recommended Center</h4>\n          <div class=\"stroke-center-card recommended\">\n            <div class=\"center-header\">\n              <h5>${routing.destination.name}</h5>\n              <span class=\"distance\">${routing.destination.distance?.toFixed(1) || '?'} km</span>\n            </div>\n            <div class=\"center-details\">\n              <p class=\"address\">üìç ${routing.destination.address}</p>\n              <p class=\"phone\">üìû ${routing.destination.emergency || routing.destination.phone}</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"routing-reasoning\">\n          <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\n        </div>\n      `);\n    } catch (error) {\n      resultsContainer.textContent = `Your Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}. Recommended Center: ${routing.destination.name} - ${routing.destination.distance?.toFixed(1) || '?'} km`;\n      console.error('Sanitization failed:', error);\n    }\n  }\n}\n\nfunction renderStrokeCenterList(centers, isRecommended = false) {\n  if (!centers || centers.length === 0) {\n    return `<p>${t('noCentersFound')}</p>`;\n  }\n\n  return centers.map((center) => `\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'}\">\n      <div class=\"center-header\">\n        <h5>${center.name}</h5>\n        <span class=\"center-type ${center.type}\">${t(`${center.type}Center`)}</span>\n        ${center.travelTime ? `\n          <span class=\"travel-time\">\n            <span class=\"time\">${center.travelTime} ${t('minutes')}</span>\n            <span class=\"distance\">(${center.distance} km)</span>\n          </span>\n        ` : `\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n        `}\n      </div>\n      \n      <div class=\"center-details\">\n        <p class=\"address\">üìç ${center.address}</p>\n        <p class=\"phone\">üìû ${t('emergency')}: ${center.emergency}</p>\n        \n        <div class=\"services\">\n          ${center.services.map((service) => `\n            <span class=\"service-badge\">${t(service)}</span>\n          `).join('')}\n        </div>\n        \n        ${center.certified ? `\n          <div class=\"certification\">\n            ‚úÖ ${t('certified')}: ${center.certification}\n          </div>\n        ` : ''}\n      </div>\n      \n      <div class=\"center-actions\">\n        <button class=\"call-button\" data-phone=\"${center.emergency}\">\n          üìû ${t('call')}\n        </button>\n        <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\n          üß≠ ${t('directions')}\n        </button>\n      </div>\n    </div>\n  `).join('');\n}\n\n// Helper functions for enhanced routing system\nfunction getStateName(stateCode) {\n  const stateNames = {\n    bayern: 'Bayern (Bavaria)',\n    badenWuerttemberg: 'Baden-W√ºrttemberg',\n    nordrheinWestfalen: 'Nordrhein-Westfalen (NRW)',\n  };\n  return stateNames[stateCode] || stateCode;\n}\n\nfunction getEnhancedRoutingExplanation(routing, results) {\n  const ichPercent = Math.round((results?.ich?.probability || 0) * 100);\n\n  let urgencyIcon = 'üè•';\n  if (routing.urgency === 'IMMEDIATE') {\n    urgencyIcon = 'üö®';\n  } else if (routing.urgency === 'TIME_CRITICAL') {\n    urgencyIcon = '‚è∞';\n  } else if (routing.urgency === 'URGENT') {\n    urgencyIcon = '‚ö†Ô∏è';\n  }\n\n  return `\n    <div class=\"routing-explanation ${routing.category.toLowerCase()}\">\n      <div class=\"routing-header\">\n        <strong>${urgencyIcon} ${routing.category.replace('_', ' ')} - ${routing.urgency}</strong>\n      </div>\n      <div class=\"routing-details\">\n        <p><strong>ICH Risk:</strong> ${ichPercent}% ${routing.threshold ? `(${routing.threshold})` : ''}</p>\n        ${routing.timeWindow ? `<p><strong>Time Window:</strong> ${routing.timeWindow}</p>` : ''}\n        <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\n        <p><strong>Pre-Alert:</strong> ${routing.preAlert}</p>\n        ${routing.bypassLocal ? '<p class=\"bypass-warning\">‚ö†Ô∏è Bypassing local hospitals</p>' : ''}\n      </div>\n    </div>\n  `;\n}\n\nfunction renderEnhancedStrokeCenterCard(center, isRecommended, routing) {\n  const capabilities = [];\n  if (center.neurosurgery) {\n    capabilities.push('üß† Neurosurgery');\n  }\n  if (center.thrombectomy) {\n    capabilities.push('ü©∏ Thrombectomy');\n  }\n  if (center.thrombolysis) {\n    capabilities.push('üíâ Thrombolysis');\n  }\n\n  const networkBadge = center.network ? `<span class=\"network-badge\">${center.network}</span>` : '';\n\n  return `\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'} enhanced\">\n      <div class=\"center-header\">\n        <h5>${center.name}</h5>\n        <div class=\"center-badges\">\n          ${center.neurosurgery ? '<span class=\"capability-badge neurosurgery\">NS</span>' : ''}\n          ${center.thrombectomy ? '<span class=\"capability-badge thrombectomy\">TE</span>' : ''}\n          ${networkBadge}\n        </div>\n      </div>\n      \n      <div class=\"center-metrics\">\n        ${center.travelTime ? `\n          <div class=\"travel-info\">\n            <span class=\"travel-time\">${center.travelTime} min</span>\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n          </div>\n        ` : `\n          <div class=\"distance-only\">\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n          </div>\n        `}\n        <div class=\"bed-info\">\n          <span class=\"beds\">${center.beds} beds</span>\n        </div>\n      </div>\n      \n      <div class=\"center-details\">\n        <p class=\"address\">üìç ${center.address}</p>\n        <p class=\"phone\">üìû ${center.emergency || center.phone}</p>\n        \n        ${capabilities.length > 0 ? `\n          <div class=\"capabilities\">\n            ${capabilities.join(' ‚Ä¢ ')}\n          </div>\n        ` : ''}\n      </div>\n      \n      <div class=\"center-actions\">\n        <button class=\"call-button\" data-phone=\"${center.emergency || center.phone}\">\n          üìû Call\n        </button>\n        <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\n          üß≠ Directions\n        </button>\n      </div>\n    </div>\n  `;\n}\n\nfunction createStrokeCenterCard(center, isRecommended, routing) {\n  const card = document.createElement('div');\n  card.className = `stroke-center-card ${isRecommended ? 'recommended' : 'alternative'} enhanced`;\n\n  const capabilities = [];\n  if (center.neurosurgery) {\n    capabilities.push('üß† Neurosurgery');\n  }\n  if (center.thrombectomy) {\n    capabilities.push('ü©∏ Thrombectomy');\n  }\n  if (center.thrombolysis) {\n    capabilities.push('üíâ Thrombolysis');\n  }\n\n  const networkBadge = center.network ? `<span class=\"network-badge\">${center.network}</span>` : '';\n\n  card.innerHTML = `\n    <div class=\"center-header\">\n      <h5>${center.name}</h5>\n      <div class=\"center-badges\">\n        ${center.neurosurgery ? '<span class=\"capability-badge neurosurgery\">NS</span>' : ''}\n        ${center.thrombectomy ? '<span class=\"capability-badge thrombectomy\">TE</span>' : ''}\n        ${networkBadge}\n      </div>\n    </div>\n\n    <div class=\"center-metrics\">\n      ${center.travelTime ? `\n        <div class=\"travel-info\">\n          <span class=\"travel-time\">${center.travelTime} min</span>\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n        </div>\n      ` : `\n        <div class=\"distance-only\">\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\n        </div>\n      `}\n      <div class=\"bed-info\">\n        <span class=\"beds\">${center.beds} beds</span>\n      </div>\n    </div>\n\n    <div class=\"center-details\">\n      <p class=\"address\">üìç ${center.address}</p>\n      <p class=\"phone\">üìû ${center.emergency || center.phone}</p>\n\n      ${capabilities.length > 0 ? `\n        <div class=\"capabilities\">\n          ${capabilities.join(' ‚Ä¢ ')}\n        </div>\n      ` : ''}\n    </div>\n\n    <div class=\"center-actions\">\n      <button class=\"call-button\" data-phone=\"${center.emergency || center.phone}\">\n        üìû Call\n      </button>\n      <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\n        üß≠ Directions\n      </button>\n    </div>\n  `;\n\n  return card;\n}\n\nfunction addStrokeCenterEventListeners(container) {\n  const callButtons = container.querySelectorAll('.call-button');\n  const directionsButtons = container.querySelectorAll('.directions-button');\n\n  callButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      const { phone } = button.dataset;\n      if (phone) {\n        window.open(`tel:${phone}`);\n      }\n    });\n  });\n\n  directionsButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      const { lat } = button.dataset;\n      const { lng } = button.dataset;\n      if (lat && lng) {\n        window.open(`https://maps.google.com/maps?daddr=${lat},${lng}`, '_blank');\n      }\n    });\n  });\n}\n\nfunction showLocationError(message, container) {\n  try {\n    safeSetInnerHTML(container, `\n      <div class=\"location-error\">\n        <p>‚ö†Ô∏è ${message}</p>\n        <p><small>${t('tryManualEntry')}</small></p>\n      </div>\n    `);\n  } catch (error) {\n    container.textContent = `Error: ${message}. ${t('tryManualEntry') || 'Try manual entry'}`;\n    console.error('Sanitization failed:', error);\n  }\n}\n","/**\n * Brain Visualization Component for ICH Volume Display\n * Creates an SVG-based brain hemorrhage visualization\n */\n\nimport {\n  calculateHemorrhageSizePercent, getVolumeColor, calculateICHVolume, formatVolumeDisplay,\n} from '../../logic/ich-volume-calculator.js';\n\n/**\n * Render brain visualization with hemorrhage overlay\n * @param {number} volume - ICH volume in ml\n * @param {string} size - 'compact' or 'detailed'\n * @returns {string} HTML string with SVG brain visualization\n */\nexport function renderBrainVisualization(volume, size = 'compact') {\n  const dimensions = size === 'compact' ? { width: 120, height: 120 } : { width: 200, height: 200 };\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  // Calculate hemorrhage appearance\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\n  const hemorrhageColor = getVolumeColor(volume);\n\n  // Scale hemorrhage radius based on volume (basal ganglia region, slightly off-center)\n  const maxRadius = dimensions.width * 0.25; // Maximum 25% of brain width\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius; // 70% is max brain area\n\n  // Position hemorrhage in basal ganglia region (slightly right of center)\n  const hemorrhageX = centerX + (dimensions.width * 0.1); // 10% right of center\n  const hemorrhageY = centerY + (dimensions.height * 0.05); // 5% below center\n\n  // 30ml reference circle (for detailed view)\n  const referenceRadius = (40 / 70) * maxRadius; // 40% brain area = 30ml threshold\n\n  // Animation for hemorrhage (subtle pulsing)\n  const animationId = `hemorrhage-pulse-${Math.random().toString(36).substr(2, 9)}`;\n\n  return `\n    <div class=\"brain-visualization ${size}\">\n      <svg \n        width=\"${dimensions.width}\" \n        height=\"${dimensions.height}\" \n        viewBox=\"0 0 ${dimensions.width} ${dimensions.height}\"\n        class=\"brain-svg\"\n        role=\"img\"\n        aria-label=\"Brain hemorrhage visualization showing ${volume.toFixed(1)}ml ICH volume\"\n      >\n        <!-- Brain outline with hemorrhage overlay -->\n        ${renderBrainOutlineWithHemorrhage(dimensions, volume)}\n        \n        <!-- 30ml reference indicator (detailed view only) -->\n        ${size === 'detailed' && volume > 0 ? `\n          <circle \n            cx=\"${hemorrhageX}\" \n            cy=\"${hemorrhageY}\" \n            r=\"${referenceRadius}\"\n            fill=\"none\" \n            stroke=\"#9ca3af\" \n            stroke-width=\"1\" \n            stroke-dasharray=\"3,3\"\n            opacity=\"0.5\"\n          />\n          <text \n            x=\"${hemorrhageX + referenceRadius + 5}\" \n            y=\"${hemorrhageY - referenceRadius}\" \n            font-size=\"10\" \n            fill=\"#6b7280\"\n            font-family=\"system-ui\"\n          >30ml</text>\n        ` : ''}\n        \n        <!-- Hemorrhage visualization -->\n        ${volume > 0 ? `\n          <circle \n            cx=\"${hemorrhageX}\" \n            cy=\"${hemorrhageY}\" \n            r=\"${hemorrhageRadius}\"\n            fill=\"${hemorrhageColor}\"\n            opacity=\"0.8\"\n            class=\"hemorrhage-circle\"\n          >\n            <!-- Subtle pulsing animation -->\n            <animate \n              attributeName=\"opacity\" \n              values=\"0.6;0.9;0.6\" \n              dur=\"2.5s\" \n              repeatCount=\"indefinite\"\n            />\n            ${hemorrhageRadius > 15 ? `\n            <animate \n              attributeName=\"r\" \n              values=\"${hemorrhageRadius * 0.95};${hemorrhageRadius};${hemorrhageRadius * 0.95}\" \n              dur=\"2.5s\" \n              repeatCount=\"indefinite\"\n            />\n            ` : ''}\n          </circle>\n          \n          <!-- Volume label (detailed view only) -->\n          ${size === 'detailed' ? `\n            <text \n              x=\"${centerX}\" \n              y=\"${dimensions.height - 10}\" \n              text-anchor=\"middle\" \n              font-size=\"12\" \n              font-weight=\"bold\"\n              fill=\"#374151\"\n              font-family=\"system-ui\"\n            >${volume < 1 ? '<1' : volume.toFixed(1)} ml</text>\n          ` : ''}\n        ` : ''}\n        \n        <style>\n          .hemorrhage-circle {\n            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));\n          }\n        </style>\n      </svg>\n    </div>\n  `;\n}\n\n/**\n * Load and render the provided brain SVG with hemorrhage overlay\n * @param {object} dimensions - Width and height for the brain\n * @returns {string} Brain SVG with embedded hemorrhage visualization\n */\nfunction renderBrainOutlineWithHemorrhage(dimensions, volume) {\n  // For performance, we'll use the SVG as a background image and overlay the hemorrhage\n  // This avoids loading the 530KB SVG content directly into the DOM\n\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  // Calculate hemorrhage position (basal ganglia region - slightly right and posterior)\n  const hemorrhageX = centerX + (dimensions.width * 0.08); // 8% right of center\n  const hemorrhageY = centerY + (dimensions.height * 0.03); // 3% below center\n\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\n  const hemorrhageColor = getVolumeColor(volume);\n  const maxRadius = dimensions.width * 0.25;\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius;\n\n  return `\n    <!-- 3D Brain image as background -->\n    <image \n      x=\"0\" \n      y=\"0\" \n      width=\"${dimensions.width}\" \n      height=\"${dimensions.height}\"\n      href=\"./src/assets/brain-3d.png\"\n      opacity=\"0.95\"\n      preserveAspectRatio=\"xMidYMid meet\"\n    />\n    \n    <!-- Hemorrhage overlay in basal ganglia region -->\n    ${volume > 0 ? `\n      <circle \n        cx=\"${hemorrhageX}\" \n        cy=\"${hemorrhageY}\" \n        r=\"${hemorrhageRadius}\"\n        fill=\"${hemorrhageColor}\"\n        opacity=\"0.85\"\n        class=\"hemorrhage-circle\"\n      >\n        <!-- Subtle pulsing animation -->\n        <animate \n          attributeName=\"opacity\" \n          values=\"0.7;0.95;0.7\" \n          dur=\"2.5s\" \n          repeatCount=\"indefinite\"\n        />\n        ${hemorrhageRadius > 8 ? `\n        <animate \n          attributeName=\"r\" \n          values=\"${hemorrhageRadius * 0.96};${hemorrhageRadius * 1.02};${hemorrhageRadius * 0.96}\" \n          dur=\"2.5s\" \n          repeatCount=\"indefinite\"\n        />\n        ` : ''}\n      </circle>\n      \n      <!-- Hemorrhage center highlight -->\n      <circle \n        cx=\"${hemorrhageX}\" \n        cy=\"${hemorrhageY}\" \n        r=\"${hemorrhageRadius * 0.3}\"\n        fill=\"${hemorrhageColor}\"\n        opacity=\"0.95\"\n        class=\"hemorrhage-center\"\n      />\n    ` : ''}\n  `;\n}\n\n/**\n * Temporary brain outline (for fallback when SVG file not available)\n */\nfunction renderTemporaryBrainOutline(dimensions) {\n  const centerX = dimensions.width / 2;\n  const centerY = dimensions.height / 2;\n\n  return `\n    <!-- Simplified brain outline -->\n    <ellipse \n      cx=\"${centerX}\" \n      cy=\"${centerY}\" \n      rx=\"${dimensions.width * 0.4}\" \n      ry=\"${dimensions.height * 0.35}\" \n      fill=\"#f1f5f9\" \n      stroke=\"#64748b\" \n      stroke-width=\"2\"\n      opacity=\"0.8\"\n    />\n    \n    <!-- Brain hemisphere division -->\n    <line \n      x1=\"${centerX}\" \n      y1=\"${centerY - dimensions.height * 0.25}\" \n      x2=\"${centerX}\" \n      y2=\"${centerY + dimensions.height * 0.25}\" \n      stroke=\"#9ca3af\" \n      stroke-width=\"1\" \n      opacity=\"0.5\"\n    />\n  `;\n}\n\n/**\n * Create compact brain icon for inline display\n * @param {number} volume - ICH volume in ml\n * @param {number} size - Icon size in pixels\n * @returns {string} Small brain icon with hemorrhage indicator\n */\nexport function renderCompactBrainIcon(volume, size = 24) {\n  const hemorrhageColor = getVolumeColor(volume);\n  const hemorrhageSize = volume > 0 ? Math.max(2, (volume / 50) * size * 0.3) : 0;\n\n  return `\n    <svg \n      width=\"${size}\" \n      height=\"${size}\" \n      viewBox=\"0 0 ${size} ${size}\"\n      class=\"brain-icon\"\n      style=\"display: inline-block; vertical-align: middle;\"\n    >\n      <!-- Simple brain outline -->\n      <ellipse \n        cx=\"${size / 2}\" \n        cy=\"${size / 2}\" \n        rx=\"${size * 0.4}\" \n        ry=\"${size * 0.35}\" \n        fill=\"#f1f5f9\" \n        stroke=\"#64748b\" \n        stroke-width=\"1\"\n      />\n      \n      <!-- Hemorrhage indicator -->\n      ${volume > 0 ? `\n        <circle \n          cx=\"${size / 2 + size * 0.1}\" \n          cy=\"${size / 2}\" \n          r=\"${hemorrhageSize}\"\n          fill=\"${hemorrhageColor}\"\n          opacity=\"0.9\"\n        />\n      ` : ''}\n    </svg>\n  `;\n}\n\n/**\n * Render circular brain display matching ICH risk circle style\n * @param {number} volume - ICH volume in ml\n * @returns {string} HTML for circular brain display\n */\nexport function renderCircularBrainDisplay(volume) {\n  if (!volume || volume <= 0) {\n    return `\n      <div class=\"volume-circle\" data-volume=\"0\">\n        <div class=\"volume-number\">0<span> ml</span></div>\n        <canvas class=\"volume-canvas\" width=\"120\" height=\"120\"></canvas>\n      </div>\n    `;\n  }\n\n  const formattedVolume = formatVolumeDisplay(volume);\n  const canvasId = `volume-canvas-${Math.random().toString(36).substr(2, 9)}`;\n\n  return `\n    <div class=\"volume-circle\" data-volume=\"${volume}\">\n      <div class=\"volume-number\">${formattedVolume}</div>\n      <canvas id=\"${canvasId}\" class=\"volume-canvas\" \n              data-volume=\"${volume}\" data-canvas-id=\"${canvasId}\"></canvas>\n    </div>\n  `;\n}\n\n/**\n * Initialize fluid fill animation for volume canvas\n * Call this after DOM is updated with new volume circles\n */\nexport function initializeVolumeAnimations() {\n  const canvases = document.querySelectorAll('.volume-canvas');\n\n  canvases.forEach((canvas) => {\n    // Set canvas internal size to match CSS size\n    const cssWidth = canvas.offsetWidth || 120;\n    const cssHeight = canvas.offsetHeight || 120;\n    canvas.width = cssWidth;\n    canvas.height = cssHeight;\n\n    const volume = parseFloat(canvas.dataset.volume) || 0;\n    if (volume > 0) {\n      drawVolumeFluid(canvas, volume);\n    }\n  });\n}\n\n/**\n * Draw fluid fill animation on canvas\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {number} volume - ICH volume in ml\n */\nfunction drawVolumeFluid(canvas, volume) {\n  const ctx = canvas.getContext('2d');\n  const centerX = canvas.width / 2;\n  const centerY = canvas.height / 2;\n  const radius = canvas.width * 0.45; // 45% of canvas width for the circle\n  let animationFrame = 0;\n  let isAnimating = true;\n\n  // Check dark mode once\n  const isDarkMode = document.body.classList.contains('dark-mode')\n                    || window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n  function draw() {\n    if (!isAnimating) {\n      return;\n    }\n\n    // Clear canvas completely\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Don't draw background - let CSS handle it\n    // Just draw the fluid and border\n    drawFluidLayer();\n  }\n\n  function drawFluidLayer() {\n    // Calculate fill level based on volume\n    const maxVolume = 80; // ml (practical maximum for visualization)\n    const fillPercentage = Math.min(volume / maxVolume, 0.9);\n    const fillHeight = fillPercentage * (radius * 1.8);\n    const baseLevel = centerY + radius - 4 - fillHeight;\n\n    // Draw fluid fill with waves\n    if (volume > 0) {\n      ctx.save();\n\n      // Clip to circle\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius - 4, 0, Math.PI * 2);\n      ctx.clip();\n\n      // Draw base fluid rectangle\n      ctx.fillStyle = '#dc2626';\n      ctx.globalAlpha = 0.7;\n      ctx.fillRect(0, baseLevel + 5, canvas.width, canvas.height);\n\n      // Draw animated wave surface\n      ctx.globalAlpha = 0.9;\n      ctx.fillStyle = '#dc2626';\n      ctx.beginPath();\n\n      // Create wave path\n      const startX = centerX - radius + 4;\n      ctx.moveTo(startX, baseLevel);\n\n      for (let x = startX; x <= centerX + radius - 4; x += 2) {\n        const waveOffset1 = Math.sin((x * 0.05) + animationFrame * 0.08) * 3;\n        const waveOffset2 = Math.sin((x * 0.08) + animationFrame * 0.12 + 1) * 2;\n        const y = baseLevel + waveOffset1 + waveOffset2;\n        ctx.lineTo(x, y);\n      }\n\n      // Complete wave fill\n      ctx.lineTo(centerX + radius - 4, canvas.height);\n      ctx.lineTo(startX, canvas.height);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.restore();\n    }\n\n    // Draw background border circle (like ICH risk ring)\n    const borderColor = getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim()\n                       || (isDarkMode ? '#8899a6' : '#6c757d');\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = 8;\n    ctx.globalAlpha = 0.4;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.globalAlpha = 1;\n\n    // Draw volume progress ring (like ICH risk circle)\n    const volumePercent = Math.min(volume / 100, 1); // Max 100ml = 100%\n    const circumference = 2 * Math.PI * radius;\n    const progressOffset = circumference * (1 - volumePercent);\n\n    // Progress ring (dark mode aware)\n    const progressColor = getComputedStyle(document.documentElement).getPropertyValue('--danger-color').trim()\n                         || '#dc2626';\n    ctx.strokeStyle = progressColor;\n    ctx.lineWidth = 8;\n    ctx.setLineDash([]);\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, -Math.PI / 2, -Math.PI / 2 + (volumePercent * 2 * Math.PI));\n    ctx.stroke();\n\n    // Continue animation\n    animationFrame += 1;\n    if (volume > 0) {\n      requestAnimationFrame(draw);\n    }\n  }\n\n  // Start animation\n  draw();\n\n  // Stop animation when canvas is removed from DOM\n  const observer = new MutationObserver(() => {\n    if (!document.contains(canvas)) {\n      isAnimating = false;\n      observer.disconnect();\n    }\n  });\n  observer.observe(document.body, { childList: true, subtree: true });\n}\n\n/**\n * Get brain visualization CSS classes\n * @param {string} size - 'compact' or 'detailed'\n * @returns {string} CSS classes\n */\nexport function getBrainVisualizationClasses(size) {\n  const baseClasses = 'brain-visualization';\n  const sizeClasses = size === 'compact' ? 'compact-brain' : 'detailed-brain';\n  return `${baseClasses} ${sizeClasses}`;\n}\n"],"names":["renderStrokeCenterMap","results","t","initializeStrokeCenterMap","useGpsButton","manualLocationButton","locationManual","locationInput","searchLocationButton","resultsContainer","requestUserLocation","location","geocodeLocation","e","showLocationError","safeSetInnerHTML","error","position","latitude","longitude","showNearestCenters","errorMessage","locationString","coordPattern","coordMatch","lat","lng","searchLocation","url","response","data","supportedStates","result","locationName","routing","ROUTING_ALGORITHM","_a","routingExplanation","getEnhancedRoutingExplanation","getStateName","database","COMPREHENSIVE_HOSPITAL_DATABASE","allHospitals","destination","calculateDistance","travelInfo","calculateEmergencyTravelTime","alternatives","h","hospital","a","b","alt","html","renderEnhancedStrokeCenterCard","mainDiv","locationDiv","primaryDiv","primaryCard","createStrokeCenterCard","altDiv","altCard","noteDiv","addStrokeCenterEventListeners","_b","_c","_d","_e","_g","_f","_h","_i","stateCode","ichPercent","urgencyIcon","center","isRecommended","capabilities","networkBadge","card","container","callButtons","directionsButtons","button","phone","message","renderCircularBrainDisplay","volume","formattedVolume","formatVolumeDisplay","canvasId","initializeVolumeAnimations","canvas","cssWidth","cssHeight","drawVolumeFluid","ctx","centerX","centerY","radius","animationFrame","isAnimating","isDarkMode","draw","drawFluidLayer","fillHeight","baseLevel","startX","x","waveOffset1","waveOffset2","y","borderColor","volumePercent","progressColor","observer"],"mappings":"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"}